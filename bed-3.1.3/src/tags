!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDNEWLINE	file.cpp	682;"	d	file:
ADDNEWLINE	file.cpp	684;"	d	file:
ADDNEWLINE	file.cpp	795;"	d	file:
ADDNEWLINE	savedatatype.cpp	95;"	d	file:
ALIGNMEMORY	memory.h	39;"	d
ASCII	type.h	23;"	d
ASCII_H	ascii.h	19;"	d
ASKFILE	editor.h	441;"	d
Align	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Align	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
Ascii	ascii.cpp	/^Ascii::Ascii ( Editor *ed,int x1, int y1): ScreenPart( ed, 1, 256, 1 ,x1, y1,0)	{$/;"	f	class:Ascii
Ascii	ascii.cpp	/^Ascii::Ascii(Ascii const &part): ScreenPart(part){$/;"	f	class:Ascii
Ascii	ascii.h	/^class  Ascii : public ScreenPart {	$/;"	c
BACK	dialog.h	140;"	d
BACKATTR	readconfig.h	32;"	d
BARATTR	readconfig.h	25;"	d
BARSTANDATTR	readconfig.h	26;"	d
BEDSMAXPATH	system.h	39;"	d
BEDSMAXPATH	system.h	41;"	d
BEDS_SIZE_T	offtypes.h	199;"	d
BETWEENFIELDSSATTR	readconfig.h	41;"	d
BETWEENPARTSATTR	readconfig.h	40;"	d
BIGEST	memory.h	62;"	d
BIGGERMMAPBLOCK	bytesearch.cpp	18;"	d	file:
BIN	type.h	25;"	d
BINARY_FLAG	system.h	85;"	d
BINARY_FLAG	system.h	87;"	d
BIOSDISK	offtypes.h	228;"	d
BIOSDISKDLL	memory.cpp	289;"	d	file:
BIOSDISK_H	biosdisk.h	2;"	d
BLOCKCOUNT	biosdisk.h	/^typedef WORD BLOCKCOUNT;$/;"	t
BLOCKPRINT	offtypes.h	152;"	d
BLOCKPRINT	offtypes.h	168;"	d
BLOCKSIZE	memory.cpp	/^BLOCKSIZE= setblocksize(STBLOCKSIZE );$/;"	v
BLOCKSIZE	memory.h	/^int BLOCKSIZE;$/;"	m	class:Memory
BLOCKTYPE	offtypes.h	191;"	d
BOOL	memory.h	/^typedef int BOOL ;$/;"	t
BRIEF_FILE	conf-.h	4;"	d
BUILD_ALIAS	confdefines.h	55;"	d
BUILD_ALIAS	definesonly.h	31;"	d
BytesPerSector	biosdisk.h	/^	WORD BytesPerSector;$/;"	m	struct:diskinfo
BytesPerSector	memory.cpp	/^	WORD BytesPerSector;$/;"	m	struct:regdisk	file:
CLIPBOARD	dataprocer.h	6;"	d
COLMAX	config.h	19;"	d
COMMANDATTR	readconfig.h	24;"	d
COMMANDOFF	inout.h	29;"	d
COMMANDON	inout.h	27;"	d
CONFDIRWIN	system.h	42;"	d
CONFDIRWIN	winpad.h	1;"	d
CONTAIN_H	contain.h	19;"	d
CONVERT_H	convert.h	19;"	d
CURSES	screen.h	135;"	d
CURSESINIT_H	cursesinit.h	19;"	d
CURSES_HEADER	config.h	25;"	d
CURSES_HEADER	config.h	29;"	d
CURSES_HEADER	config.h	32;"	d
CURSES_HEADER	config.h	34;"	d
CURSORALL	readconfig.h	72;"	d
CURSORATTR	readconfig.h	38;"	d
CURSORNOACTIVEATTR	readconfig.h	42;"	d
CURSOROFF	readconfig.h	69;"	d
CURSORON	readconfig.h	64;"	d
CURSORON	readconfig.h	67;"	d
CURSORONPAS	readconfig.h	65;"	d
Case	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Case	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
ChTrans	editor.h	/^typedef  int  ChTrans(const int ch);$/;"	t
Color	rbtree.h	/^typedef enum rbcolors {RBRED,RBBLACK} Color;$/;"	t	typeref:enum:rbcolors
Common2	dialog.h	/^	Common2(T &v,int n=1000):old(v) {$/;"	f	class:Common2
Common2	dialog.h	/^template <typename T=int> class Common2 {$/;"	c
Contains	contain.cpp	/^	 Contains::Contains ( Contains const &con):HasSub(con) {$/;"	f	class:Contains
Contains	contain.cpp	/^	Contains::Contains ( Editor *ed): HasSub( ed)	{$/;"	f	class:Contains
Contains	contain.h	/^class  Contains : public HasSub {	$/;"	c
CopyRange	winsparsecp.cpp	/^bool CopyRange(HANDLE hFrom, LARGE_INTEGER iPos, LARGE_INTEGER iSize, HANDLE hTo, LARGE_INTEGER tooff) {$/;"	f
DATATYPES_H	datatypes.h	19;"	d
DATE_LOCALE	dialog.cpp	633;"	d	file:
DEBUG	memory.h	60;"	d
DEBUG	rbtree.cpp	64;"	d	file:
DEBUGGING	debug.h	27;"	d
DEBUGGING	debug.h	29;"	d
DEBUGGING	debug.h	34;"	d
DEBUGP	searchinterrupt.h	10;"	d
DEBUGSIZE	debug.cpp	30;"	d	file:
DEBUGUIT	memory.cpp	22;"	d	file:
DEBUGUIT	search.cpp	730;"	d	file:
DEBUG_H	debug.h	19;"	d
DEC	type.h	24;"	d
DECDEST	desturbe.h	/^inline void DECDEST(void) {$/;"	f
DECDEST	desturbe.h	53;"	d
DECPDDEST	desturbe.h	63;"	d
DEFAULTBEDRCBIN	file.cpp	/^const auto DEFAULTBEDRCBIN =R"(~\/.bedrc-bin)";$/;"	v
DEFINEUSELSEEK	memory.h	/^DEFINEUSELSEEK ;$/;"	m	class:Memory
DEFINEUSELSEEK	memory.h	73;"	d
DEFINEUSELSEEK	memory.h	80;"	d
DESTLOCK	desturbe.h	/^inline void DESTLOCK(void ) { pthread_mutex_lock(& desturbemutex);}$/;"	f
DESTLOCK	desturbe.h	/^inline void DESTLOCK(void ) {sem_wait(&desturbesem);}$/;"	f
DESTROYUSELSEEK	memory.h	69;"	d
DESTROYUSELSEEK	memory.h	71;"	d
DESTROYUSELSEEK	memory.h	81;"	d
DESTUNLOCK	desturbe.h	/^inline void DESTUNLOCK(void) { pthread_mutex_unlock(& desturbemutex);}$/;"	f
DESTUNLOCK	desturbe.h	/^inline void DESTUNLOCK(void) {sem_post(&desturbesem);}$/;"	f
DESTURBE_H	desturbe.h	2;"	d
DIGITSTRING_H	digitstring.h	19;"	d
DLDEFAULTCOLORS	readconfig.cpp	216;"	d	file:
DONTINTCURSES	config.h	43;"	d
DONTINTCURSES	main.cpp	32;"	d	file:
DONTKILL	main.cpp	31;"	d	file:
DONTSUSPEND	file.cpp	58;"	d	file:
DONTSUSPEND	suspend.cpp	109;"	d	file:
DONTSUSPEND	suspend.cpp	112;"	d	file:
DONT_TEST_SHELL	suspend.cpp	118;"	d	file:
DONT_TEST_SHELL	suspend.cpp	122;"	d	file:
Data	rbtree.h	/^typedef struct data Data;$/;"	t	typeref:struct:data
DataType	type.h	/^typedef int DataType;$/;"	t
Deel	hash.h	/^		  } Deel;$/;"	t	class:Hash	typeref:struct:Hash::deel
Diskclose	biosdisk.h	/^typedef int (*Diskclose)(Diskinfo *drive);$/;"	t
Diskinfo	biosdisk.h	/^typedef struct diskinfo Diskinfo;$/;"	t	typeref:struct:diskinfo
Diskopen	biosdisk.h	/^typedef Diskinfo *(*Diskopen)(int drive,int access) ;$/;"	t
Diskpresent	biosdisk.h	/^typedef  BOOL  (*Diskpresent)(int drive);$/;"	t
Diskread	biosdisk.h	/^typedef BOOL (*Diskread)(Diskinfo *disk,void *buf,BLOCKCOUNT count, LONGLONG offset );$/;"	t
Diskreopen	biosdisk.h	/^typedef Diskinfo *(*Diskreopen)(Diskinfo *,int access) ;$/;"	t
EDITOR_H	editor.h	19;"	d
EENTEST	dialog.cpp	60;"	d	file:
ENDDEST	desturbe.h	/^inline void ENDDEST(void) {$/;"	f
ENDDEST	desturbe.h	/^inline void ENDDEST(void) {sem_destroy(&desturbesem);}$/;"	f
ENDDEST	desturbe.h	58;"	d
ENDFOREVER	search.cpp	598;"	d	file:
ENDPDDEST	desturbe.h	68;"	d
ERR	keyconfig.cpp	21;"	d	file:
ERR	keyconfig.cpp	34;"	d	file:
ERR	main.cpp	43;"	d	file:
ERR	screen.cpp	20;"	d	file:
ERR	screen.cpp	22;"	d	file:
ERR	search.cpp	141;"	d	file:
ERR	search.cpp	143;"	d	file:
ERR	suspend.cpp	18;"	d	file:
ERR	suspend.cpp	20;"	d	file:
EXTRAFILTERS	dataprocer.h	3;"	d
EXTRAMMAP	bytesearch.cpp	100;"	d	file:
EXTRAMOVE	dataprocer.h	4;"	d
EXTRAPROC	dataprocer.h	2;"	d
Edge	editor.h	/^uint8_t List=0, Edge=false, Keep=false,keepAlign=false,keepUnit=false;$/;"	m	struct:SearchTyper
Editor	editor.h	/^class Editor {$/;"	c
Editor	editup.cpp	/^Editor::Editor(const char *filename): mem(filename),view(mem),nrx(1)$/;"	f	class:Editor
Empty	withcontain.cpp	/^	 Empty ( Empty const &rep):ScreenPart(rep) {$/;"	f	class:Empty
Empty	withcontain.cpp	/^	public:	 Empty ( Editor *ed,int b=4,int x1=0, int y1=0): ScreenPart( ed, 1, 10 ,b,x1, y1,0)	{$/;"	f	class:Empty
Empty	withcontain.cpp	/^class  Empty : public ScreenPart {	$/;"	c	file:
FILEHANDLE	offtypes.h	124;"	d
FILEHANDLE	offtypes.h	136;"	d
FILEHANDLE	offtypes.h	47;"	d
FILEHANDLE	offtypes.h	99;"	d
FILENAMESEP	system.h	80;"	d
FILENAMESEP	system.h	82;"	d
FILENR	editor.h	444;"	d
FILETIME2time_t	marken.cpp	/^inline  unsigned  long long FILETIME2time_t( FILETIME *filetime)$/;"	f
FILTER_H	filter.h	19;"	d
FIRSTFILE	editor.h	443;"	d
FOREVER	search.cpp	597;"	d	file:
FREEMMAP	bytesearch.cpp	17;"	d	file:
FREEMMAP	bytesearch.cpp	81;"	d	file:
FREEMMAP	bytesearch.cpp	82;"	d	file:
FSTAT	offtypes.h	109;"	d
FSTAT	offtypes.h	63;"	d
FSTAT	offtypes.h	88;"	d
FSTAT	offtypes.h	92;"	d
FTRUNCATE	offtypes.h	112;"	d
FTRUNCATE	offtypes.h	66;"	d
FTRUNCATE	offtypes.h	95;"	d
FTRUNCATE	sparsecp.cpp	26;"	d	file:
FTRUNCATEHANDLE	offtypes.h	133;"	d
FTRUNCATEHANDLE	offtypes.h	135;"	d
FTRUNCATEHANDLE	offtypes.h	56;"	d
FTRUNCATEHANDLE	offtypes.h	96;"	d
Fieldcol	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	t	typeref:struct:__anon11
FileInfo	memory.h	/^	BY_HANDLE_FILE_INFORMATION FileInfo;$/;"	m	class:Memory
Filter	filter.h	/^	Filter(Filter const &fil): $/;"	f	class:Filter
Filter	filter.h	/^	Filter(int fb,int sb,const char *n="filter", char *l=nothing): part(NULL), name(n),label(l),bytesscreen(sb),bytesfile(fb),err(0) {$/;"	f	class:Filter
Filter	filter.h	/^class Filter {$/;"	c
Filterprocptr	filter.h	/^typedef Filter *(*Filterprocptr)(int,int,const char*,ScreenPart *);$/;"	t
FindFirstVolumeA	disk.cpp	/^ FindFirstVolumeAType FindFirstVolumeA;$/;"	m	class:Volumes	file:
FindFirstVolumeAType	disk.cpp	/^typedef WINBASEAPI HANDLE WINAPI (*FindFirstVolumeAType)(LPCSTR,DWORD);$/;"	t	file:
FindNextVolumeA	disk.cpp	/^ FindNextVolumeAType FindNextVolumeA;$/;"	m	class:Volumes	file:
FindNextVolumeAType	disk.cpp	/^typedef WINBASEAPI BOOL WINAPI (*FindNextVolumeAType)(HANDLE,LPCSTR,DWORD);$/;"	t	file:
FindVolumeClose	disk.cpp	/^ FindVolumeCloseType FindVolumeClose;$/;"	m	class:Volumes	file:
FindVolumeCloseType	disk.cpp	/^typedef WINBASEAPI BOOL WINAPI (*FindVolumeCloseType)(HANDLE);$/;"	t	file:
Flag	memory.h	/^typedef char Flag;$/;"	t
Forward	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Forward	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
FrequencyPerformanceQuery	times.cpp	/^LARGE_INTEGER  FrequencyPerformanceQuery;$/;"	v
GETDEST	desturbe.h	/^inline int GETDEST(void) {return dontdesturbe;}$/;"	f
GETDEST	desturbe.h	56;"	d
GETFILE_H	dialog.h	20;"	d
GETOTHERTERM	config.h	21;"	d
GETPDDEST	desturbe.h	66;"	d
GNU	selectsearch.h	21;"	d
GNUformsearch	gnusearch.cpp	/^OFFTYPE Editor::GNUformsearch(SearchAim &aim) {$/;"	f	class:Editor
GNUhit	editor.h	/^inline int GNUhit(const char *data,const int len,int *offset) {$/;"	f	class:Editor
GSTOPUSELSEEK	memory.h	77;"	d
GSTOPUSELSEEK	memory.h	79;"	d
GeenEditor	editor.h	43;"	d
GeenScreenPart	screenpart.h	91;"	d
General	screenpart.h	26;"	d
GetVolumeNameForVolumeMountPointA	disk.cpp	/^ GetVolumeNameForVolumeMountPointAType GetVolumeNameForVolumeMountPointA;$/;"	m	class:Volumes	file:
GetVolumeNameForVolumeMountPointAType	disk.cpp	/^typedef WINBASEAPI BOOL WINAPI (*GetVolumeNameForVolumeMountPointAType)(LPCSTR,LPSTR,DWORD);$/;"	t	file:
GetVolumePathNamesForVolumeNameA	disk.cpp	/^ GetVolumePathNamesForVolumeNameAType GetVolumePathNamesForVolumeNameA;$/;"	m	class:Volumes	file:
GetVolumePathNamesForVolumeNameAType	disk.cpp	/^typedef WINBASEAPI BOOL WINAPI (*GetVolumePathNamesForVolumeNameAType)(LPCSTR,LPSTR,DWORD,PDWORD);$/;"	t	file:
Getfilesize	biosdisk.h	/^typedef LONGLONG (*Getfilesize)(Diskinfo *disk) ;$/;"	t
HASDELSCREEN	confdefines.h	5;"	d
HASDELSCREEN	definesonly.h	3;"	d
HASSUB_H	hassub.h	19;"	d
HAS_APPLICATIONS	conf-.h	1;"	d
HAS_BOOL	editor.h	25;"	d
HAS_CURS_SET	confdefines.h	4;"	d
HAS_CURS_SET	definesonly.h	2;"	d
HAS_FILE	conf-.h	3;"	d
HAS_FILE	definesonly.h	58;"	d
HAS_GETVALUE	confdefines.h	7;"	d
HAS_GETVALUE	definesonly.h	4;"	d
HAS_GETVALUE	nepsem.h	8;"	d
HAS_GMTIME_R	confdefines.h	8;"	d
HAS_GMTIME_R	definesonly.h	5;"	d
HAS_LOCALTIME_R	confdefines.h	9;"	d
HAS_LOCALTIME_R	definesonly.h	6;"	d
HAS_LSEEK64	confdefines.h	11;"	d
HAS_LSEEK64	definesonly.h	8;"	d
HAS_MAP_FAILED	confdefines.h	12;"	d
HAS_MAP_FAILED	definesonly.h	9;"	d
HAS_MEMINFO	conf-.h	6;"	d
HAS_MEMINFO	definesonly.h	59;"	d
HAS_MKSTEMP	confdefines.h	13;"	d
HAS_MKSTEMP	definesonly.h	10;"	d
HAS_MREMAP	confdefines.h	14;"	d
HAS_MREMAP	definesonly.h	11;"	d
HAS_PREAD	confdefines.h	15;"	d
HAS_PREAD	definesonly.h	12;"	d
HAS_REALPATH	confdefines.h	3;"	d
HAS_REALPATH	definesonly.h	1;"	d
HAS_SEMAPHORE	confdefines.h	17;"	d
HAS_SEMAPHORE	definesonly.h	13;"	d
HAS_SETNEWHANDLER	confdefines.h	18;"	d
HAS_SETNEWHANDLER	definesonly.h	14;"	d
HAS_SIGSETJMP	confdefines.h	56;"	d
HAS_SIGSETJMP	definesonly.h	32;"	d
HAS_STRNLEN	confdefines.h	19;"	d
HAS_STRNLEN	definesonly.h	15;"	d
HAS_STRTOLL	confdefines.h	20;"	d
HAS_STRTOLL	definesonly.h	16;"	d
HAS_WRESIZE	confdefines.h	23;"	d
HAS_WRESIZE	definesonly.h	17;"	d
HAVE_CLOCK_GETTIME	confdefines.h	76;"	d
HAVE_CLOCK_GETTIME	definesonly.h	49;"	d
HAVE_CURSES_H	confdefines.h	60;"	d
HAVE_CURSES_H	definesonly.h	36;"	d
HAVE_DIRENT_H	confdefines.h	64;"	d
HAVE_DIRENT_H	definesonly.h	38;"	d
HAVE_ERRNO_H	confdefines.h	58;"	d
HAVE_ERRNO_H	definesonly.h	34;"	d
HAVE_FLOAT_H	confdefines.h	25;"	d
HAVE_FLOAT_H	definesonly.h	18;"	d
HAVE_FSTAT64	confdefines.h	73;"	d
HAVE_FSTAT64	definesonly.h	46;"	d
HAVE_FTRUNCATE64	confdefines.h	69;"	d
HAVE_FTRUNCATE64	definesonly.h	42;"	d
HAVE_GLOB	confdefines.h	74;"	d
HAVE_GLOB	definesonly.h	47;"	d
HAVE_KILL	confdefines.h	83;"	d
HAVE_KILL	definesonly.h	55;"	d
HAVE_MEMCCPY	confdefines.h	82;"	d
HAVE_MEMCCPY	definesonly.h	54;"	d
HAVE_NEW	confdefines.h	26;"	d
HAVE_NEW	definesonly.h	19;"	d
HAVE_OFF64_T	confdefines.h	50;"	d
HAVE_OFF64_T	definesonly.h	27;"	d
HAVE_OPEN64	confdefines.h	71;"	d
HAVE_OPEN64	definesonly.h	44;"	d
HAVE_SENDFILE	confdefines.h	77;"	d
HAVE_SENDFILE	definesonly.h	50;"	d
HAVE_SENDFILE64	confdefines.h	78;"	d
HAVE_SENDFILE64	definesonly.h	51;"	d
HAVE_SETENV	confdefines.h	68;"	d
HAVE_SETENV	definesonly.h	41;"	d
HAVE_SIGADDSET	confdefines.h	81;"	d
HAVE_SIGADDSET	definesonly.h	53;"	d
HAVE_SIGSUSPEND	confdefines.h	80;"	d
HAVE_SIGSUSPEND	definesonly.h	52;"	d
HAVE_STAT64	confdefines.h	72;"	d
HAVE_STAT64	definesonly.h	45;"	d
HAVE_STPCPY	confdefines.h	75;"	d
HAVE_STPCPY	definesonly.h	48;"	d
HAVE_STRCHRNUL	confdefines.h	52;"	d
HAVE_STRCHRNUL	definesonly.h	28;"	d
HAVE_SYS_ERRNO_H	confdefines.h	59;"	d
HAVE_SYS_ERRNO_H	definesonly.h	35;"	d
HAVE_SYS_IOCTL_H	confdefines.h	63;"	d
HAVE_SYS_IOCTL_H	definesonly.h	37;"	d
HAVE_SYS_MMAN_H	confdefines.h	57;"	d
HAVE_SYS_MMAN_H	definesonly.h	33;"	d
HAVE_SYS_WAIT_H	confdefines.h	65;"	d
HAVE_SYS_WAIT_H	definesonly.h	39;"	d
HAVE_TCSETATTR	confdefines.h	84;"	d
HAVE_TCSETATTR	definesonly.h	56;"	d
HAVE_TERMIOS_H	confdefines.h	66;"	d
HAVE_TERMIOS_H	definesonly.h	40;"	d
HAVE_TIMEGM	confdefines.h	10;"	d
HAVE_TIMEGM	definesonly.h	7;"	d
HAVE_TRUNCATE64	confdefines.h	70;"	d
HAVE_TRUNCATE64	definesonly.h	43;"	d
HEX	type.h	22;"	d
HIDECURSOR	screen.h	110;"	d
HIDECURSOR	screen.h	114;"	d
HIDECURSOR	screen.h	117;"	d
HOSTCONF	confdefines.h	53;"	d
HOSTCONF	definesonly.h	29;"	d
HOST_ALIAS	confdefines.h	54;"	d
HOST_ALIAS	definesonly.h	30;"	d
HasSub	hassub.cpp	/^	 HasSub::HasSub ( HasSub const &con):ScreenPart(con) {$/;"	f	class:HasSub
HasSub	hassub.cpp	/^	HasSub::HasSub( Editor *ed,int nr,int act): ScreenPart( ed,0, 0) {$/;"	f	class:HasSub
HasSub	hassub.h	/^class  HasSub : public ScreenPart {	$/;"	c
Hash	gethelp.cpp	112;"	d	file:
Hash	gethelp.cpp	88;"	d	file:
Hash	hash.h	/^	Hash(int len=255): TABLESIZE(len) {$/;"	f	class:Hash
Hash	hash.h	/^class Hash {$/;"	c
Hashtable	hash.h	/^	typedef Deel * Hashtable;$/;"	t	class:Hash
INCDEST	desturbe.h	/^inline void INCDEST(void) {$/;"	f
INCDEST	desturbe.h	52;"	d
INCLS	sparsecp.cpp	5;"	d	file:
INCPDDEST	desturbe.h	62;"	d
INITDEST	desturbe.h	/^inline	void INITDEST(void) {$/;"	f
INITDEST	desturbe.h	/^inline	void INITDEST(void) {sem_init(&desturbesem,0,1);}$/;"	f
INITDEST	desturbe.h	59;"	d
INITPDDEST	desturbe.h	69;"	d
INITUSELSEEK	memory.h	74;"	d
INITUSELSEEK	memory.h	82;"	d
INOUT_H	inout.h	19;"	d
INTCOUNT	searchinterrupt.h	/^BLOCKTYPE INTCOUNT;$/;"	m	class:SearchInterrupt
INTSEARCH	memory.h	302;"	d
INVALID_KEY	keystrokes.h	/^const int INVALID_KEY=ERR;$/;"	v
ISDEST	desturbe.h	/^inline int ISDEST(void) {return dontdesturbe;}$/;"	f
ISDEST	desturbe.h	57;"	d
ISPDDEST	desturbe.h	67;"	d
ITERTHROUGH	dialog.h	447;"	d
InConsole	main.cpp	/^inline int InConsole(void) { return consoleoutputhandle!=INVALID_HANDLE_VALUE;}$/;"	f
KBNODELAY	main.cpp	1485;"	d	file:
KEYATTR	readconfig.h	31;"	d
KEYCOLOR	dialog.h	135;"	d
KEYINPUT_H	keyinput.h	28;"	d
KEYPROC_H	keyproc.h	19;"	d
KEYSTROKES_H	keystrokes.h	19;"	d
KEYSTROKE_ERROR	keystrokes.h	/^const int KEYSTROKE_ERROR=INT_MIN;$/;"	v
Keep	editor.h	/^uint8_t List=0, Edge=false, Keep=false,keepAlign=false,keepUnit=false;$/;"	m	struct:SearchTyper
Key	rbtree.h	/^typedef BLOCKTYPE Key;$/;"	t
KeyEdit	keyproc.h	/^class KeyEdit: public keyinput {$/;"	c
KeydefType	keyconfig.cpp	61;"	d	file:
Keystrokes	keystrokes.h	/^class Keystrokes {$/;"	c
Keystrokes	macros.cpp	/^	Keystrokes::Keystrokes(char *na):name(na) {$/;"	f	class:Keystrokes
LARGEFILES	offtypes.h	130;"	d
LARGEFILES	offtypes.h	53;"	d
LARGEFILE_FLAG	offtypes.h	212;"	d
LARGEFILE_FLAG	offtypes.h	214;"	d
LARGERTYPE	offtypes.h	178;"	d
LASTFILE	editor.h	442;"	d
LCLOSE	offtypes.h	198;"	d
LEAVE	search.cpp	599;"	d	file:
LINE	keyconfig.cpp	69;"	d	file:
LINE	menus.cpp	227;"	d	file:
LINE	menus.cpp	232;"	d	file:
LINE	menus.cpp	236;"	d	file:
LINE	menus.cpp	254;"	d	file:
LINE	menus.cpp	260;"	d	file:
LINEMAX	config.h	18;"	d
LIVEWITHXITERM	inout.h	30;"	d
LONGLONG	biosdisk.h	43;"	d
LONGLONGOFFSET	offtypes.h	115;"	d
LONGLONGOFFSET	offtypes.h	128;"	d
LONGLONGOFFSET	offtypes.h	51;"	d
LONGLONGOFFSET	offtypes.h	98;"	d
LOPEN	offtypes.h	197;"	d
LPREAD	offtypes.h	121;"	d
LPREAD	offtypes.h	139;"	d
LPREAD	offtypes.h	44;"	d
LPREAD	offtypes.h	72;"	d
LPWRITE	editmacros.cpp	212;"	d	file:
LPWRITE	offtypes.h	122;"	d
LPWRITE	offtypes.h	140;"	d
LPWRITE	offtypes.h	45;"	d
LPWRITE	offtypes.h	73;"	d
LREAD	offtypes.h	195;"	d
LSEEK	offtypes.h	105;"	d
LSEEK	offtypes.h	60;"	d
LSEEK	offtypes.h	71;"	d
LWRITE	offtypes.h	196;"	d
List	editor.h	/^uint8_t List=0, Edge=false, Keep=false,keepAlign=false,keepUnit=false;$/;"	m	struct:SearchTyper
MAIN_H	main.h	19;"	d
MAP_FAILED	system.h	77;"	d
MARKFILEGEGSIZE	marken.cpp	/^const int MARKFILEGEGSIZE=300;$/;"	v
MARKSVERSION	marken.cpp	/^uint32_t MARKSVERSION=0;$/;"	v
MARKS_H	marks.h	19;"	d
MAXANT	convert.h	27;"	d
MAXANT	editor.h	44;"	d
MAXAPART	parts.cpp	956;"	d	file:
MAXCDSIZE	memory.cpp	/^OFFTYPE MAXCDSIZE = MAXCDSIZEDEF;$/;"	v
MAXCDSIZE	memory.cpp	/^OFFTYPE MAXCDSIZE = OFFTYPEMAX;$/;"	v
MAXCDSIZEDEF	memory.cpp	99;"	d	file:
MAXCONFSTRING	parts.cpp	958;"	d	file:
MAXDISCSIZE	offtypes.h	186;"	d
MAXDOUBLE	multidigit.cpp	128;"	d	file:
MAXDOUBLE	multidigit.cpp	132;"	d	file:
MAXDRIVES	disk.cpp	81;"	d	file:
MAXEXTEND	editlimits.cpp	/^ const int MAXEXTEND=337953;	\/\/((SHOULDMEM)*((double)SHOULDMEM))\/useext(SHOULDMEM);$/;"	v
MAXFILES	editor.h	445;"	d
MAXKEYNAME	menus.cpp	/^static const int MAXKEYNAME=10;$/;"	v	file:
MAXKEYS	readconfig.cpp	/^const int MAXKEYS=100;$/;"	v
MAXLINE	readconfig.cpp	/^constexpr int MAXLINE=400;$/;"	v
MAXMARKALL	marks.h	86;"	d
MAXMARKDAT	marks.h	87;"	d
MAXMENUS_H	maxmenus.h	2;"	d
MAXNUMSTR	editor.h	329;"	d
MAXOFFTYPE	marken.cpp	/^const int MAXOFFTYPE=(sizeof(OFFTYPE)<8?8:sizeof(OFFTYPE));$/;"	v
MAXSEARCHSTR	search.cpp	36;"	d	file:
MAXSELBUF	editlimits.cpp	/^ const int MAXSELBUF=254094;	\/\/((SHOULDMEM)*((double)SHOULDMEM))\/usecopy(SHOULDMEM);$/;"	v
MAXSPACEAFTER	parts.cpp	957;"	d	file:
MAXTOUNDO	editlimits.cpp	/^ const int MAXTOUNDO=337953;	\/\/((SHOULDMEM)*((double)SHOULDMEM))\/usetrunc(SHOULDMEM);$/;"	v
MAXTREEDEPTH	rbtree.cpp	172;"	d	file:
MAXUNDO	editor.h	/^int MAXUNDO;$/;"	m	class:Editor
MAXUSERLABEL	parts.cpp	959;"	d	file:
MEMORY	bytesearch.cpp	104;"	d	file:
MEMORY	bytesearch.cpp	105;"	d	file:
MEMORY	gnuasciiregex.cpp	8;"	d	file:
MEMORY	gnuasciiregex.cpp	9;"	d	file:
MEMORY	gnusearch.cpp	47;"	d	file:
MEMORY	gnusearch.cpp	48;"	d	file:
MEMORY	hyperscan.cpp	15;"	d	file:
MEMORY	hyperscan.cpp	16;"	d	file:
MEMORY	re2search.cpp	14;"	d	file:
MEMORY	re2search.cpp	16;"	d	file:
MEMORY	unitsearch.cpp	5;"	d	file:
MEMORY	unitsearch.cpp	6;"	d	file:
MEMORY_H	memory.h	21;"	d
MENUATTR	readconfig.h	27;"	d
MENUKEYATTR	readconfig.h	28;"	d
MENUSELATTR	readconfig.h	29;"	d
MESSAGELINE	inout.h	31;"	d
MESSSIZE	readconfig.cpp	205;"	d	file:
MISC_H	misc.h	2;"	d
MMAP	bytesearch.cpp	83;"	d	file:
MMAP	bytesearch.cpp	84;"	d	file:
MMAP	offtypes.h	104;"	d
MMAP	offtypes.h	59;"	d
MMAP	offtypes.h	70;"	d
MMAPBLOCKSIZE	bytesearch.cpp	32;"	d	file:
MMAPBLOCKSIZE	bytesearch.cpp	35;"	d	file:
MMAPBLOCKTYPE	bytesearch.cpp	33;"	d	file:
MMAPBLOCKTYPE	bytesearch.cpp	36;"	d	file:
MOUSE_MOVED	config.h	40;"	d
MOUSE_MOVED	dialog.h	28;"	d
MOUSE_MOVED	dialog.h	29;"	d
MOUSE_MOVED	screen.h	88;"	d
MULTIDIGIT_H	multidigit.h	19;"	d
MUNMAP	offtypes.h	190;"	d
MYALLOC_H	myalloc.h	19;"	d
MYGLOB_H	glob.h	20;"	d
MYSYNTAX	gnuasciiregex.cpp	/^static const auto  MYSYNTAX =$/;"	v	file:
MY_INVALID_HANDLE_VALUE	offtypes.h	100;"	d
MY_INVALID_HANDLE_VALUE	offtypes.h	125;"	d
MY_INVALID_HANDLE_VALUE	offtypes.h	137;"	d
MY_INVALID_HANDLE_VALUE	offtypes.h	48;"	d
MY_PTHREAD_MUTEX_ERRORCHECK	confdefines.h	28;"	d
MY_PTHREAD_MUTEX_ERRORCHECK	definesonly.h	20;"	d
MainScreenheight	screen.h	148;"	d
MainScreenwidth	screen.h	149;"	d
Markgeg	marks.h	/^typedef  char Markgeg;$/;"	t	class:keylookup
Memcmp_t	editor.h	/^typedef int Memcmp_t(const void *one,const void *two,size_t len);$/;"	t
Memory	memory.h	/^class Memory {$/;"	c
Menugeg	editor.h	/^struct Menugeg {$/;"	s	class:Editor
MultiDigit	multidigit.cpp	/^	MultiDigit::MultiDigit( Editor *ed,int b,int len,int order,int x1, int y1):$/;"	f	class:MultiDigit
MultiDigit	multidigit.cpp	/^	MultiDigit::MultiDigit(MultiDigit const &old): General(old) {$/;"	f	class:MultiDigit
MultiDigit	multidigit.h	/^class MultiDigit: public ScreenPart {$/;"	c
MultiDigit	multidigit.h	21;"	d
NEEDS_BLOCKMODE	memory.h	37;"	d
NEPSEMA_H	nepsem.h	3;"	d
NEWFILENAME	memory.cpp	/^const char NEWFILENAME[]="Untitled";$/;"	v
NEXTFILE	editor.h	439;"	d
NIL	rbtree.h	/^	Treel *NIL;$/;"	m	class:Tree
NOATTR	readconfig.cpp	188;"	d	file:
NODEST	desturbe.h	/^inline void NODEST(void) {if(dontdesturbe) DESTUNLOCK(); dontdesturbe=0;}$/;"	f
NODEST	desturbe.h	54;"	d
NOENDWIN	config.h	46;"	d
NOPDDEST	desturbe.h	64;"	d
NORMAAL	inout.h	24;"	d
NORMAALKLEUR	screen.h	46;"	d
NORMALCOLOR	dialog.h	141;"	d
NOSIGNALS	defines.h	5;"	d
NOSTAT	offtypes.h	21;"	d
NOTYPE	type.h	27;"	d
NOUNBLOCKSIGNALS	conf-.h	10;"	d
NOUNBLOCKSIGNALS	definesonly.h	61;"	d
NOWARN	dialog.h	136;"	d
NOWARNUNUSEDVALUE	readconfig.h	45;"	d
NUMBEROFTREELS	rbtree.h	51;"	d
NUMDIGETS_USED	offtypes.h	177;"	d
N_	sys_types.h	35;"	d
None	editor.h	/^	None=0,$/;"	e	enum:uint8_t
OCT	type.h	26;"	d
OFFPRINT	offtypes.h	150;"	d
OFFPRINT	offtypes.h	166;"	d
OFFPRINTONLY	offtypes.h	151;"	d
OFFPRINTONLY	offtypes.h	167;"	d
OFFTYPE	offtypes.h	107;"	d
OFFTYPE	offtypes.h	126;"	d
OFFTYPE	offtypes.h	127;"	d
OFFTYPE	offtypes.h	49;"	d
OFFTYPE	offtypes.h	50;"	d
OFFTYPE	offtypes.h	80;"	d
OFFTYPE	offtypes.h	83;"	d
OFFTYPEINVALID	offtypes.h	193;"	d
OFFTYPEMAX	offtypes.h	155;"	d
OFFTYPEMAX	offtypes.h	157;"	d
OFFTYPEMAX	offtypes.h	169;"	d
OFFTYPES_H	offtypes.h	23;"	d
OLDGCCVARMACRO	varmacro.h	5;"	d
OLDTOBORDERPOS	move.cpp	262;"	d	file:
ONESHOT	main.cpp	469;"	d	file:
OPEN	offtypes.h	111;"	d
OPEN	offtypes.h	61;"	d
OPEN	offtypes.h	75;"	d
OPEN	offtypes.h	77;"	d
Offlarge	offtypes.h	/^typedef	 long long Offlarge;$/;"	t
Offlarge	offtypes.h	/^typedef	OFFTYPE Offlarge;$/;"	t
OldMainScreenwidth	main.cpp	/^int OldMainScreenwidth=thecols;$/;"	v
PACKSTRUCT	biosdisk.h	/^   } PACKSTRUCT;$/;"	v	typeref:struct:diskinfo
PACKSTRUCT	biosdisk.h	14;"	d
PACKSTRUCT	biosdisk.h	16;"	d
PACKSTRUCT	memory.cpp	/^   }  PACKSTRUCT;$/;"	v	typeref:struct:regdisk
PDNOCHANGESCREEN	cursesinit.cpp	273;"	d	file:
POINTER	hash.h	22;"	d
PREVFILE	editor.h	440;"	d
PRI_SIZE_T_MODIFIER	conf-.h	8;"	d
PRI_SIZE_T_MODIFIER	definesonly.h	60;"	d
PROCEXEFILENAMEFORMAT	conf-.h	2;"	d
PROCEXEFILENAMEFORMAT	definesonly.h	57;"	d
PROTO	hash.h	21;"	d
Parent	screenpart.h	/^	Parent(const char *nam,const class Parent * const par): name(nam), paren(par)$/;"	f	class:Parent
Parent	screenpart.h	/^class Parent {$/;"	c
Part_t	ptypes.h	2;"	d
PrintError	winsparsecp.cpp	/^void PrintError(DWORD dwErr) {$/;"	f
ProcelT	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	t	typeref:struct:__anon6
Proclist	execproc.h	/^class Proclist {$/;"	c
Proclist	procview.cpp	/^	Proclist::Proclist(void) {$/;"	f	class:Proclist
RBBLACK	rbtree.h	/^typedef enum rbcolors {RBRED,RBBLACK} Color;$/;"	e	enum:rbcolors
RBRED	rbtree.h	/^typedef enum rbcolors {RBRED,RBBLACK} Color;$/;"	e	enum:rbcolors
READCOLORS_H	readconfig.h	20;"	d
REALLONGDOUBLE16	conf-.h	9;"	d
REFRESH	dialog.cpp	77;"	d	file:
REFRESH	main.cpp	71;"	d	file:
REPEAT_H	repeat.h	19;"	d
RESIZE	main.h	61;"	d
REVERSE_H	reverse.h	19;"	d
RUNONWIN95	offtypes.h	224;"	d
Raw	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Raw	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
RegDisk	memory.cpp	/^typedef struct regdisk RegDisk;$/;"	t	typeref:struct:regdisk	file:
RegGNU	editor.h	/^	RegGNU=1$/;"	e	enum:uint8_t
RegHS	editor.h	/^		,RegHS$/;"	e	enum:uint8_t
RegRE2	editor.h	/^	,RegRE2$/;"	e	enum:uint8_t
RegType	editor.h	/^typedef RegexT RegType;$/;"	t
Regex	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Regex	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
RegexReplace	editor.h	/^RegexT RegexSearch=RegGNU,RegexReplace=RegGNU; $/;"	m	struct:SearchTyper
RegexSearch	editor.h	/^RegexT RegexSearch=RegGNU,RegexReplace=RegGNU; $/;"	m	struct:SearchTyper
Repeat	repeat.cpp	/^	 Repeat::Repeat ( Repeat const &rep):HasSub(rep) {$/;"	f	class:Repeat
Repeat	repeat.cpp	/^	Repeat::Repeat ( Editor *ed,ScreenPart *p, int nr,int x1, int y1): HasSub( ed)	{$/;"	f	class:Repeat
Repeat	repeat.h	/^class  Repeat : public HasSub {	$/;"	c
Reverse	reverse.h	/^	Reverse(Reverse const &rev): Filter(rev) {$/;"	f	class:Reverse
Reverse	reverse.h	/^	Reverse(int fb,int sb,const char *conv):Filter(fb,fb,Reversename) {$/;"	f	class:Reverse
Reverse	reverse.h	/^	Reverse(int len,int u=1) : Filter(len,len),unit(u) {$/;"	f	class:Reverse
Reverse	reverse.h	/^class Reverse: public Filter {$/;"	c
SAVEDTYPE	withcontain.cpp	/^	const char SAVEDTYPE[]="*.bedda";$/;"	v
SCREENPART_H	screenpart.h	19;"	d
SCREEN_H	screen.h	20;"	d
SEARCHAIM_H	searchaim.h	2;"	d
SEARCHFAILURE	offtypes.h	194;"	d
SEARCHINTDEC	searchinterrupt.h	182;"	d
SEARCHINTDEC	searchinterrupt.h	186;"	d
SEARCHINTDEC	searchinterrupt.h	191;"	d
SEARCHINTER	searchinterrupt.h	172;"	d
SEARCHINTER	searchinterrupt.h	174;"	d
SEARCHINTER	searchinterrupt.h	177;"	d
SEARCHINTERRUPT_H	searchinterrupt.h	2;"	d
SECTORSIZE	re2search.cpp	482;"	d	file:
SELATTR	readconfig.h	33;"	d
SELCOLOR	dialog.h	134;"	d
SELCURSORATTR	readconfig.h	39;"	d
SELECTDISK	menu.h	28;"	d
SELECTDISK	menu.h	30;"	d
SELECTIE	readconfig.h	37;"	d
SELECTIEON	readconfig.h	58;"	d
SELECTIEON	readconfig.h	60;"	d
SELECTSEARCH_H	selectsearch.h	2;"	d
SELSELATTR	readconfig.h	35;"	d
SELSELCOLOR	dialog.h	139;"	d
SETDEST	desturbe.h	/^inline void SETDEST(int num) {if(num!=dontdesturbe) { if(dontdesturbe<=0) DESTLOCK(); else { if(!num) DESTUNLOCK(); }; dontdesturbe=num; };}$/;"	f
SETDEST	desturbe.h	55;"	d
SETPDDEST	desturbe.h	65;"	d
SET_TRANSLATE	gnuasciiregex.cpp	57;"	d	file:
SET_TRANSLATE	gnuasciiregex.cpp	59;"	d	file:
SHOULDMEM	editlimits.cpp	/^ const int SHOULDMEM=1024*1024;$/;"	v
SHOWBACK	readconfig.h	36;"	d
SHOWCURSOR	screen.h	111;"	d
SHOWCURSOR	screen.h	115;"	d
SHOWCURSOR	screen.h	118;"	d
SIGUSR1	main.cpp	372;"	d	file:
SIZEOF_LONG	confdefines.h	48;"	d
SIZEOF_LONG	definesonly.h	25;"	d
SIZEOF_LONG_DOUBLE	confdefines.h	49;"	d
SIZEOF_LONG_DOUBLE	definesonly.h	26;"	d
SIZEOF_OFF_T	confdefines.h	46;"	d
SIZEOF_OFF_T	definesonly.h	23;"	d
SIZEOF_SSIZE_T	confdefines.h	47;"	d
SIZEOF_SSIZE_T	definesonly.h	24;"	d
SIZE_TPRINT	offtypes.h	201;"	d
SIZE_TPRINT	offtypes.h	205;"	d
SIZE_TPRINT	offtypes.h	207;"	d
SPLITGETFILES	defines.h	3;"	d
SPLITGETFILES	glob.h	26;"	d
STARTDIRS	glob.c	217;"	d	file:
STARTDIRS	glob.c	282;"	d	file:
STARTFILES	glob.c	216;"	d	file:
STARTFILES	glob.c	281;"	d	file:
STARTFILES	glob.c	57;"	d	file:
STARTMAPOFF	bytesearch.cpp	86;"	d	file:
STARTMAPOFF	bytesearch.cpp	89;"	d	file:
STARTMAXUNDO	editor.h	46;"	d
STARTSHOW	marken.cpp	214;"	d	file:
STARTUSELSEEK	memory.h	75;"	d
STARTUSELSEEK	memory.h	83;"	d
STAT	offtypes.h	110;"	d
STAT	offtypes.h	64;"	d
STAT	offtypes.h	89;"	d
STAT	offtypes.h	93;"	d
STATICKEYS	keyinput.h	91;"	d
STATTYPE	offtypes.h	108;"	d
STATTYPE	offtypes.h	62;"	d
STATTYPE	offtypes.h	87;"	d
STATTYPE	offtypes.h	91;"	d
STBLOCKSIZE	bytesearch.cpp	/^int STBLOCKSIZE=2048;$/;"	v
STBLOCKSIZE	bytesearch.cpp	/^int STBLOCKSIZE=4096;$/;"	v
STBLOCKSIZE	bytesearch.cpp	/^int STBLOCKSIZE=mmap_page_size;$/;"	v
STDC_HEADERS	confdefines.h	38;"	d
STDC_HEADERS	definesonly.h	21;"	d
STOPCONDITION	search.cpp	76;"	d	file:
STOPCONDITION	search.cpp	78;"	d	file:
STOPUSELSEEK	memory.h	76;"	d
STOPUSELSEEK	memory.h	84;"	d
STRTOO	offtypes.h	161;"	d
STRTOO	offtypes.h	163;"	d
STRTOO	offtypes.h	171;"	d
STRTOO	offtypes.h	173;"	d
SUBNEXT	dialog.h	145;"	d
SYSCONF_MEM	confdefines.h	44;"	d
SYSCONF_MEM	definesonly.h	22;"	d
SYSTEM_H	system.h	20;"	d
SYS_TYPES_H_INCLUDED	sys_types.h	23;"	d
ScreenPart	screenpart.cpp	/^	ScreenPart::ScreenPart( Editor *ed,int max,int b,int len,int x1, int y1, int a):editor(ed), contain(NULL) ,$/;"	f	class:ScreenPart
ScreenPart	screenpart.cpp	/^	ScreenPart::ScreenPart(ScreenPart const &part):editor(part.editor),contain(NULL),left(part.left),top(part.top),spaceafter(part.spaceafter),maxres(part.maxres),apart(part.apart),bytes(part.bytes),half(part.half),oldhalf(part.oldhalf),type(part.type) ,userlabel(NULL), filters(NULL),firstfilter(0),lastfilter(0),maxfilter(0) {$/;"	f	class:ScreenPart
ScreenPart	screenpart.h	/^class ScreenPart {$/;"	c
Screenfuncptr	typelist.cc	/^typedef		ScreenPart *(*Screenfuncptr)(Editor*);$/;"	t	file:
Screenheight	editor.h	/^	int allheight,Screenheight,Screenwidth,edittop;$/;"	m	class:Editor
Screenheight	screen.h	36;"	d
Screenwidth	editor.h	/^	int allheight,Screenheight,Screenwidth,edittop;$/;"	m	class:Editor
Screenwidth	screen.h	37;"	d
SearchAim	searchaim.h	/^	} SearchAim ;$/;"	t	typeref:struct:__anon13
SearchInit	selectsearch.h	/^typedef OFFTYPE (Editor::* SearchInit)(SearchAim &);$/;"	t
SearchInterrupt	searchinterrupt.h	/^SearchInterrupt($/;"	f	class:SearchInterrupt
SearchInterrupt	searchinterrupt.h	/^class SearchInterrupt {$/;"	c
SearchNext	selectsearch.h	/^typedef OFFTYPE (Editor::* SearchNext)(SearchAim &);$/;"	t
SearchOpts	editor.h	/^typedef SearchType SearchOpts;$/;"	t
SearchType	editor.h	/^} SearchType;$/;"	t	typeref:struct:SearchTyper
SearchTyper	editor.h	/^SearchTyper(): Forward(true),  Regex(None), Raw(true),Case(true), Align(false), Unit(false) {};$/;"	f	struct:SearchTyper
SearchTyper	editor.h	/^typedef struct SearchTyper{$/;"	s
Strokekeytype	keystrokes.h	/^typedef char Strokekeytype; $/;"	t
Stype	editor.h	/^SearchType Stype=defaultsearch;$/;"	m	class:Editor
SysType	sys_types.h	/^typedef struct _SysType SysType;$/;"	t	typeref:struct:_SysType
TABLESIZE	hash.h	/^	int  TABLESIZE;$/;"	m	class:Hash
TAKEBLOCKS	bytesearch.cpp	93;"	d	file:
TAKEBLOCKS	bytesearch.cpp	95;"	d	file:
TEST	digitstring.cpp	217;"	d	file:
TEXTATTR	readconfig.h	23;"	d
THESHELL	menu.h	18;"	d
TITLEATTR	readconfig.h	30;"	d
TITLECOLOR	dialog.h	138;"	d
TNone	selectsearch.h	19;"	d
TOLONGLONG	memory.cpp	579;"	d	file:
TOOBIGMESSAGE	parts.cpp	35;"	d	file:
TO_REAL	file.cpp	268;"	d	file:
TO_REAL	file.cpp	856;"	d	file:
TRACE_H	trace.h	19;"	d
TRUNCATE	offtypes.h	113;"	d
TRUNCATE	offtypes.h	67;"	d
TRUNCATE	offtypes.h	97;"	d
TRY_SUSPEND	suspend.cpp	115;"	d	file:
TRY_SUSPEND	suspend.cpp	117;"	d	file:
TYPELIST_H	typelist.h	19;"	d
TYPE_H	type.h	20;"	d
ToHShandler	hyperscan.cpp	/^} ToHShandler;$/;"	t	typeref:struct:__anon1	file:
Toshownhandler	hyperscan.cpp	/^Toshownhandler(OFFTYPE st,short el,short by):ellen(el),bytes(by), startpos(st){};$/;"	f	class:Toshownhandler
Toshownhandler	hyperscan.cpp	/^class Toshownhandler {$/;"	c	file:
Tree	rbtree.cpp	/^Tree::Tree(Data dat[],int n) {$/;"	f	class:Tree
Tree	rbtree.cpp	/^Tree::Tree(void) {$/;"	f	class:Tree
Tree	rbtree.h	/^class Tree {$/;"	c
Treel	rbtree.h	/^typedef struct treeel Treel;$/;"	t	typeref:struct:treeel
UITGEBREID	screen.h	31;"	d
UNCOMPRESS_FILE	conf-.h	5;"	d
UNLIMITEDUNDO	undo.cpp	43;"	d	file:
UNSELATTR	readconfig.h	34;"	d
UNSELCOLOR	dialog.h	142;"	d
UNUSEDVALUE	editup.cpp	176;"	d	file:
UNUSEDVALUE	inout.h	25;"	d
UNUSEDVALUE	menus.cpp	176;"	d	file:
USE_KEYPAD	config.h	24;"	d
USE_PREAD	offtypes.h	219;"	d
USE_SELECTDISK	menu.h	25;"	d
Unit	editor.h	/^struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; };$/;"	m	struct:SearchTyper::__anon7::__anon8
Unit	editor.h	/^typedef  struct {uint8_t  Forward; RegexT Regex;uint8_t Raw,Case, Align, Unit; } ProcelT ;$/;"	m	struct:__anon6
UnitHandler	editor.h	/^static int UnitHandler(unsigned int id, unsigned long long from,$/;"	f
VARMACRO	varmacro.h	4;"	d
VIEWBUF_H	viewbuf.h	2;"	d
Viewbuf	memed.cpp	/^Viewbuf::Viewbuf(Editor &e,int size):Viewbuf(e.mem,size) {}$/;"	f	class:Viewbuf
Viewbuf	viewbuf.h	/^Viewbuf(Memory &m,int size=0):mem(m), offset(OFFTYPEINVALID),endoffset(0),start(0),shown(0),blnr(0),minbl((m.blocksize()?(size-1)\/m.blocksize():0)+2),str(NULL),tmpbuf(NULL){ }$/;"	f	class:Viewbuf
Viewbuf	viewbuf.h	/^class Viewbuf {$/;"	c
VolNameType	disk.cpp	/^typedef char VolNameType;$/;"	t	file:
VolNameTypePtr	disk.cpp	/^typedef char* VolNameTypePtr;$/;"	t	file:
Volumes	disk.cpp	/^	Volumes(void) { $/;"	f	class:Volumes
Volumes	disk.cpp	/^class Volumes {$/;"	c	file:
WINERROR	win.h	56;"	d
WIN_H	win.h	2;"	d
WIN_MOUSE_MOVED	config.h	39;"	d
WinQuery	searchinterrupt.h	/^WinQuery(){ $/;"	f	class:WinQuery
WinQuery	searchinterrupt.h	/^class WinQuery {$/;"	c
XCursesProgramName	main.cpp	/^        char *XCursesProgramName = "xbed";$/;"	v
XWINSELECT	select.cpp	204;"	d	file:
_FILE_OFFSET_BITS	main.cpp	1099;"	d	file:
_GNU_SOURCE	main.cpp	1098;"	d	file:
_GNU_SOURCE	offtypes.h	25;"	d
_GNU_SOURCE	sparsecp.cpp	2;"	d	file:
_SysType	sys_types.h	/^struct _SysType {$/;"	s
_WIN32	support.cpp	16;"	d	file:
_WIN32	support.cpp	19;"	d	file:
__GNU_VISIBLE	desturbe.h	14;"	d
__GNU_VISIBLE	editor.cpp	32;"	d	file:
__GNU_VISIBLE	editor.h	30;"	d
__GNU_VISIBLE	editup.cpp	36;"	d	file:
__GNU_VISIBLE	search.cpp	139;"	d	file:
__HASH_H__	hash.h	19;"	d
__LITTLE_ENDIAN_BITFIELD	memory.cpp	34;"	d	file:
__RBTREE_H__	rbtree.h	21;"	d
__SHELL_H__	shell.h	2;"	d
ablock	bytesearch.cpp	333;"	d	file:
ablock	bytesearch.cpp	99;"	d	file:
ablock	gnuasciiregex.cpp	12;"	d	file:
absunixpath	win.h	/^inline ssize_t		absunixpath(const char *in,char *out) {$/;"	f
abswinpath	win.h	/^inline ssize_t		abswinpath(const char *in,char *out) {$/;"	f
act	dialog.h	458;"	d
acti	dialog.h	459;"	d
action	dialog.h	/^	action(const char *txt,int y1,int x1,int &v): item(txt, y1, x1),var(v) {;};$/;"	f	class:action
action	dialog.h	/^class action: public item {$/;"	c
actionsignal	editup.cpp	375;"	d	file:
actionsignal	main.cpp	/^void actionsignal(int sig) {$/;"	f
active	hassub.h	/^	int active,nrsubparts;$/;"	m	class:HasSub
activemode	parts.cpp	/^ScreenPart *Editor::activemode(void) {$/;"	f	class:Editor
activesubpart	hassub.cpp	/^int HasSub::activesubpart(short newact) {$/;"	f	class:HasSub
add	dialog.cpp	/^	void line::add(int key) {$/;"	f	class:line
add	digitstring.cpp	/^int add(struct mint *uit,const struct mint *in1,const struct mint *in2) {$/;"	f
add	macros.cpp	/^	void Keystrokes::add(int key) {$/;"	f	class:Keystrokes
addBitFlagsind	helpindex.h	/^short addBitFlagsind[]={19,20,87,101,111,165,170,240,309,379,397,460,467,535,601,654,659,723,732,780,787,855,923,988,1057,1067,1137,1197,};$/;"	v
addBitFlagsname	helptext.h	/^char addBitFlagsname[]="BitFlags (Alt-d,b)\\000\\000Create bitflags. Give every bit a label which is shown if that bit\\000has value 1. \\000Not char:\\000	If that bit is zero, the value of Not char is shown.\\000Add:\\000	Bit-label correspondences are assigned by typing a bit number after \\000	Bit and the corresponding label after Label and pressing return on \\000	Add.  Bits are numbered from 0 to (8*bytenr-1). With the lowest bit \\000	having number 0.\\000	This creates a list of bit-label correspondences under Flags.\\000Flags:\\000	You can edit one such correspondence by pressing Alt-f followed by\\000	selecting the correspondence and pressing return. You change the\\000	Bit and label values and again press Return at Add.\\000Del:\\000	If you press on delete the selected correspondence is deleted.\\000Between:\\000	What to write between bytes. Default: nothing.\\000Order:\\000	When editing a file in bitflags every item is shown as some flags.\\000	If you want to set a certain flag you write the label. If order is\\000	set this is only possible if you are above the position of this\\000	label. If order is not set you can set the label at every position.\\000	Example:\\000	If the flags are zyx and order is set you can change --- in --x only\\000	by pressing x at position 0, without order you can press x\\000	also at position 1 or 2.\\000";$/;"	v
addFloatind	helpindex.h	/^short addFloatind[]={16,17,40,56,73,96,97,160,215,280,348,409,};$/;"	v
addFloatname	helptext.h	/^char addFloatname[]="Float (Alt-d,o)\\000\\000Create float datatype:\\000	4 bytes: float\\000	8 bytes: double\\000	12 bytes: long double\\000\\000It is not possible to use normal search in the float datatype,\\000you need to use regex search. Normal search translates\\000the search string from the datatype format back to raw bytes and\\000searches for these raw bytes. This is not possible because float as\\000displayed has not a perfect precision so that that the float\\000that is displayed can correspondent to more then one raw byte array.\\000";$/;"	v
addSignedind	helpindex.h	/^short addSignedind[]={17,18,91,};$/;"	v
addSignedname	helptext.h	/^char addSignedname[]="Signed (Alt-d,s)\\000\\000Create signed integer datatype. See unsigned integer help (Alt-d,i) for \\000more information.\\000";$/;"	v
addafter	editor.h	/^	inline int addafter(DataType type,int to,int len,int order) { return addbefore(type,to+1, len,order); }$/;"	f	class:Editor
addbefore	parts.cpp	/^int Editor::addbefore(DataType type,int to,int len,int order) {$/;"	f	class:Editor
addch	screen.h	40;"	d
addchar	screenpart.cpp	/^int ScreenPart::addchar(int key) {$/;"	f	class:ScreenPart
adddynprocedure	readconfig.cpp	/^int adddynprocedure(const char *name,int (Editor::*proc)(void)) {$/;"	f
adddynprocedures	readconfig.cpp	/^int adddynprocedures( const char **newdynprocnames, int (Editor::**newdynproc)(void),int nr) {$/;"	f
addfile	window.cpp	/^int Editor::addfile(void) {$/;"	f	class:Editor
addfileind	helpindex.h	/^short addfileind[]={15,16,29,35,89,157,216,223,289,336,349,412,429,430,508,};$/;"	v
addfilename	helptext.h	/^char addfilename[]="Open (Alt-f,o)\\000\\000Filemanager:\\000Name:\\000	Alt-n: switch to line were you can write a filename.\\000	Del,Backspace,C-h,C-u,left,right,home,end,C-a and C-e should work \\000	if bed is well configured (see bed.1 for key definitions)\\000Files:\\000	Alt-f: switch to list of files. You can open a file by pressing \\000	Enter. Use UP and DOWN to move between files.\\000Directories:\\000	Alt-d: switch to list of directories. Change to directory by \\000	pressing Enter.\\000\\000Tab,Alt-Tab and\/or Shift-Tab can be used to jump between File,Directories and\\000Name.\\000";$/;"	v
addfilter	filter.cpp	/^int Editor::addfilter(Filter *fil) {$/;"	f	class:Editor
addfilter	filter.cpp	/^int ScreenPart::addfilter(Filter *fil) {$/;"	f	class:ScreenPart
addhelp	gethelp.cpp	/^void addhelp(struct help *item) {$/;"	f
addkey	ascii.cpp	/^int Ascii::addkey(unsigned char *bin,int binlen, int key, int pos ) {$/;"	f	class:Ascii
addkey	hassub.cpp	/^int HasSub::addkey(unsigned char *bin,int binlen, int key, int pos ) {$/;"	f	class:HasSub
addkey	screenpart.cpp	/^int ScreenPart::addkey(unsigned char *bin,int binlen, int key, int pos ) {$/;"	f	class:ScreenPart
addlast	main.cpp	/^int addlast(void) {$/;"	f
addmark	marken.cpp	/^int Editor::addmark(OFFTYPE pos,int len) {$/;"	f	class:Editor
addmenu	menus.cpp	/^int Editor::addmenu(const char *name,int menunr,int insert) {$/;"	f	class:Editor
addmenuitem	menus.cpp	/^int Editor::addmenuitem(int menunr,const char *name,int pos, int ( Editor::*proc)(void),int insert,const char *keystr) {$/;"	f	class:Editor
addnext	window.cpp	/^int Editor::addnext(void) {$/;"	f	class:Editor
addnextind	helpindex.h	/^short addnextind[]={19,20,};$/;"	v
addnextname	helptext.h	/^char addnextname[]="Add Next (Alt-w,a)\\000\\000Adds the next file to the screen. \\000";$/;"	v
addnltoar	system.h	91;"	d
addnstr	screen.h	57;"	d
addnstr	screen.h	60;"	d
addprev	window.cpp	/^int Editor::addprev(void) {$/;"	f	class:Editor
addprevind	helpindex.h	/^short addprevind[]={19,20,};$/;"	v
addprevname	helptext.h	/^char addprevname[]="Add Prev (Alt-w,d)\\000\\000Adds previous file to the screen \\000";$/;"	v
addprocedure	procview.cpp	/^	int Proclist::addprocedure(int (Editor::*proc)(void)) {$/;"	f	class:Proclist
addprocedure	procview.cpp	/^ int addprocedure(int (Editor::*proc)(void)) {$/;"	f
addreverse	filter.cpp	/^int ScreenPart::addreverse(int  len, int un) {$/;"	f	class:ScreenPart
addskipind	helpindex.h	/^short addskipind[]={15,16,59,129,205,215,224,292,322,378,449,516,580,645,713,774,};$/;"	v
addskipname	helptext.h	/^char addskipname[]="Skip (Alt-y,k)\\000\\000Filter to skips a certain number of bytes.\\000You have to specify after how many bytes and how many bytes are to be\\000skipped. This is then repeatedly applied to every unit of the active (sub-)\\000datatype.\\000Example:\\000The active datatype is ascii\/4. The file contains 'abcdefghijkl'.  \\000abcd efgh ijkl is displayed. \\000Applying Skip with After=2 and Skip=1 gives: abde ghjk.\\000After ab c is skipped after de f is skipped and after jk l is skipped.\\000It is not possible to use normal search in a datatype were Skip is\\000applied. You need to use regex search. Normal search translates\\000the search string from the datatype format back to raw bytes and\\000searches for that string. This is not possible when Skip is applied\\000because one search string can correspondent to more then one\\000raw content bytes string.\\000";$/;"	v
addstr	screen.h	65;"	d
addsubbin	filter.cpp	/^int addsubbin(ScreenPart *super,ScreenPart *sub,unsigned char *bin,unsigned char *subbin,int len) {$/;"	f
addsubpart	contain.cpp	/^	int Contains::addsubpart(ScreenPart *part,int pos) {$/;"	f	class:Contains
addterminfokeys	keyproc.cpp	/^int KeyEdit::addterminfokeys(void) {$/;"	f	class:KeyEdit
addtobar	menus.cpp	/^int Editor::addtobar(struct Editor::menu *m) {$/;"	f	class:Editor
addtocontain	withcontain.cpp	/^int Editor::addtocontain(ScreenPart *part) {$/;"	f	class:Editor
addtorecordkeys	editmacros.cpp	/^int addtorecordkeys(int key) {$/;"	f
addundo	undo.cpp	/^int Editor::addundo(OFFTYPE pos,unsigned char ch) {$/;"	f	class:Editor
addunsigned	parts.cpp	/^int Editor::addunsigned(void) {$/;"	f	class:Editor
addunsignedind	helpindex.h	/^short addunsignedind[]={19,20,90,155,184,248,258,324,363,432,445,513,539,587,};$/;"	v
addunsignedname	helptext.h	/^char addunsignedname[]="Unsigned (Alt-d,i)\\000\\000Create unsigned integer datatype. You can select bases from 2 to 36. \\000The number of bytes per unit range from 1 to some unknown limit \\000depending on hardware speed.\\000You can start a separate datatype or add a field to an existing\\000datatype.\\000In the last case where in the existing datatype the new field is \\000placed depends on the cursor position:\\000- At the end of the existing datatype if the cursor is at the end of\\000  the screen\\000- At the beginning of the existing datatype if the cursor is at the\\000  beginning of the screen\\000- Otherwise at the place closest to the cursor.\\000- After the cursor position if the distances are equal\\000";$/;"	v
after	dialog.h	/^	char text[maxtext],*after;$/;"	m	class:item
after_initscr	cursesinit.cpp	/^int after_initscr=0;$/;"	v
aget	suspend.cpp	/^int aget=tcgetattr (STDIN_FILENO,&starttermios );$/;"	v
aim	editor.h	/^	SearchAim aim;$/;"	m	struct:threadgegs
al	dialog.h	/^	char al[80];$/;"	m	class:winsel
alcsconfig	dialog.h	510;"	d
alcsconfig	dialog.h	517;"	d
align	searchaim.h	/^	int align;$/;"	m	struct:__anon13
all	ascii.cpp	43;"	d	file:
alles	dialog.h	/^	item **alles;$/;"	m	class:ok
allheight	editor.h	/^	int allheight,Screenheight,Screenwidth,edittop;$/;"	m	class:Editor
alloc	macros.cpp	/^	void Keystrokes::alloc(int len) {$/;"	f	class:Keystrokes
allocate	rbtree.cpp	/^Treel *Tree::allocate(unsigned long size) {$/;"	f	class:Tree
allocfilters	filter.cpp	/^int ScreenPart::allocfilters(int nr) {$/;"	f	class:ScreenPart
alreadysearchingfor	search.cpp	86;"	d	file:
alt	editor.h	/^	char *alt;$/;"	m	struct:Editor::menuel
altatkey	editup.cpp	/^int  Editor::altatkey(void) {$/;"	f	class:Editor
anincrement	savedatatype.cpp	45;"	d	file:
ant	dialog.h	/^	int &ant;$/;"	m	class:itemlist
apart	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
appendstrtoundo	undo.cpp	/^int Editor::appendstrtoundo(OFFTYPE pos,char *str, int size) {$/;"	f	class:Editor
appendtoundo	undo.cpp	/^int Editor::appendtoundo(OFFTYPE pos, int size) {$/;"	f	class:Editor
arealpath	system.h	45;"	d
arealpath	system.h	47;"	d
argfile	main.cpp	/^Editor *argfile(void) {$/;"	f
arraysort	dialog.cpp	/^void arraysort(char **files,int len) {$/;"	f
arraysorti	dialog.cpp	/^void arraysorti(char **files,int len,int icase) {$/;"	f
asciichild	screenpart.h	51;"	d
asciihyperscan	hyperscan.cpp	/^OFFTYPE Editor::asciihyperscan(SearchAim &aim) {$/;"	f	class:Editor
asciire2replace	re2search.cpp	/^int Editor::asciire2replace(OFFTYPE pos,int matchlen, char *str,int len  ) {$/;"	f	class:Editor
asciisuper	ascii.h	47;"	d
askbase	editor.cpp	/^int Editor::askbase(void) {$/;"	f	class:Editor
askbaseind	helpindex.h	/^short askbaseind[]={17,18,88,154,};$/;"	v
askbasename	helptext.h	/^char askbasename[]="Offset (Alt-t,o)\\000\\000Changes the file offset number type. Offsets can be shown as decimal,\\000hexadecimal or octal numbers. You can also turn of the display of\\000offsets.\\000";$/;"	v
askfile	file.cpp	/^int Editor::askfile(void) {$/;"	f	class:Editor
askmenufile	file.cpp	/^int Editor::askmenufile(void) {$/;"	f	class:Editor
asktype	typelist.cc	/^ScreenPart *asktype(Editor *ed) {$/;"	f
assigndev	disk.cpp	/^char *assigndev(int len) {$/;"	f
assume_default_colorsptr	readconfig.cpp	/^int (*assume_default_colorsptr)(int, int)=NULL;$/;"	v
at	readconfig.cpp	/^struct attr at[] = {$/;"	v	typeref:struct:attr
attr	readconfig.cpp	/^struct attr {$/;"	s	file:
attrall	dialog.cpp	/^void	attrall(WINDOW *takescr,int attrs) {$/;"	f
attrnr	readconfig.cpp	/^chtype attrnr(char *attr){$/;"	f
back	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	m	struct:__anon11
back	search.cpp	/^	T &back;$/;"	m	class:setback	file:
backchar	move.cpp	/^int Editor::backchar(void) {$/;"	f	class:Editor
backchar	screenpart.cpp	/^int ScreenPart::backchar(void) {$/;"	f	class:ScreenPart
backcharind	helpindex.h	/^short backcharind[]={5,6,};$/;"	v
backcharname	helptext.h	/^char backcharname[]="Left\\000\\000Go back one character.\\000";$/;"	v
background	searchinterrupt.h	/^int background;$/;"	m	class:SearchInterrupt
backgroundend	search.cpp	244;"	d	file:
backgroundsearch	editor.h	/^int backgroundsearch;$/;"	m	class:Editor
backicaseregexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::backicaseregexsearch(SearchAim &aim) {$/;"	f	class:Editor
backicasesearch	bytesearch.cpp	/^OFFTYPE Editor::backicasesearch(SearchAim &aim) {$/;"	f	class:Editor
backitemind	helpindex.h	/^short backitemind[]={20,21,};$/;"	v
backitemname	helptext.h	/^char backitemname[]="Back Item (Alt-m,a)\\000\\000Moves one item backwards. Item is the active datatype unit.\\000";$/;"	v
backregexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::backregexsearch(SearchAim &aim) {$/;"	f	class:Editor
backsearch	bytesearch.cpp	/^OFFTYPE Editor::backsearch(SearchAim &aim) {$/;"	f	class:Editor
backshownsearch	gnusearch.cpp	/^OFFTYPE Editor::backshownsearch(SearchAim &aim) {$/;"	f	class:Editor
barpos	editor.h	/^	int barpos;$/;"	m	struct:Editor::menu
barwin	menus.cpp	/^static WINDOW *barwin;$/;"	v	file:
basetree	keyinput.h	/^	struct tree basetree;$/;"	m	class:keyinput	typeref:struct:keyinput::tree
beddatatypestart	withcontain.cpp	/^void beddatatypestart(FILEHANDLE handle) {$/;"	f
bedrcbinlen	file.cpp	/^int bedrcbinlen=0;$/;"	v
bedscreen	gethelp.cpp	/^void bedscreen(void) {$/;"	f
beep	screen.h	76;"	d
beforeinitscr	cursesinit.cpp	/^static int beforeinitscr=0;$/;"	v	file:
beg	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
begin	marks.h	/^struct mark *head,begin,*iter;$/;"	m	class:keylookup	typeref:struct:keylookup::
begin	screenpart.h	/^	int begin(void) {return half=0;};$/;"	f	class:ScreenPart
begindialog	dialog.h	496;"	d
beginfile	move.cpp	/^int Editor::beginfile(void) {$/;"	f	class:Editor
beginfileind	helpindex.h	/^short beginfileind[]={21,22,};$/;"	v
beginfilename	helptext.h	/^char beginfilename[]="Begin file (Alt-m,b)\\000\\000Goto the beginning of file. \\000";$/;"	v
beginline	move.cpp	/^int Editor::beginline(void) {$/;"	f	class:Editor
beginlineind	helpindex.h	/^short beginlineind[]={};$/;"	v
beginlinename	helptext.h	/^char beginlinename[]="Go to begin line (Home).\\000";$/;"	v
beginoptions	dialog.h	500;"	d
beginoptions2	dialog.h	535;"	d
beginpage	move.cpp	/^int Editor::beginpage(void) {$/;"	f	class:Editor
beginpageind	helpindex.h	/^short beginpageind[]={19,20,};$/;"	v
beginpagename	helptext.h	/^char beginpagename[]="Begin Pg (Alt-m,i)\\000\\000To the top of page.\\000";$/;"	v
beginundo	editor.h	/^int lastundo,redos,beginundo,undohalf;$/;"	m	class:Editor
bij	dialog.h	/^	int size,pos,bij;$/;"	m	class:line
bijdoen	screenpart.cpp	260;"	d	file:
bijdoen	screenpart.cpp	261;"	d	file:
bin2f	screenpart.cpp	/^int ScreenPart::bin2f(unsigned char *from, char *to, int len) {$/;"	f	class:ScreenPart
bin2form	hassub.cpp	63;"	d	file:
bin2formal	ascii.cpp	/^int Ascii::bin2formal(unsigned char *bin, char *formal, int len) {	$/;"	f	class:Ascii
bin2formal	hassub.cpp	/^	int HasSub::bin2formal(unsigned char *bin, char *formal, int len) {	$/;"	f	class:HasSub
bin2formal	multidigit.cpp	/^	int MultiDigit::bin2formal(unsigned char *bin, char *formal, int len) {$/;"	f	class:MultiDigit
bin2search	screenpart.cpp	/^int ScreenPart::bin2search(unsigned char *bin,  char *formal, int len)  {$/;"	f	class:ScreenPart
binlarger	search.cpp	1220;"	d	file:
biosdiskhinstance	memory.cpp	/^HINSTANCE biosdiskhinstance=NULL;$/;"	v
bitfielderind	helpindex.h	/^short bitfielderind[]={19,20,84,157,217,289,364,440,};$/;"	v
bitfieldername	helptext.h	/^char bitfieldername[]="Bitfield (Alt-d,e)\\000\\000This is a record\/struct in which you specify the number of bits\\000for every field. After making a bitfield around a datatype it works like\\000a normal composed datatype. You just add the other fields. \\000You change the number of bits of a certain field by setting the cursor \\000on that field and selecting again Alt-d,e but now you press 'Change Bits'.\\000Another way is to make the bitfield the active datatype by pressing Alt-y,t\\000(Parent) and then selecting Config (Alt-y,g).\\000";$/;"	v
blackwhite	readconfig.cpp	/^int blackwhite=STARTBLACKWHITE;$/;"	v
blnr	viewbuf.h	/^int start,  shown, blnr,minbl;$/;"	m	class:Viewbuf
block	gnusearch.cpp	40;"	d	file:
block	rbtree.h	/^	Treel *block;$/;"	m	struct:blocks
block	rbtree.h	/^	struct blocks *block;$/;"	m	struct:memhead	typeref:struct:memhead::blocks
blocknr	rbtree.h	/^	BLOCKTYPE blocknr;$/;"	m	struct:data
blockreadonly	memory.h	/^	int blockreadonly;$/;"	m	class:Memory
blocks	rbtree.h	/^struct blocks {$/;"	s
blocksize	editor.cpp	/^BLOCKTYPE Editor::blocksize(void) { return mem.blocksize();};$/;"	f	class:Editor
blocksize	memory.h	/^inline BLOCKTYPE blocksize(void) const { return BLOCKSIZE;};$/;"	f	class:Memory
bsd_systypes	sys_types.h	/^SysType bsd_systypes[] = {$/;"	v
buf	dialog.h	/^	char *buf;$/;"	m	class:line
buf	keystrokes.h	/^	Strokekeytype *buf;$/;"	m	class:Keystrokes
buf	memory.h	/^	char *buf;$/;"	m	class:sectorbuf
buf	rbtree.h	/^	char *buf;$/;"	m	struct:data
buf	viewbuf.h	/^char *buf(void) {return str;}$/;"	f	class:Viewbuf
bufgegsize	dialog.h	/^	int bufgegsize;$/;"	m	class:line
byte2screen	filter.cpp	/^int ScreenPart::byte2screen(int pos) {$/;"	f	class:ScreenPart
bytealign	bytesearch.cpp	/^template <> inline OFFTYPE Editor::bytealign<false,false>(SearchAim &aim) {$/;"	f	class:Editor
bytealign	bytesearch.cpp	/^template <> inline OFFTYPE Editor::bytealign<false,true>(SearchAim &aim) {$/;"	f	class:Editor
bytealign	bytesearch.cpp	/^template <> inline OFFTYPE Editor::bytealign<true,false>(SearchAim &aim) {$/;"	f	class:Editor
bytealign	bytesearch.cpp	/^template <> inline OFFTYPE Editor::bytealign<true,true>(SearchAim &aim) {$/;"	f	class:Editor
bytealigngegs	bytesearch.cpp	/^inline void Editor::bytealigngegs(SearchAim &aim) {$/;"	f	class:Editor
byteoff2screen	ascii.cpp	/^int Ascii::byteoff2screen(int pos) {$/;"	f	class:Ascii
byteoff2screen	multidigit.cpp	/^int Digit::byteoff2screen(int pos) {$/;"	f	class:Digit
byteoff2screen	screenpart.h	/^virtual int  GeenScreenPart byteoff2screen(int pos) {$/;"	f	class:ScreenPart
bytes	hyperscan.cpp	/^	short ellen,bytes;	$/;"	m	class:Toshownhandler	file:
bytes	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
bytesfile	filter.h	/^mutable	int bytesfile; \/\/bytes file side$/;"	m	class:Filter
bytesscreen	filter.h	/^mutable	int bytesscreen; \/\/bytes screen side. I said const$/;"	m	class:Filter
calcsizes	hassub.cpp	/^int HasSub::calcsizes(void) {$/;"	f	class:HasSub
calcsizes	multidigit.cpp	/^	 int MultiDigit::calcsizes(void) {$/;"	f	class:MultiDigit
calcsizes	repeat.cpp	/^int Repeat::calcsizes(void) {$/;"	f	class:Repeat
calcsizes	screenpart.cpp	/^int ScreenPart::calcsizes(void)  {$/;"	f	class:ScreenPart
call_once	procview.cpp	/^int call_once(int (Editor::*proc)(void)) {$/;"	f
call_open	procview.cpp	/^int call_open(int (Editor::*proc)(void)) {$/;"	f
call_switch	procview.cpp	/^int call_switch(int (Editor::*proc)(void)) {$/;"	f
callproc	system.h	66;"	d
canresize	withcontain.cpp	/^int canresize(ScreenPart *sub,int negbyt) {$/;"	f
canusemem	getfree.cpp	/^inline long long canusemem(long long ramav,long long totram,long long avvis) {$/;"	f
casesearch	bytesearch.cpp	/^OFFTYPE Editor::casesearch(SearchAim &aim) {$/;"	f	class:Editor
castcast	gethelp.cpp	30;"	d	file:
cat	editor.cpp	349;"	d	file:
cat	procview.cpp	34;"	d	file:
cbreak	screen.h	71;"	d
certain	editlimits.cpp	21;"	d	file:
ch	dialog.h	/^	int ch;$/;"	m	class:item
ch	keyinput.h	/^		unsigned char ch;$/;"	m	struct:keyinput::tree
ch	marks.h	/^	unsigned char ch;$/;"	m	struct:keylookup::tree
change	dialog.cpp	/^	char *line::change(int key) {$/;"	f	class:line
change	dialog.cpp	/^	int itemlist::change(int key) {$/;"	f	class:itemlist
change	dialog.h	/^	virtual int change(int key) {if(key==' '||key=='x'||key=='*') return switchvar(); return 0;};$/;"	f	class:item
changebase	parts.cpp	/^int Editor::changebase(void) {$/;"	f	class:Editor
changebytes	parts.cpp	/^int Editor::changebytes(void) {$/;"	f	class:Editor
changed	editor.h	/^	int changed,modified;$/;"	m	class:Editor
changedatatype	search.cpp	532;"	d	file:
changeslash	suspend.cpp	/^char *changeslash(char *in) {$/;"	f
changestr	editup.cpp	/^int Editor::changestr(int inpos,unsigned char *str,int size) {$/;"	f	class:Editor
charptr	filter.cpp	/^typedef char *charptr ;$/;"	t	file:
charptr	typelist.cc	/^typedef char *charptr ;$/;"	t	file:
chars2dig	convert.h	/^inline int chars2dig(const char ch) {return ((ch>='0'&&ch<='9')?(ch-'0'):((ch<='z'&&ch>='a')?(ch-'a'+10):$/;"	f
chbase	hassub.cpp	/^short HasSub::chbase(short b) {$/;"	f	class:HasSub
chbase	multidigit.cpp	/^	short MultiDigit::chbase(short b) {$/;"	f	class:MultiDigit
chbase	screenpart.h	/^	virtual short chbase(short base) {return -1;};$/;"	f	class:ScreenPart
chbytes	ascii.cpp	/^int Ascii::chbytes(int b) {$/;"	f	class:Ascii
chbytes	hassub.cpp	/^int HasSub::chbytes(int b) {$/;"	f	class:HasSub
chbytes	multidigit.cpp	/^	int MultiDigit::chbytes(int b) {$/;"	f	class:MultiDigit
chbytes	screenpart.h	/^	virtual int chbytes(int bytes)  {return -1;};$/;"	f	class:ScreenPart
check	dialog.h	/^typedef check2<bool,0,1,false> check;$/;"	t
check2	dialog.h	/^	check2(const char * const txt,int y1,int x1,T &var1): item(txt,y1,x1),var(var1>max?max:var1), old(var1) {$/;"	f	class:check2
check2	dialog.h	/^	check2(void): old(var) {; };$/;"	f	class:check2
check2	dialog.h	/^class check2: public item {$/;"	c
checkchanged	file.cpp	/^int Editor::checkchanged(void) {$/;"	f	class:Editor
checkchangedind	helpindex.h	/^short checkchangedind[]={20,21,92,};$/;"	v
checkchangedname	helptext.h	/^char checkchangedname[]="Modified? (Alt-f,m)\\000\\000Checks if current file is modified by comparing changed parts with the\\000original file. \\000";$/;"	v
checkend	savedatatype.cpp	178;"	d	file:
checker	dialog.h	452;"	d
checkernr	dialog.h	453;"	d
checkertrue	dialog.h	455;"	d
checkfilesize	memory.cpp	/^inline BOOL Memory::checkfilesize(OFFTYPE filsize,OFFTYPE &begin,OFFTYPE &end) $/;"	f	class:Memory
children	keyinput.h	/^			struct tree *children;$/;"	m	union:keyinput::tree::__anon9	typeref:struct:keyinput::tree::__anon9::tree
children	marks.h	/^		struct tree *children;$/;"	m	union:keylookup::tree::__anon10	typeref:struct:keylookup::tree::__anon10::tree
chrepeat	contain.cpp	/^int Contains::chrepeat(int b) {$/;"	f	class:Contains
chrepeat	repeat.cpp	/^	int Repeat::chrepeat(int nr) {$/;"	f	class:Repeat
clcallproc	system.h	65;"	d
clear	screen.h	42;"	d
clearline	screen.h	/^static inline int clearline(void) {return clrtoeol();}$/;"	f
clearmarks	marken.cpp	/^int Editor::clearmarks(void) {$/;"	f	class:Editor
clearmarksind	helpindex.h	/^short clearmarksind[]={16,17,};$/;"	v
clearmarksname	helptext.h	/^char clearmarksname[]="Clear (Alt-k,c)\\000\\000Delete all marks.\\000";$/;"	v
clearmessage	inout.cpp	/^ void Editor::clearmessage(void) { messagebuf[0]=0; if(nomessage) textovermessage();else fileinfo(); }$/;"	f	class:Editor
closefile	file.cpp	/^int Editor::closefile(void) {$/;"	f	class:Editor
closehandle	memory.h	/^inline int closehandle(FILEHANDLE han) {$/;"	f
closethis	file.cpp	/^int Editor::closethis(void) {$/;"	f	class:Editor
closethisind	helpindex.h	/^short closethisind[]={16,17,};$/;"	v
closethisname	helptext.h	/^char closethisname[]="Close (Alt-f,c)\\000\\000Close the current file. \\000";$/;"	v
clrtoeol	screen.h	43;"	d
colo	readconfig.cpp	/^struct nametonum {char lab[8];int num;} colo[] = { {"black",COLOR_BLACK}, {"red",COLOR_RED}, {"green",COLOR_GREEN}, {"yellow",COLOR_YELLOW}, {"blue",COLOR_BLUE}, {"magentA",COLOR_MAGENTA}, {"cyan",COLOR_CYAN}, {"white",COLOR_WHITE},{"default",-1}};$/;"	v	typeref:struct:nametonum
color	rbtree.cpp	57;"	d	file:
color	rbtree.h	/^	Color	color;$/;"	m	struct:treeel
colornr	readconfig.cpp	/^int colornr(char *name) {$/;"	f
colornr	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	m	struct:__anon11
colortypes	readconfig.cpp	/^int colortypes=sizeof(fieldcolor)\/sizeof(Fieldcol);$/;"	v
cols	editor.h	/^	inline int cols(void) { return nrx;};$/;"	f	class:Editor
cols	screenpart.h	/^	inline int cols(void) {return nrx();};$/;"	f	class:ScreenPart
com	dialog.h	/^	Common2<T> *com;$/;"	m	class:orcheck2
commandmode	editor.h	/^	int commandmode;$/;"	m	class:Editor
common2str	savedatatype.cpp	/^int common2str(char *gegs,int maxgegs,ScreenPart *sub) {$/;"	f
commonend	savedatatype.cpp	/^int commonend(char *gegs,int maxgegs,ScreenPart *sub) {$/;"	f
comparedat	rbtree.h	46;"	d
compareel	rbtree.h	47;"	d
comparekey	rbtree.h	45;"	d
compfunctie	gethelp.cpp	/^int compfunctie(const char * const x,const char *const y)  {$/;"	f
comproc	readconfig.cpp	/^int comproc(const void *one,const void *two) {$/;"	f
cond	keyconfig.cpp	106;"	d	file:
confdir	readconfig.cpp	/^char  confdir[]=CONFDIR "\/plugins\/examples";$/;"	v
configASCII	parts.cpp	/^int Editor::configASCII(ScreenPart *screenpart1,int kind) {$/;"	f	class:Editor
configmessage	readconfig.cpp	210;"	d	file:
configmessage	readconfig.cpp	212;"	d	file:
consoleoutputhandle	screen.cpp	/^HANDLE   consoleoutputhandle = GetStdHandle(STD_OUTPUT_HANDLE);$/;"	v
consoleoutputhandle	screen.cpp	/^HANDLE consoleoutputhandle=initcursorinfo();$/;"	v
consoleoutputhandle	screen.h	90;"	d
consoleresize	main.cpp	/^int Editor::consoleresize(void) {$/;"	f	class:Editor
contain	screenpart.h	/^	ScreenPart *contain;$/;"	m	class:ScreenPart
conthandler	main.cpp	/^void conthandler(int signum) {$/;"	f
contmain	desturbe.cpp	/^	void contmain(void) {$/;"	f
convstr	filter.cpp	/^	char *Filter::convstr(void) const {$/;"	f	class:Filter
copy	copy.h	/^const unsigned char copy[763] = {'C','o','p','y','r','i','g','h','t',0x20,0x28,'C',0x29,0x20,'2','0','1','7',0x20,'J','a','a','p',0x20,'K','o','r','t','h','a','l','s',0x20,'A','l','t','e','s',0x20,0x3c,'b','i','n','a','r','y','e','d','i','t','o','r',0x40,'g','m','x',0x2e,'c','o','m',0x3e,0xa,0xa,0x20,0x20,0x20,0x20,'T','h','i','s',0x20,'p','r','o','g','r','a','m',0x20,'i','s',0x20,'f','r','e','e',0x20,'s','o','f','t','w','a','r','e',0x3b,0x20,'y','o','u',0x20,'c','a','n',0x20,'r','e','d','i','s','t','r','i','b','u','t','e',0x20,'i','t',0x20,'a','n','d',0x2f,'o','r',0x20,'m','o','d','i','f','y',0xa,0x20,0x20,0x20,0x20,'i','t',0x20,'u','n','d','e','r',0x20,'t','h','e',0x20,'t','e','r','m','s',0x20,'o','f',0x20,'t','h','e',0x20,'G','N','U',0x20,'G','e','n','e','r','a','l',0x20,'P','u','b','l','i','c',0x20,'L','i','c','e','n','s','e',0x20,'a','s',0x20,'p','u','b','l','i','s','h','e','d',0x20,'b','y',0xa,0x20,0x20,0x20,0x20,'t','h','e',0x20,'F','r','e','e',0x20,'S','o','f','t','w','a','r','e',0x20,'F','o','u','n','d','a','t','i','o','n',0x3b,0x20,'e','i','t','h','e','r',0x20,'v','e','r','s','i','o','n',0x20,'2',0x20,'o','f',0x20,'t','h','e',0x20,'L','i','c','e','n','s','e',0x20,0x2c,0x20,'o','r',0xa,0x20,0x20,0x20,0x20,0x28,'a','t',0x20,'y','o','u','r',0x20,'o','p','t','i','o','n',0x29,0x20,'a','n','y',0x20,'l','a','t','e','r',0x20,'v','e','r','s','i','o','n',0x2e,0xa,0xa,0x20,0x20,0x20,0x20,'T','h','i','s',0x20,'p','r','o','g','r','a','m',0x20,'i','s',0x20,'d','i','s','t','r','i','b','u','t','e','d',0x20,'i','n',0x20,'t','h','e',0x20,'h','o','p','e',0x20,'t','h','a','t',0x20,'i','t',0x20,'w','i','l','l',0x20,'b','e',0x20,'u','s','e','f','u','l',0x2c,0xa,0x20,0x20,0x20,0x20,'b','u','t',0x20,'W','I','T','H','O','U','T',0x20,'A','N','Y',0x20,'W','A','R','R','A','N','T','Y',0x3b,0x20,'w','i','t','h','o','u','t',0x20,'e','v','e','n',0x20,'t','h','e',0x20,'i','m','p','l','i','e','d',0x20,'w','a','r','r','a','n','t','y',0x20,'o','f',0xa,0x20,0x20,0x20,0x20,'M','E','R','C','H','A','N','T','A','B','I','L','I','T','Y',0x20,'o','r',0x20,'F','I','T','N','E','S','S',0x20,'F','O','R',0x20,'A',0x20,'P','A','R','T','I','C','U','L','A','R',0x20,'P','U','R','P','O','S','E',0x2e,0x20,0x20,'S','e','e',0x20,'t','h','e',0xa,0x20,0x20,0x20,0x20,'G','N','U',0x20,'G','e','n','e','r','a','l',0x20,'P','u','b','l','i','c',0x20,'L','i','c','e','n','s','e',0x20,'f','o','r',0x20,'m','o','r','e',0x20,'d','e','t','a','i','l','s',0x2e,0xa,0xa,0x20,0x20,0x20,0x20,'Y','o','u',0x20,'s','h','o','u','l','d',0x20,'h','a','v','e',0x20,'r','e','c','e','i','v','e','d',0x20,'a',0x20,'c','o','p','y',0x20,'o','f',0x20,'t','h','e',0x20,'G','N','U',0x20,'G','e','n','e','r','a','l',0x20,'P','u','b','l','i','c',0x20,'L','i','c','e','n','s','e',0xa,0x20,0x20,0x20,0x20,'a','l','o','n','g',0x20,'w','i','t','h',0x20,'t','h','i','s',0x20,'p','r','o','g','r','a','m',0x2e,0x20,'I','f',0x20,'n','o','t',0x2c,0x20,'w','r','i','t','e',0x20,'t','o',0x20,'t','h','e',0x20,'F','r','e','e',0x20,'S','o','f','t','w','a','r','e',0xa,0x20,0x20,0x20,0x20,'F','o','u','n','d','a','t','i','o','n',0x2c,0x20,'6','7','5',0x20,'M','a','s','s',0x20,'A','v','e',0x2c,0x20,'C','a','m','b','r','i','d','g','e',0x2c,0x20,'M','A',0x20,'0','2','1','3','9',0x2c,0x20,'U','S','A',0x2e,0xa,0};$/;"	v
copyel	winsparsecp.cpp	/^DWORD copyel(HANDLE hInFile,HANDLE hOutFile,const int len) {$/;"	f
copyfiltersafter	filter.cpp	/^int ScreenPart::copyfiltersafter(ScreenPart const *part) {$/;"	f	class:ScreenPart
copyfiltersbefore	filter.cpp	/^int ScreenPart::copyfiltersbefore(ScreenPart *part) {$/;"	f	class:ScreenPart
copymode	parts.cpp	/^int Editor::copymode(void) {$/;"	f	class:Editor
copymodeind	helpindex.h	/^short copymodeind[]={16,17,};$/;"	v
copymodename	helptext.h	/^char copymodename[]="Clone (Alt-d,c)\\000\\000Create a datatype that is identical to the active (sub) datatype.\\000";$/;"	v
copyother	sparsecp.cpp	/^void copyother(char *dest,const char *orig) {$/;"	f
copyother	sparsecp.cpp	/^void copyother(char *dest,int get) {$/;"	f
copyselect	select.cpp	/^int Editor::copyselect(void) {$/;"	f	class:Editor
copyselectind	helpindex.h	/^short copyselectind[]={15,16,};$/;"	v
copyselectname	helptext.h	/^char copyselectname[]="Copy (Alt-e,c)\\000\\000Copies selected part of the file to copy buffer. \\000";$/;"	v
count	repeat.cpp	32;"	d	file:
ctrlhandler	main.cpp	/^CALLBACK BOOL ctrlhandler(DWORD sig) {$/;"	f
current	dialog.h	/^	 char *current(void) {$/;"	f	class:winsel
curses_init	cursesinit.cpp	/^	void nocurses_init::curses_init(void) { \/*Initialize screen *\/$/;"	f	class:nocurses_init
curses_init_curses	main.cpp	/^nocurses_init curses_init_curses;$/;"	v
cursor	dialog.h	/^inline	void cursor(void) {$/;"	f	class:line
cursoraway	dialog.cpp	166;"	d	file:
cursorpos	editup.cpp	/^void Editor::cursorpos(void) {$/;"	f	class:Editor
cursorpos	screenpart.cpp	/^void ScreenPart::cursorpos(int pos) {$/;"	f	class:ScreenPart
cylinders	biosdisk.h	/^	DWORD cylinders;$/;"	m	struct:diskinfo
cylinders	memory.cpp	/^	DWORD cylinders;$/;"	m	struct:regdisk	file:
data	memory.h	/^inline	char *data(void) {return buf;}$/;"	f	class:sectorbuf
data	rbtree.cpp	60;"	d	file:
data	rbtree.h	/^	Data	data;$/;"	m	struct:treeel
data	rbtree.h	/^struct data {$/;"	s
databufalloc	bytesearch.cpp	102;"	d	file:
databufalloc	memory.cpp	65;"	d	file:
databuffree	bytesearch.cpp	101;"	d	file:
databuffree	bytesearch.cpp	340;"	d	file:
databuffree	bytesearch.cpp	341;"	d	file:
databuffree	memory.cpp	64;"	d	file:
dataconfig	parts.cpp	/^int Editor::dataconfig(void) {$/;"	f	class:Editor
dataconfigind	helpindex.h	/^short dataconfigind[]={15,16,69,77,122,130,179,192,255,279,285,350,};$/;"	v
dataconfigname	helptext.h	/^char dataconfigname[]="Misc (Alt-y,s)\\000\\000Modify some general display parameters of datatype. \\000Label: \\000	Name for datatype shown on the message line\\000Apart: \\000	number of spaces between items of this datatype\\000Spaceafter: \\000	number of spaces between this datatype and an other datatype \\000	or the offset numbers.\\000Conf:\\000	Configuration string every datatype has. Usually you don't need\\000	to change this.\\000";$/;"	v
datainfo	editup.cpp	/^int Editor::datainfo(void) {$/;"	f	class:Editor
dataname	search.cpp	53;"	d	file:
dataproc	menu.h	20;"	d
dataproc	menufuncs.cpp	21;"	d	file:
datashown	searchaim.h	/^	ScreenPart *datashown;$/;"	m	struct:__anon13
datatype	typelist.h	33;"	d
datatype2str	savedatatype.cpp	/^int datatype2str(char *gegs,int maxgegs,ScreenPart *sub) {$/;"	f
datatype2str	savedatatype.cpp	/^int datatype2str(char *gegs,int maxgegs,ScreenPart *sub,int depth) {$/;"	f
datatypeconfig	parts.cpp	/^int Editor::datatypeconfig(void) {$/;"	f	class:Editor
datatypeconfigind	helpindex.h	/^short datatypeconfigind[]={17,18,91,};$/;"	v
datatypeconfigname	helptext.h	/^char datatypeconfigname[]="Config (Alt-y,g)\\000\\000Modify parameters of active (sub-) datatype. Things like number of bytes\\000and the base of Integers.\\000";$/;"	v
datatypedirectory	withcontain.cpp	/^char datatypedirectory[BEDSMAXPATH]=CONFDIR "\/misc";	$/;"	v
datatypedirectory	withcontain.cpp	/^char datatypedirectory[BEDSMAXPATH]=CONFDIRWIN FILENAMESEP "misc";	$/;"	v
datatypefile	withcontain.cpp	/^const char datatypefile[]="bed-datatype:";$/;"	v
datatypefilelen	withcontain.cpp	/^const int datatypefilelen=sizeof(datatypefile)-1;$/;"	v
datatypename	typelist.h	38;"	d
datatypes	typelist.cc	/^datatypes::datatypes(const char  str[],ScreenPart *(*func)(Editor *ed)) {$/;"	f	class:datatypes
datatypes	typelist.h	/^class datatypes {$/;"	c
datbytes	screenpart.cpp	/^int ScreenPart::datbytes(void) const  {$/;"	f	class:ScreenPart
datbytes	screenpart.h	/^inline int datbytes(const int b)  { return screenupdatefilters(b); }$/;"	f	class:ScreenPart
deathcells	main.cpp	/^Editor **deathcells;$/;"	v
debugfile	debug.cpp	/^FILE *debugfile;$/;"	v
debugging	debug.cpp	/^int debugging=1;$/;"	v
declareparent	screenpart.h	44;"	d
deel	hash.h	/^	typedef struct deel {$/;"	s	class:Hash
deelbaar	multidigit.cpp	/^int deelbaar[]={2,4,16}; $/;"	v
deelbaarlog	multidigit.cpp	/^int deelbaarlog[]={1,2,4}; $/;"	v
defaultbackground	readconfig.cpp	/^int defaultbackground=-1, defaultforeground=-1;$/;"	v
defaultbackground	readconfig.cpp	/^int defaultbackground=COLOR_WHITE, defaultforeground=COLOR_BLACK;$/;"	v
defaultcolor	readconfig.cpp	/^int defaultcolor=colortypes+1;$/;"	v
defaultforeground	readconfig.cpp	/^int defaultbackground=-1, defaultforeground=-1;$/;"	v
defaultforeground	readconfig.cpp	/^int defaultbackground=COLOR_WHITE, defaultforeground=COLOR_BLACK;$/;"	v
defaultkeys	keyproc.h	54;"	d
defaultsearch	editor.h	/^static SearchType defaultsearch;$/;"	m	class:Editor
defaultsearch	file.cpp	/^SearchType Editor::defaultsearch; $/;"	m	class:Editor	file:
del	gnusearch.cpp	/^void del(void) {$/;"	f	class:saveregs
del	rbtree.cpp	/^int Tree::del(Key dig) {$/;"	f	class:Tree
deldialog	dialog.h	489;"	d
delel	rbtree.cpp	/^int Tree::delel(Treel *el) {$/;"	f	class:Tree
deleteall	marks.cpp	/^int keylookup::deleteall(void) {$/;"	f	class:keylookup
deletegegs	rbtree.cpp	/^void Tree::deletegegs(void) {$/;"	f	class:Tree
deletemark	marken.cpp	/^int Editor::deletemark(void) {$/;"	f	class:Editor
deletemarkind	helpindex.h	/^short deletemarkind[]={17,18,92,};$/;"	v
deletemarkname	helptext.h	/^char deletemarkname[]="Delete (Alt-k,t)\\000\\000Delete mark. You get an overview of current marks. Press return to delete\\000the currently selected mark.\\000";$/;"	v
deletemenu	menus.cpp	/^int Editor::deletemenu(int menunr) {$/;"	f	class:Editor
deletemenu	readconfig.cpp	/^int deletemenu(char *strin) {$/;"	f
deletemenuitem	menus.cpp	/^int Editor::deletemenuitem(int menunr,int pos) {$/;"	f	class:Editor
deletemenuitem	readconfig.cpp	/^int deletemenuitem(char *strin) {$/;"	f
delmenus	menus.cpp	/^void delmenus(void) {$/;"	f
deltreel	rbtree.cpp	/^void Tree::deltreel(Treel *el) {$/;"	f	class:Tree
delundo	undo.cpp	/^void Editor::delundo(void) {$/;"	f	class:Editor
des	marks.h	/^	Markgeg *des;$/;"	m	struct:keylookup::mark
des	readconfig.cpp	/^	const char des[80];$/;"	m	struct:attr	file:
desc	screenpart.cpp	/^ class Parent ScreenPart::desc=Parent("ScreenPart",NULL);$/;"	m	class:ScreenPart	typeref:class:ScreenPart::	file:
desc	screenpart.h	/^	static class Parent desc; $/;"	m	class:ScreenPart	typeref:class:ScreenPart::Parent
desturbemutex	desturbe.cpp	/^pthread_mutex_t desturbemutex;$/;"	v
desturbemutexattr	desturbe.cpp	/^pthread_mutexattr_t desturbemutexattr;$/;"	v
desturbesem	main.cpp	/^sem_t desturbesem;$/;"	v
digitsuper	multidigit.h	/^inline int digitsuper(ScreenPart *part) {$/;"	f
discard	editor.cpp	/^int Editor::discard(void) {$/;"	f	class:Editor
diskclose	memory.cpp	/^Diskclose diskclose=NULL;$/;"	v
diskinfo	biosdisk.h	/^struct diskinfo {$/;"	s
diskinfo	disk.cpp	/^int diskinfo(const char *lastdrive,const char *volume,char *buf,const int maxbuf,bool noise) {$/;"	f	class:Volumes
diskopen	memory.cpp	/^Diskinfo *diskopen(int disknum,int access) {$/;"	f
diskopener	memory.cpp	/^Diskopen diskopener=NULL;$/;"	v
diskpresent	memory.cpp	/^BOOL diskpresent(int disknum) {$/;"	f
diskpresenter	memory.cpp	/^Diskpresent diskpresenter=NULL;$/;"	v
diskread	memory.cpp	/^Diskread diskread=NULL,diskwrite=NULL;$/;"	v
diskreopen	memory.cpp	/^Diskreopen diskreopen=NULL;$/;"	v
disksectors	biosdisk.h	/^	 	LONGLONG disksectors; $/;"	m	union:diskinfo::__anon3
disksectors	memory.cpp	/^	LONGLONG disksectors; $/;"	m	struct:regdisk	file:
disksize	memory.cpp	/^	LONGLONG disksize;$/;"	m	struct:regdisk	file:
diskvolume	disk.cpp	/^inline BOOL diskvolume(char *Name,int len) {$/;"	f
diskwrite	memory.cpp	/^Diskread diskread=NULL,diskwrite=NULL;$/;"	v
distribute	editup.cpp	/^int Editor::distribute(void) {$/;"	f	class:Editor
divide	digitstring.cpp	/^int divide(struct mint *uit,const struct mint *in,const int over) {$/;"	f
dodialog	dialog.h	486;"	d
dodialogpost	dialog.h	487;"	d
dofromfile	editor.h	/^	int dofromfile;$/;"	m	class:Editor
dontdesturbe	desturbe.cpp	/^int dontdesturbe=0;$/;"	v
doortable	hash.h	/^ void Hash::doortable(void *gegs,void (*funct)(void *,POINTER,POINTER)) const$/;"	f	class:Hash
doreplace	searchaim.h	/^	int doreplace;$/;"	m	struct:__anon13
dosave	file.cpp	/^int Editor::dosave(void) {$/;"	f	class:Editor
dosaveind	helpindex.h	/^short dosaveind[]={15,16,};$/;"	v
dosavename	helptext.h	/^char dosavename[]="Save (Alt-f,s)\\000\\000Save current file. \\000";$/;"	v
dosconsole	screen.cpp	/^int dosconsole(void) {$/;"	f
dosearch	editor.h	/^inline OFFTYPE dosearch(char *ant,int len) {$/;"	f	class:Editor
dosearch	search.cpp	/^OFFTYPE Editor::dosearch(OFFTYPE pos, char *ant,int len) {$/;"	f	class:Editor
dosearcher	search.cpp	/^OFFTYPE Editor::dosearcher(SearchAim &aim) {$/;"	f	class:Editor
doswin	disk.cpp	/^bool doswin(void) {$/;"	f
downlevel	withcontain.cpp	/^int Editor::downlevel(void) {$/;"	f	class:Editor
downlevelind	helpindex.h	/^short downlevelind[]={16,17,91,};$/;"	v
downlevelname	helptext.h	/^char downlevelname[]="Child (Alt-y,c)\\000\\000If applied to a composed datatype, this makes the current active datatype\\000the member of the composed datatype the cursor is on.\\000";$/;"	v
drive	biosdisk.h	/^	BYTE drive;	$/;"	m	struct:diskinfo
driveletter	disk.cpp	/^inline bool  driveletter( const char * const name) {return (name[3]=='\\\\'&&name[5]==':'&&!name[6]&&(name[2]=='.'||name[2]=='?')) ; }$/;"	f
duplicateind	helpindex.h	/^short duplicateind[]={20,21,90,129,202,273,345,411,484,493,561,600,665,};$/;"	v
duplicatename	helptext.h	/^char duplicatename[]="Duplicate (Alt-y,i)\\000\\000Useful if you like to use the same data more than once in a composed\\000datatype. It acts like an union in c. \\000Filter that duplicates bytes before being interpret by the active (sub-)\\000datatype. You have to specify how many times it is duplicated (dubnr).\\000The active (sub) datatype consists of a certain number of bytes (size).\\000usenr=(size\/dubnr) gives the number of bytes used for every item.\\000dubnr times the same usenr bytes are appended and given to the datatype.\\000Example:\\000You use ascii\/4 (ascii consisting of 4 bytes). You say duplicate 2 \\000and the file consists of abcdefghijkl.\\000Before applying the filter this was displayed as abcd efgh ijkl.\\000After applying the duplicate filter it becomes abab cdcd efef ghghe ijij klkl.\\000";$/;"	v
dynlink	readconfig.cpp	/^int dynlink(const char *name) {$/;"	f
dynproc	editor.h	/^	static  int (Editor::**dynproc)(void);$/;"	m	class:Editor
dynproc	procview.cpp	/^int (Editor::**Editor::dynproc)(void);$/;"	v
dynprocnames	editor.h	/^	static  const char **dynprocnames;$/;"	m	class:Editor
dynprocnames	procview.cpp	/^const char **Editor::dynprocnames;$/;"	m	class:Editor	file:
dynprocnr	editor.h	/^	static int dynprocnr;$/;"	m	class:Editor
dynprocnr	procview.cpp	/^int Editor::dynprocnr=0;$/;"	m	class:Editor	file:
echoon	screen.h	147;"	d
echoon	screen.h	52;"	d
ed	editor.h	/^	Editor *ed;$/;"	m	struct:threadgegs
ed	hyperscan.cpp	/^		Editor *ed;$/;"	m	union:Toshownhandler::__anon2	file:
ed	hyperscan.cpp	/^	Editor *ed;$/;"	m	struct:__anon1	file:
editcast	system.h	61;"	d
editdataind	helpindex.h	/^short editdataind[]={15,16,77,78,140,174,238,266,267,285,286,318,319,};$/;"	v
editdataname	helptext.h	/^char editdataname[]="Edit (Alt-e,d)\\000\\000Evokes text editor to edit selected data in active datatype.\\000\\000If the environmental variable EDITOR is set to the full path \\000of an editor that editor is used.\\000You can set environmental variables in beds configuration file \\000with the following command:\\000\\000setenv name [val]\\000\\000Leaving out val means unsetenv.\\000\\000See manual page bed.1 or bed -h for more information.\\000";$/;"	v
editerase	editup.cpp	42;"	d	file:
editfile	main.cpp	/^Editor *editfile(const char *file) {$/;"	f
editfocus	editor.cpp	/^int maxedit=10,nredit=0, editfocus=-1,startnonactive=0;$/;"	v
editin	main.cpp	/^Editor *editin(Editor *ed) {$/;"	f
editmove	inout.h	23;"	d
editontop	menus.cpp	/^void Editor::editontop(void) {$/;"	f	class:Editor
editor	screenpart.h	/^	Editor *editor;$/;"	m	class:ScreenPart
editpos	editor.h	/^	long editpos,oldpos,updated;$/;"	m	class:Editor
edits	editor.cpp	/^Editor **edits;$/;"	v
editscreen	editor.h	/^		WINDOW *editscreen;$/;"	m	class:Editor
edittop	editor.h	/^	int allheight,Screenheight,Screenwidth,edittop;$/;"	m	class:Editor
editup	editor.cpp	/^void Editor::editup(void) {$/;"	f	class:Editor
edp	gnusearch.cpp	/^	Editor *edp;$/;"	m	class:saveregs	file:
edscholldown	move.cpp	/^int Editor::edscholldown(void) {$/;"	f	class:Editor
edscholldownind	helpindex.h	/^short edscholldownind[]={15,16,};$/;"	v
edscholldownname	helptext.h	/^char edscholldownname[]="Down (Alt-i,w)\\000\\000Scrolls file down. The first line is scrolled down to the second line position.\\000";$/;"	v
el	dialog.h	450;"	d
el	editor.h	/^	int el;$/;"	m	class:Editor
el	editor.h	/^	struct menuel *el;$/;"	m	struct:Editor::menu	typeref:struct:Editor::menu::menuel
elk	keyconfig.cpp	62;"	d	file:
elk	menus.cpp	226;"	d	file:
elk	menus.cpp	231;"	d	file:
elk	menus.cpp	235;"	d	file:
elk	menus.cpp	244;"	d	file:
elk	menus.cpp	259;"	d	file:
ellen	hyperscan.cpp	/^	short ellen,bytes;	$/;"	m	class:Toshownhandler	file:
elm	keyconfig.cpp	70;"	d	file:
elm	menus.cpp	225;"	d	file:
elm	menus.cpp	230;"	d	file:
elm	menus.cpp	234;"	d	file:
elm	menus.cpp	243;"	d	file:
elm	menus.cpp	258;"	d	file:
empty	rbtree.cpp	/^void Tree::empty(void) {$/;"	f	class:Tree
empty	rbtree.h	/^	Treel *empty;$/;"	m	struct:memhead
emptyconfig	withcontain.cpp	/^int Editor::emptyconfig(Empty *emp,int kind) {$/;"	f	class:Editor
emptycontain	withcontain.cpp	/^int Editor::emptycontain(void) {$/;"	f	class:Editor
emptycontainind	helpindex.h	/^short emptycontainind[]={16,17,62,};$/;"	v
emptycontainname	helptext.h	/^char emptycontainname[]="Empty (Alt-d,y)\\000\\000Skip empty parts within a composed datatype.\\000Useful if a file contains records with parts you are not interested in.\\000";$/;"	v
emptyfile	editor.cpp	/^	int Editor::emptyfile(void) {$/;"	f	class:Editor
emptyfile	main.cpp	/^	Editor *emptyfile(void) {$/;"	f
emptyfileind	helpindex.h	/^short emptyfileind[]={14,15,97,};$/;"	v
emptyfilename	helptext.h	/^char emptyfilename[]="New (Alt-f,n)\\000\\000Opens new document filled with zeros. You can enlarge the document with Alt-e,x. \\000Shrink it with Alt-e,t.\\000";$/;"	v
emptyshowdefault	withcontain.cpp	/^char emptyshowdefault[2]="#";$/;"	v
end	dialog.h	/^	int end,&endptr;$/;"	m	class:line
end	gnusearch.cpp	/^	regoff_t	*end=NULL;$/;"	m	class:saveregs	file:
end	screenpart.h	/^	int end(void) {$/;"	f	class:ScreenPart
endblock	file.cpp	/^inline BLOCKTYPE endblock(OFFTYPE posf,int bs,int blen) {$/;"	f
enddata	rbtree.h	/^	Treel *enddata;$/;"	m	struct:memhead
enddebug	debug.h	31;"	d
enddebug	debug.h	35;"	d
enddialog	dialog.h	498;"	d
endedit	file.cpp	/^int Editor::endedit(void) {$/;"	f	class:Editor
endedit	main.cpp	/^int endedit(Editor *ed) {$/;"	f
endfile	move.cpp	/^int Editor::endfile(void) {$/;"	f	class:Editor
endfileind	helpindex.h	/^short endfileind[]={19,20,};$/;"	v
endfilename	helptext.h	/^char endfilename[]="End file (Alt-m,e)\\000\\000Goto end of file.\\000";$/;"	v
endkey	keyproc.h	55;"	d
endline	move.cpp	/^int Editor::endline(void) {$/;"	f	class:Editor
endlineind	helpindex.h	/^short endlineind[]={};$/;"	v
endlinename	helptext.h	/^char endlinename[]="Goto end line (End).\\000";$/;"	v
endmenulen	suspend.cpp	/^const int endmenulen=sizeof(endmenustring);$/;"	v
endmenustring	suspend.cpp	/^char endmenustring[]={0,27,'[','?','1','0','l'};$/;"	v
endmmap	file.cpp	800;"	d	file:
endmmap	withcontain.cpp	811;"	d	file:
endmmap	withcontain.cpp	813;"	d	file:
endoffset	viewbuf.h	/^OFFTYPE offset,endoffset;$/;"	m	class:Viewbuf
endoptions	dialog.h	501;"	d
endoptions2	dialog.h	536;"	d
endpage	move.cpp	/^int Editor::endpage(void) {$/;"	f	class:Editor
endpageind	helpindex.h	/^short endpageind[]={17,18,};$/;"	v
endpagename	helptext.h	/^char endpagename[]="End Pg (Alt-m,d)\\000\\000Goto end of page \\000";$/;"	v
endptr	dialog.h	/^	int end,&endptr;$/;"	m	class:line
endreco	editmacros.cpp	/^Strokekeytype endreco[]={20  };$/;"	v
endrecolen	editmacros.cpp	/^int endrecolen=sizeof(endreco)\/sizeof(Strokekeytype);$/;"	v
endrecording	editmacros.cpp	/^int	endrecording(void) {$/;"	f
endscreen	keyconfig.cpp	/^void endscreen(void) {$/;"	f
endthread	editor.h	/^bool endthread=false;$/;"	m	class:Editor
endtrace	trace.cpp	/^int endtrace(void) {$/;"	f
endtrace	trace.h	27;"	d
enlargeparts	parts.cpp	/^void Editor::enlargeparts(void) {$/;"	f	class:Editor
enoughbytes	search.cpp	1223;"	d	file:
equal	filter.cpp	/^	int  Filter::equal(const Filter *fil) const {$/;"	f	class:Filter
equal	filter.cpp	/^int ScreenPart::equal(const ScreenPart *part) const {$/;"	f	class:ScreenPart
equal	searchinterrupt.h	/^inline bool equal(BLOCKTYPE bl) {$/;"	f	class:SearchInterrupt
erbij	input.cpp	28;"	d	file:
erefresh	editor.cpp	/^void Editor::erefresh(void) {$/;"	f	class:Editor
err	filter.h	/^	int err; \/*set on error *\/$/;"	m	class:Filter
error	filter.cpp	/^	int Filter::error(void) {$/;"	f	class:Filter
error	memory.h	/^	int error(void) const {return errors;}$/;"	f	class:Memory
error	sparsecp.cpp	/^void error(const char *format, ...) {$/;"	f
errorline	win.h	/^inline void errorline(void) {$/;"	f
errormessage	cursesinit.cpp	235;"	d	file:
errormessage	cursesinit.cpp	237;"	d	file:
errormessage	main.cpp	/^int errormessage(char *format ...) {$/;"	f
errormessage	main.cpp	848;"	d	file:
errormessage	main.cpp	850;"	d	file:
errormessage	savedatatype.cpp	34;"	d	file:
errormessage	savedatatype.cpp	36;"	d	file:
errormessage	withcontain.cpp	819;"	d	file:
errors	memory.h	/^	int errors,readonly;$/;"	m	class:Memory
erroruit	disk.cpp	6;"	d	file:
execones	procview.cpp	/^Proclist *execswitch=NULL,*execopen=NULL,*execones=NULL;$/;"	v
execopen	procview.cpp	/^Proclist *execswitch=NULL,*execopen=NULL,*execones=NULL;$/;"	v
execswitch	procview.cpp	/^Proclist *execswitch=NULL,*execopen=NULL,*execones=NULL;$/;"	v
executeinitproc	procview.cpp	/^	int Proclist::executeinitproc(Editor *ed) {$/;"	f	class:Proclist
executeinitproc	procview.cpp	/^int Editor::executeinitproc(void) {$/;"	f	class:Editor
exitall	main.cpp	/^int exitall(void) {$/;"	f
exitinitscr	cursesinit.cpp	/^static void exitinitscr(void) {$/;"	f	file:
expandchunk	editor.h	/^inline unsigned char *expandchunk(unsigned char *ptr,int len,int oldlen) {$/;"	f	class:Editor
expanddisk	disk.cpp	/^char * expanddisk(const char * const name,char *const filename) {$/;"	f
expandfilename	expandfilename.cpp	/^char *expandfilename(char *filename,const char *name) $/;"	f
expandfilename	expandfilename.cpp	/^char *expandfilename(char *filename,const char *name) {$/;"	f
expandfilename	system.h	50;"	d
expandunixname	readconfig.cpp	888;"	d	file:
expandunixname	readconfig.cpp	891;"	d	file:
expandunixname	readconfig.cpp	894;"	d	file:
exploresize	memory.cpp	/^void Memory::exploresize(FILEHANDLE file,OFFTYPE begin, OFFTYPE end) {$/;"	f	class:Memory
extend	edit.cpp	/^int Editor::extend(void) {$/;"	f	class:Editor
extendfile	edit.cpp	/^int Editor::extendfile(OFFTYPE len) {$/;"	f	class:Editor
extendfile	macros.cpp	/^static int extendfile(int file, int newmax) {$/;"	f	file:
extendind	helpindex.h	/^short extendind[]={22,23,};$/;"	v
extendname	helptext.h	/^char extendname[]="Extend file (Alt-e,x)\\000\\000Make the file larger, adding zeros to the end of file. \\000";$/;"	v
extendtoundo	undo.cpp	/^int	Editor::extendtoundo(OFFTYPE oldsize) {$/;"	f	class:Editor
extendtoundoonly	undo.cpp	/^int	Editor::extendtoundoonly(OFFTYPE oldsize) {$/;"	f	class:Editor
fieldcolor	dialog.cpp	/^Fieldcol fieldcolor[] = {$/;"	v
fieldcolor	readconfig.cpp	/^Fieldcol fieldcolor[] = {$/;"	v
file	keystrokes.h	/^	int file;$/;"	m	class:Keystrokes
file2buf	suspend.cpp	/^char * file2buf(const char *name,int *len) {$/;"	f
file2screenpos	filter.cpp	/^	int Filter::file2screenpos(int pos) {$/;"	f	class:Filter
filebytes	filter.cpp	/^int ScreenPart::filebytes(int b) {$/;"	f	class:ScreenPart
filedata	disk.cpp	/^int Editor::filedata(void) {$/;"	f	class:Editor
filedataformat	disk.cpp	/^constexpr const char *filedataformat(const unsigned int) {return " %u %s %s " OFFPRINT;};$/;"	f
filedataformat	disk.cpp	/^constexpr const char *filedataformat(const unsigned long long) {return " %ull %s %s " OFFPRINT;};$/;"	f
filedataformat	disk.cpp	/^constexpr const char *filedataformat(const unsigned long) {return " %ul %s %s " OFFPRINT;};$/;"	f
filedataind	helpindex.h	/^short filedataind[]={19,20,};$/;"	v
filedataname	helptext.h	/^char filedataname[]="Fileinfo (Alt-f,f)\\000\\000Displays information about current file.\\000";$/;"	v
filegeg	dialog.cpp	/^int filegeg(char *name,char *buf) {$/;"	f
filehandle	memory.h	/^	FILEHANDLE filehandle;$/;"	m	class:Memory
fileinfo	editup.cpp	/^int Editor::fileinfo(void) {$/;"	f	class:Editor
fileinfoind	helpindex.h	/^short fileinfoind[]={};$/;"	v
fileinfoname	helptext.h	/^char fileinfoname[]="Show the name and size of file in the message line. (No key binding).\\000";$/;"	v
filename	memory.h	/^	char *filename;$/;"	m	class:Memory
filenamelen	memory.h	/^	int filenamelen;$/;"	m	class:Memory
fileok	editor.cpp	/^int Editor::fileok(void) {$/;"	f	class:Editor
filepos	editor.h	/^	OFFTYPE filepos ,lastgotopos;$/;"	m	class:Editor
filesize	editor.cpp	/^	OFFTYPE Editor::filesize(void) {return mem.size();}$/;"	f	class:Editor
filesize	memory.h	/^	OFFTYPE filesize, diskfilesize{},useddiskfilesize{};$/;"	m	class:Memory
filesup	screen.cpp	/^void Editor::filesup(void) {$/;"	f	class:Editor
filesym	dialog.cpp	/^struct filesym { DWORD mask; char show;}; $/;"	s	file:
filetruncate	edit.cpp	/^int Editor::filetruncate(OFFTYPE vanaf) {$/;"	f	class:Editor
filformat2bin	screenpart.cpp	/^ int ScreenPart::filformat2bin(const char * const from, unsigned char *to, int &len) const{$/;"	f	class:ScreenPart
fill	macros.cpp	/^	int Keystrokes::fill(Keystrokes &other) {$/;"	f	class:Keystrokes
fill	macros.cpp	/^	int Keystrokes::fill(Strokekeytype *keys,int len) {$/;"	f	class:Keystrokes
fill	memed.cpp	/^OFFTYPE Viewbuf::fill(OFFTYPE pos,int len) {$/;"	f	class:Viewbuf
fillhelp	gethelp.cpp	/^int fillhelp(void) {$/;"	f
filterformat2bin	screenpart.cpp	/^int ScreenPart::filterformat2bin(const char *from, unsigned char *to, int len) {$/;"	f	class:ScreenPart
filtername	filter.h	82;"	d
filters	screenpart.h	/^	Filter **filters;$/;"	m	class:ScreenPart
filtersfrom	withcontain.cpp	820;"	d	file:
filtersfuncs	filter.cpp	/^Filterprocptr  *filtersfuncs=NULL;$/;"	v
filtersmaxlen	filter.cpp	/^int filtersmaxlen=0,filtersnr=0;$/;"	v
filtersnames	filter.cpp	/^char **filtersnames=NULL;$/;"	v
filtersnr	filter.cpp	/^int filtersmaxlen=0,filtersnr=0;$/;"	v
filtersstring	filter.cpp	/^int ScreenPart::filtersstring(char *buf) {$/;"	f	class:ScreenPart
findgetmode	search.cpp	600;"	d	file:
findoutxwindows	main.cpp	/^int findoutxwindows(void) {$/;"	f
firstescape	file.cpp	404;"	d	file:
firstfile	window.cpp	/^int Editor::firstfile(void) {$/;"	f	class:Editor
firstfileind	helpindex.h	/^short firstfileind[]={16,17,};$/;"	v
firstfilename	helptext.h	/^char firstfilename[]="First (Alt-w,f)\\000\\000Goto the first opened buffer. \\000";$/;"	v
firstfilter	screenpart.h	/^	int firstfilter,lastfilter,maxfilter;$/;"	m	class:ScreenPart
firstmenuitem	menus.cpp	/^int Editor::firstmenuitem(void) {$/;"	f	class:Editor
firstmenuitemind	helpindex.h	/^short firstmenuitemind[]={37,38,112,146,147,174,175,};$/;"	v
firstmenuitemname	helptext.h	/^char firstmenuitemname[]="Goto the first menu element. (Home).\\000\\000Only applies within an opened menu. You have to put 253 immediately after\\000the keys keyword. So for example:\\000\\000keys 253 1 = firstmenuitem\\000\\000makes that within an opened menu contr-a jumps to the first menu item.\\000";$/;"	v
flush	macros.cpp	/^	void Keystrokes::flush(void) {$/;"	f	class:Keystrokes
flushinp	screen.h	77;"	d
forcetruncate	edit.cpp	/^inline int Editor::forcetruncate(void) {$/;"	f	class:Editor
forg	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	m	struct:__anon11
form	gnusearch.cpp	41;"	d	file:
form2bin	ascii.cpp	/^int Ascii::form2bin(const char *formal, unsigned char *bin, int &len) const {	$/;"	f	class:Ascii
form2bin	hassub.cpp	/^int HasSub::form2bin(const char *formal, unsigned char *bin, int &len) const {	$/;"	f	class:HasSub
form2bin	multidigit.cpp	/^	int MultiDigit::form2bin(const char *formal, unsigned char *bin, int &len) const {$/;"	f	class:MultiDigit
form2bin	screenpart.h	/^inline	virtual int form2bin(const char *formal, unsigned char *bin, int &len) const {$/;"	f	class:ScreenPart
formal2bin	screenpart.h	/^	virtual int formal2bin(const char *formal, unsigned char *bin, int len) const {$/;"	f	class:ScreenPart
format2bin	screenpart.h	/^inline	virtual int format2bin(const char *formal, unsigned char *bin, int len)const {$/;"	f	class:ScreenPart
formatsearch	editor.h	/^	char *formatsearch=nullptr,*searchdataname;$/;"	m	class:Editor
formatsearchlen	editor.h	/^int formatsearchlen=0;$/;"	m	class:Editor
formre2replace	re2search.cpp	/^int Editor::formre2replace(OFFTYPE pos,int matchlen, char *str,int len  ) {$/;"	f	class:Editor
found	editor.h	/^	int found;$/;"	m	class:Editor
foundsearchingfor	search.cpp	87;"	d	file:
free	viewbuf.h	/^void free(void) {$/;"	f	class:Viewbuf
freearray	disk.cpp	/^inline void freearray(char **devices,int &maxdriv) {$/;"	f
freebiosdisk	memory.cpp	/^void freebiosdisk(void) {$/;"	f
freekeys	keyinput.cpp	/^void	freekeys(struct keyinput::tree *par) {$/;"	f
freemy	myalloc.cpp	/^void freemy(void *ptr) {$/;"	f
freemy	myalloc.h	53;"	d
freeredos	undo.cpp	/^void freeredos(Editor *ed) {$/;"	f
freesubpart	contain.cpp	/^	ScreenPart * Contains::freesubpart(int pos) {$/;"	f	class:Contains
freesubpart	repeat.cpp	/^ScreenPart * Repeat::freesubpart(int pos) {$/;"	f	class:Repeat
fromascii	screenpart.h	112;"	d
frombytes	convert.h	/^inline int frombytes(ScreenPart *part,unsigned char *ant,unsigned char *ascant, int len,int maxuit) {$/;"	f
fromcommand	editor.cpp	/^int Editor::fromcommand(void) {$/;"	f	class:Editor
fromcommandind	helpindex.h	/^short fromcommandind[]={};$/;"	v
fromcommandname	helptext.h	/^char fromcommandname[]="Turns command mode off.\\000";$/;"	v
fromdigit	digitstring.cpp	158;"	d	file:
fromdigitstring	digitstring.cpp	/^int fromdigitstring(char *dec,struct mint *uit) {$/;"	f
fromdigitstring	digitstring.cpp	/^int fromdigitstring(const char *dec,int declen,int base,struct mint *uit) {$/;"	f
fromfile	filter.h	/^	virtual int fromfile(const unsigned char * const input,int &len,unsigned char *const output) const {$/;"	f	class:Filter
fromfile	filter.h	/^	virtual int fromfile(const unsigned char * const input,unsigned char * const output) const {$/;"	f	class:Filter
fromfile	memed.cpp	/^int Editor::fromfile(OFFTYPE pos) { $/;"	f	class:Editor
fromfile	memed.cpp	/^int Editor::fromfile(void) { return(fromfile(filepos)); };$/;"	f	class:Editor
fromfilefilters	filter.cpp	/^int ScreenPart::fromfilefilters(const char *const input,int &inplen,char *output) const {$/;"	f	class:ScreenPart
fromfilefilterspos	filter.cpp	/^int ScreenPart::fromfilefilterspos(int pos) const {$/;"	f	class:ScreenPart
fromtop	editor.h	/^		int fromtop,numberof;$/;"	m	class:Editor
fsym	dialog.cpp	/^const struct filesym fsym[]=$/;"	v	typeref:struct:filesym
fullpathname	dialog.cpp	/^inline void	fullpathname(char *outfile,ssize_t len,const char *infile) {$/;"	f
fullpathname	dialog.cpp	1078;"	d	file:
funcptr	system.h	62;"	d
funcs	typelist.cc	/^ScreenPart *(**datatypes::funcs)(Editor *ed) =NULL;$/;"	v
funcs	typelist.h	/^	static ScreenPart *(**funcs)(Editor *) ;$/;"	m	class:datatypes
gegs	readconfig.cpp	/^struct gegs {$/;"	s	file:
gegsthread	editor.h	/^struct  threadgegs gegsthread;$/;"	m	class:Editor	typeref:struct:Editor::threadgegs
gelijk	win.h	102;"	d
gelijk	win.h	107;"	d
get	macros.cpp	/^	int Keystrokes::get(void) {$/;"	f	class:Keystrokes
getLinuxdrives	disk.cpp	/^int getLinuxdrives(char ***devicesptr) {$/;"	f
getNTdrives	disk.cpp	/^int getNTdrives(char ***devicesptr) {$/;"	f
get_assume_default_colors	readconfig.cpp	/^int get_assume_default_colors(void) {$/;"	f
getactive	main.cpp	/^Editor *getactive(void) {$/;"	f
getanswer	parts.cpp	/^int Editor::getanswer(const char *question,char *answ,int anslen,int ansroom) {$/;"	f	class:Editor
getattr	readconfig.cpp	/^chtype getattr(char *str) {$/;"	f
getbase	screenpart.cpp	/^int ScreenPart::getbase(void) {return type;};$/;"	f	class:ScreenPart
getbiosdrives	disk.cpp	/^int getbiosdrives(char ***devicesptr) {$/;"	f
getblock	memed.cpp	/^BEDS_SIZE_T Editor::getblock(BLOCKTYPE blocknr,char *buf)  {$/;"	f	class:Editor
getblockreadonly	memory.cpp	/^int getblockreadonly(FILEHANDLE filehandle) $/;"	f
getblocksize	memory.cpp	/^Getfilesize getfilesize=NULL,getblocksize=NULL;$/;"	v
getbytes	screenpart.cpp	/^int ScreenPart::getbytes(void) const {$/;"	f	class:ScreenPart
getch	editor.cpp	/^ int Editor::getch(void) {$/;"	f	class:Editor
getch	editor.h	587;"	d
getch	main.cpp	239;"	d	file:
getchild	hassub.cpp	/^ScreenPart *HasSub::getchild(int &forstart,int &binstart,int pos) {$/;"	f	class:HasSub
getchild	repeat.cpp	/^	ScreenPart *Repeat::getchild(int &forstart,int &binstart,int pos) {$/;"	f	class:Repeat
getchild	screenpart.cpp	/^ScreenPart *ScreenPart::getchild(int &forstart,int &binstart,int pos) {$/;"	f	class:ScreenPart
getchild	screenpart.cpp	/^ScreenPart *ScreenPart::getchild(void) {$/;"	f	class:ScreenPart
getcols	parts.cpp	/^int Editor::getcols(void) {$/;"	f	class:Editor
getconfig	readconfig.cpp	/^char *getconfig(char *configname) {$/;"	f
getconvstr	ascii.cpp	/^char *Ascii::getconvstr(void) {$/;"	f	class:Ascii
getconvstr	screenpart.cpp	/^char *ScreenPart::getconvstr(void) {$/;"	f	class:ScreenPart
getdata	memed.cpp	/^char *Viewbuf::getdata(OFFTYPE pos,int len) {$/;"	f	class:Viewbuf
getdesc	screenpart.h	/^	virtual class Parent *getdesc(void) const  { return &desc;};$/;"	f	class:ScreenPart
getdisklength	disk.cpp	/^long long getdisklength(HANDLE filehandle) {$/;"	f
getdrivestr	disk.cpp	/^inline int getdrivestr(UINT drivetype,char *buf) {$/;"	f	class:Volumes
geteditpos	move.cpp	/^int Editor::geteditpos(void) {return editpos;};$/;"	f	class:Editor
getendoffset	viewbuf.h	/^OFFTYPE getendoffset(void) {return endoffset;}$/;"	f	class:Viewbuf
getfile	dialog.cpp	/^const char *getfile(const char *prompt,const char *ask) {$/;"	f
getfile	main.cpp	/^const char *getfile(const char *prompt,const char *ask) {$/;"	f
getfilecolors	dialog.cpp	/^void getfilecolors(void) {$/;"	f
getfileinfo	memory.cpp	/^int Memory::getfileinfo( BY_HANDLE_FILE_INFORMATION *FInfo ) {$/;"	f	class:Memory
getfilename	file.cpp	/^char *Editor::getfilename(char *buf) {$/;"	f	class:Editor
getfilepos	move.cpp	/^	OFFTYPE Editor::getfilepos(void) {return filepos;};$/;"	f	class:Editor
getfiles	glob.c	/^int getfiles(const char *pattern,char ***files,int *back) {$/;"	f
getfilesize	memory.cpp	/^Getfilesize getfilesize=NULL,getblocksize=NULL;$/;"	v
getfilessplit	glob.c	/^int getfilessplit(const char *pattern,char ***files,char ***dirs,int *dirend) {$/;"	f
getfilesym	dialog.cpp	/^int getfilesym[]= {$/;"	v
getfilterfunc	filter.cpp	/^Filterprocptr  getfilterfunc(const char *name,int len) {$/;"	f
getfree	getfree.cpp	/^long long getfree(void) {$/;"	f
getfunc	typelist.cc	/^ScreenPart *(*datatypes::getfunc(char *name,int len)) (Editor *) {$/;"	f
getindatatype	withcontain.cpp	/^int getindatatype(const ScreenPart * const thesub) {$/;"	f
getinput	inout.cpp	/^int Editor::getinput(const char question[],char *answer) {$/;"	f	class:Editor
getinput	marks.cpp	/^struct keylookup::mark *keylookup::getinput(unsigned char *str,int len) {$/;"	f	class:keylookup
getitem	hash.h	/^ POINTER Hash::getitem(const char *label) const$/;"	f	class:Hash
getkey	searchinterrupt.h	/^inline bool getkey(void) {	$/;"	f	class:SearchInterrupt
getkeyinput	inout.cpp	/^ int Editor::getkeyinput(const char *format ...) {$/;"	f	class:Editor
getkeys	inout.cpp	/^int getkeys(unsigned char *keys,int maxkeys) {$/;"	f
getlabel	getlabel.cpp	/^int getlabel(const char **labels,  int nr, const char *str) {$/;"	f
getlabelcase	getlabel.cpp	/^int getlabelcase(const char **labels,  int nr, const char *str) {$/;"	f
getlastfilter	filter.cpp	/^Filter *ScreenPart::getlastfilter(void) {$/;"	f	class:ScreenPart
getlevels	input.cpp	/^int getlevels(ScreenPart *part) {$/;"	f
getmacroheader	editmacros.cpp	/^ssize_t getmacroheader(char  *macroheader) {$/;"	f
getmatchlen	gnuasciiregex.cpp	30;"	d	file:
getmem	memed.cpp	/^OFFTYPE Editor::getmem(OFFTYPE pos,char *buf,OFFTYPE len){$/;"	f	class:Editor
getmode	editor.cpp	/^int Editor::getmode(DataType type,int len,int order) {$/;"	f	class:Editor
getname	keystrokes.h	/^	char *getname(void) {return name;}$/;"	f	class:Keystrokes
getname	screenpart.h	/^	const char *getname(void) const {return name;}$/;"	f	class:Parent
getname	screenpart.h	/^	const char *getname(void)const  {return getdesc()->getname();}$/;"	f	class:ScreenPart
getnewmenuproc	menus.cpp	/^int (Editor::*getnewmenuproc(int menunr)) (void) {$/;"	f
getnextundo	undo.cpp	/^inline struct undo *Editor::getnextundo(void) {$/;"	f	class:Editor
getnr	viewbuf.h	/^int getnr(void) {return blnr;}$/;"	f	class:Viewbuf
getoffset	viewbuf.h	/^OFFTYPE getoffset(void) {return offset;}$/;"	f	class:Viewbuf
getotherterm	main.cpp	/^void getotherterm(void ) {$/;"	f
getparent	screenpart.cpp	/^ScreenPart *ScreenPart::getparent(ScreenPart *start) {$/;"	f	class:ScreenPart
getpart	memed.cpp	/^OFFTYPE Editor::getpart(OFFTYPE begin, OFFTYPE len, char * buf) {return mem.getpart(begin,len,buf);}$/;"	f	class:Editor
getpartitions	disk.cpp	/^int getpartitions(char **devices) {$/;"	f
getpos	hyperscan.cpp	/^inline	OFFTYPE getpos(unsigned long long endpos) {$/;"	f	class:Toshownhandler
getpreviouspos	editup.cpp	/^OFFTYPE Editor::getpreviouspos(void) {$/;"	f	class:Editor
getregistrysize	memory.cpp	/^OFFTYPE Memory::getregistrysize(Diskinfo *infodisk,OFFTYPE &begin,OFFTYPE &end) $/;"	f	class:Memory
getsavedatahandler	withcontain.cpp	/^FILEHANDLE Editor::getsavedatahandler(const char *question) {$/;"	f	class:Editor
getselbuf	select.cpp	/^OFFTYPE Editor::getselbuf(char **buf) {$/;"	f	class:Editor
getselbuf	select.cpp	/^OFFTYPE getselbuf(char **buf) {$/;"	f
getselect	select.cpp	/^OFFTYPE Editor::getselect(void) {$/;"	f	class:Editor
getselectdatatype	select.cpp	/^ScreenPart	*getselectdatatype(void) {$/;"	f
getselectioneditor	select.cpp	/^Editor *getselectioneditor(void) {$/;"	f
getselregion	select.cpp	/^OFFTYPE Editor::getselregion(OFFTYPE *start) {$/;"	f	class:Editor
getshown	viewbuf.h	/^int getshown(void) { return shown;}$/;"	f	class:Viewbuf
getshowwin	dialog.cpp	/^WINDOW *getshowwin(int l,int c,int by,int bx) {$/;"	f
getsizelinux	memory.cpp	/^bool Memory::getsizelinux(OFFTYPE &begin,OFFTYPE &end) {$/;"	f	class:Memory
getstart	viewbuf.h	/^int getstart(void) {return start;}$/;"	f	class:Viewbuf
getstarttime	times.cpp	/^void getstarttime(void) {$/;"	f
getstr	screen.h	133;"	d
getstr	screen.h	64;"	d
getsubpart	screenpart.cpp	/^ScreenPart *ScreenPart::getsubpart(int &forstart,int &binstart,int pos) {$/;"	f	class:ScreenPart
getsubpart	screenpart.cpp	/^ScreenPart *ScreenPart::getsubpart(void) {$/;"	f	class:ScreenPart
getsuperpart	screenpart.cpp	/^ScreenPart *ScreenPart::getsuperpart(void) {$/;"	f	class:ScreenPart
gettermcap	readconfig.cpp	/^int gettermcap(const char *input,unsigned char *output) {$/;"	f
gettextinfo	screen.h	151;"	d
gettopos	editor.cpp	/^int Editor::gettopos(void) {$/;"	f	class:Editor
gettoposind	helpindex.h	/^short gettoposind[]={19,20,69,79,89,101,167,219,227,297,344,354,374,429,508,530,587,};$/;"	v
gettoposname	helptext.h	/^char gettoposname[]="Position (Alt-m,p)\\000\\000Ask for a file offset and jumps to this offset. \\000Forward: \\000	count up\\000Edge File: \\000	If checked: count from begin (forward) or end (backward) file.  \\000	If not checked you count from the cursor position.\\000Align: \\000	If checked: In multibyte units the screen is aligned at the current \\000	alignment (boundary) after changing position.\\000Position:\\000	Offset to jump to.\\000You can specify in what format to specify the offset. \\000All: specify offset with 0x for hex and 0 for oct. Numbers not starting with 0\\000	are decimal numbers.\\000Hex,Dec,Oct: type of number without need to use 0x or 0 \\000\\000";$/;"	v
gettotal	marks.h	/^inline int gettotal(void) {return total;};$/;"	f	class:keylookup
getunderlabel	getlabel.cpp	/^int getunderlabel(char **labels,  int nr, const char *str) {$/;"	f
getunderlabeli	getlabel.cpp	/^int getunderlabeli(char **labels,  int nr, const char *str,int icase) {$/;"	f
getuserlabel	savedatatype.cpp	/^int getuserlabel(ScreenPart *part, char *&ptr) {$/;"	f
getvolpaths	disk.cpp	/^inline int getvolpaths(char *volume, int volnamelen,char *buf, int *lastdriveptr) {$/;"	f	class:Volumes
getvolptr	disk.cpp	/^Volumes *getvolptr() {$/;"	f
getvolumegegs	disk.cpp	/^int  getvolumegegs(char *volume,int namelen,char *buf,int maxbuf) {$/;"	f	class:Volumes
getvolumesize	disk.cpp	/^inline  OFFTYPE getvolumesize(const char *volume) {$/;"	f	class:Volumes
ggetch	dialog.cpp	/^int ggetch(WINDOW *w) {$/;"	f
ggetch	main.cpp	/^int ggetch(WINDOW *w) {$/;"	f
giveback	readconfig.cpp	/^int  giveback=COLOR_WHITE,givefore=COLOR_BLACK;$/;"	v
givefore	readconfig.cpp	/^int  giveback=COLOR_WHITE,givefore=COLOR_BLACK;$/;"	v
globalmessage	inout.cpp	/^int globalmessage(const char *format, ...) {$/;"	f
globaloutput	inout.cpp	/^int globaloutput(char *str) { return edits[editfocus]->output(str); }$/;"	f
gnubackunit	unitsearch.cpp	/^OFFTYPE Editor::gnubackunit(SearchAim &aim) {$/;"	f	class:Editor
gnureplacehere	search.cpp	/^int Editor::gnureplacehere(OFFTYPE pos, char *str,int len  ) {$/;"	f	class:Editor
gossip	main.cpp	/^int maxdeath=5,gossip=0;$/;"	v
goto1ind	helpindex.h	/^short goto1ind[]={};$/;"	v
goto1name	helptext.h	/^char goto1name[]="Goto the first open file.\\000";$/;"	v
gotolastsearchpos	search.cpp	/^int Editor::gotolastsearchpos(void) {$/;"	f	class:Editor
gotolastsearchposind	helpindex.h	/^short gotolastsearchposind[]={24,25,87,149,};$/;"	v
gotolastsearchposname	helptext.h	/^char gotolastsearchposname[]="Last searched (Alt-m,l)\\000\\000Jumps to file offset last searched. Useful if you interrupted\\000searching or are searching on the background and want to know\\000where search was left.\\000";$/;"	v
gotonrwin	window.cpp	/^int Editor::gotonrwin(int nr) {$/;"	f	class:Editor
gotowin	builtinkeys.h	74;"	d
gotowin	builtinkeys.h	76;"	d
gotowin	builtinkeys.h	87;"	d
gotowin	window.cpp	264;"	d	file:
gotowin	window.cpp	274;"	d	file:
gppconio_init	screen.h	150;"	d
h	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
half	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
halfdelay	screen.h	134;"	d
has_super	screenpart.h	50;"	d
hasfinds	disk.cpp	/^inline BOOL hasfinds(void) {$/;"	f	class:Volumes
hash	hash.h	/^    unsigned short hash(const char *str) const {return ((hashfunctie(str)) % TABLESIZE);};$/;"	f	class:Hash
hashfunctie	gethelp.cpp	87;"	d	file:
hassub2str	savedatatype.cpp	/^int hassub2str(char *gegs,int maxgegs,HasSub *sub,int depth) {$/;"	f
head	marks.h	/^struct mark *head,begin,*iter;$/;"	m	class:keylookup	typeref:struct:keylookup::mark
heads	biosdisk.h	/^	DWORD heads;$/;"	m	struct:diskinfo
heads	memory.cpp	/^	DWORD heads;$/;"	m	struct:regdisk	file:
help	gethelp.cpp	/^struct help {$/;"	s	file:
help	help.h	/^const unsigned char help[679] = {'U','s','a','g','e',0x3a,0x20,'b','e','d',0x20,0x5b,'O','p','t','i','o','n','s',0x5d,0x20,0x5b,'F','i','l','e','s',0x5d,0xa,0xa,'O','p','t','i','o','n','s',0x20,0x28,'a','p','p','l','i','e','d',0x20,'t','o',0x20,'a','l','l',0x20,'f','i','l','e','s',0x29,0xa,0x2d,'w',0x3a,0x20,'A','l','w','a','y','s',0x20,'t','e','s','t',0x20,'f','i','l','e','s','i','z','e',0xa,0x2d,'d',0x20,'S','I','Z','E',0x3a,0x20,'S','e','t',0x20,'f','i','l','e','s','i','z','e',0x20,'t','o',0x20,'S','I','Z','E',0x20,0x28,'d','a','n','g','e','r','o','u','s',0x21,0x21,0x29,0xa,0x2d,'b',0x20,'B','L','O','C','K','S','I','Z','E',0x3a,0x20,'d','i','s','k',0x20,'r','e','a','d',0x2f,'w','r','i','t','e',0x20,'b','l','o','c','k','s','i','z','e',0x2e,0x20,0x20,0xa,0x2d,'V',0x20,'S','I','Z','E',0x3a,0x20,'s','e','t',0x20,'m','a','x','i','m','a','l',0x20,'D','V','D',0x2f,'C','D','R','O','M',0x20,'s','i','z','e',0xa,0x2d,'v',0x3a,0x20,'V','e','r','s','i','o','n',0x20,'i','n','f','o','r','m','a','t','i','o','n',0xa,0x2d,'c',0x3a,0x20,'S','o','u','r','c','e',0x20,'a','n','d',0x20,'c','o','m','p','i','l','e',0x20,'i','n','f','o',0xa,0x2d,'h',0x3a,0x20,'T','h','i','s',0x20,'s','c','r','e','e','n',0xa,0x2d,'s',0x20,'F','I','L','E',0x3a,0x20,'p','l','a','y',0x20,'r','e','c','o','r','d','e','d',0x20,'k','e','y','s','t','r','o','k','e','s',0x20,'f','i','l','e',0x20,'F','I','L','E',0xa,0x2d,'e',0x20,'p','r','o','c','e','d','u','r','e',0x3a,0x20,'e','x','e','c','u','t','e',0x20,'p','r','o','c','e','d','u','r','e',0x20,'a','t',0x20,'s','t','a','r','t','u','p',0xa,0x2d,'f',0x20,'b','e','d','r','c',0x3a,0x20,'U','s','e',0x20,'c','o','n','f','i','g','u','r','a','t','i','o','n',0x20,'f','i','l','e',0x20,'b','e','d','r','c',0x2c,0x20,'i','n','s','t','e','a','d',0x20,'o','f',0x20,'e','n','v',0x20,'B','E','D','R','C',0xa,0x20,0x20,0x20,'o','r',0x20,0x2f,'s','d','c','a','r','d',0x2f,0x2e,'b','e','d','r','c',0x20,'o','r',0x20,0x2f,'d','a','t','a',0x2f,'l','o','c','a','l',0x2f,'t','m','p',0x2f,'n','o','n','t','m','p',0x2f,'s','h','a','r','e',0x2f,'b','e','d',0x2f,'b','e','d','r','c',0xa,0x2d,'p',0x20,'p','l','u','g','i','n',0x3a,0x20,'l','o','a','d',0x20,'p','l','u','g','i','n',0x20,'a','t',0x20,'s','t','a','r','t','u','p',0xa,0x2d,'k',0x20,'f','i','l','e',0x3a,0x20,'C','o','n','f','i','g','u','r','e',0x20,'k','e','y',0x20,'b','i','n','d','i','n','g','s',0x20,'f','o','r',0x20,'c','u','r','r','e','n','t',0x20,'t','e','r','m','i','n','a','l',0x2e,0x20,'A','p','p','e','n','d',0x20,'t','o',0x20,'f','i','l','e',0x2e,0xa,0x2d,'B',0x3a,0x20,'b','l','a','c','k',0x2d,'w','h','i','t','e',0xa,0x2d,'C',0x3a,0x20,'c','o','l','o','r',0xa,'P','r','e','s','s',0x20,'F','1',0x20,'i','n',0x20,'t','h','e',0x20,'p','r','o','g','r','a','m',0x20,'o','r',0x20,'r','e','a','d',0x20,'b','e','d',0x2e,'1',0x20,'f','o','r',0x20,'m','o','r','e',0x20,'i','n','f','o','r','m','a','t','i','o','n',0x2e,0xa,0};$/;"	v
help	rbtree.cpp	/^void help() {$/;"	f
helphash	gethelp.cpp	/^static Hash *helphash;$/;"	v	file:
helplist	gethelp.cpp	/^struct help helplist[] = {$/;"	v	typeref:struct:help
helpname	gethelp.cpp	21;"	d	file:
helpnr	gethelp.cpp	/^static int helpnr=20+sizeof(helplist)\/sizeof(helplist[0]);$/;"	v	file:
helpproc	gethelp.cpp	/^int (Editor::*helpproc)(void)=NULL;$/;"	v
helpprocname	gethelp.cpp	22;"	d	file:
helpwin	dialog.cpp	/^void helpwin(void) {$/;"	f
hex2dig	convert.h	/^inline int hex2dig(const char ch)  {return ((ch>='0'&&ch<='9')?(ch-'0'):((ch<='f'&&ch>='a')?(ch-'a'+10):$/;"	f
hexel	convert.h	/^inline int hexel(unsigned char x)  {$/;"	f
hidecursor	screen.h	/^inline void hidecursor(void) $/;"	f
hideprocedure	menus.cpp	53;"	d	file:
hideprocedure	menus.cpp	55;"	d	file:
hidewindow	window.cpp	/^int Editor::hidewindow(void) {$/;"	f	class:Editor
hidewindowind	helpindex.h	/^short hidewindowind[]={15,16,};$/;"	v
hidewindowname	helptext.h	/^char hidewindowname[]="Hide (Alt-w,h)\\000\\000Get opened file from the screen without closing it \\000";$/;"	v
hsHandler	hyperscan.cpp	/^static int hsHandler(unsigned int id, unsigned long long from, unsigned long long endpos, unsigned int flags, void *ctx) {$/;"	f	file:
hsasciionce	hyperscan.cpp	/^static int hsasciionce(unsigned int id, unsigned long long from, unsigned long long endpos, unsigned int flags, void *ctx) {$/;"	f	file:
hyperbackunit	unitsearch.cpp	/^OFFTYPE Editor::hyperbackunit(SearchAim &aim) {$/;"	f	class:Editor
hyperdata	editor.h	/^hs_database_t *hyperdata;$/;"	m	class:Editor
hyperhit	editor.h	/^int hyperhit(const char *buf,const int len,int *offset) {$/;"	f	class:Editor
hyperscratch	editor.h	/^hs_scratch_t *hyperscratch ;$/;"	m	class:Editor
hypershown	hyperscan.cpp	/^OFFTYPE Editor::hypershown(SearchAim &aim) {$/;"	f	class:Editor
hyperstart	hyperscan.cpp	/^int Editor::hyperstart(SearchAim &aim,const unsigned int mode) {$/;"	f	class:Editor
icase	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
icaseregexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::icaseregexsearch(SearchAim &aim) {$/;"	f	class:Editor
icasesearch	bytesearch.cpp	/^OFFTYPE Editor::icasesearch(SearchAim &aim) {$/;"	f	class:Editor
in	dialog.h	/^	int in;$/;"	m	class:winsel
in	searchinterrupt.h	/^int op,in;$/;"	m	class:SearchInterrupt
inbarkey	menus.cpp	62;"	d	file:
inbuf	keystrokes.h	/^	int inbuf;$/;"	m	class:Keystrokes
ind	gethelp.cpp	/^	short *ind;$/;"	m	struct:help	file:
indatatype	editor.h	/^	short searchbytes,searchgrens,indatatype;$/;"	m	class:Editor
ineditproc	editor.h	/^static int (Editor::*ineditproc[])(void);$/;"	m	class:Editor
ineditproc	procview.cpp	/^int (Editor::*Editor::ineditproc[])(void)={$/;"	v
infodisk	memory.h	/^	Diskinfo *infodisk;	$/;"	m	class:Memory
init	rbtree.cpp	/^void Tree::init(void) {$/;"	f	class:Tree
init	selectsearch.h	/^	SearchInit init;$/;"	m	struct:__anon14
initcursorinfo	screen.cpp	/^HANDLE initcursorinfo(void) {$/;"	f
initdialog	dialog.h	485;"	d
initfilter	filter.cpp	/^char*	initfilter(const char *str, Filterprocptr func) {$/;"	f
inithelphash	gethelp.cpp	/^void inithelphash(void) {$/;"	f
initproc	execproc.h	/^	int (Editor::**initproc)(void);$/;"	m	class:Proclist
initprociter	execproc.h	/^	 int initprociter;$/;"	m	class:Proclist
initproclist	execproc.h	21;"	d
initprocnr	execproc.h	/^	int initprocnr;$/;"	m	class:Proclist
initscreen	dialog.cpp	/^int initscreen(void) {$/;"	f
initsearch	gnuasciiregex.cpp	/^void Editor::initsearch( void) {$/;"	f	class:Editor
initundo	undo.cpp	/^void Editor::initundo(void) {$/;"	f	class:Editor
initword	bedrcproc.cpp	/^initword(bedrcbin){$/;"	f
initword	bedrcproc.cpp	/^initword(call_on_open){$/;"	f
initword	bedrcproc.cpp	/^initword(call_on_start){$/;"	f
initword	bedrcproc.cpp	/^initword(call_on_switch){$/;"	f
initword	bedrcproc.cpp	/^initword(color){$/;"	f
initword	bedrcproc.cpp	/^initword(context){$/;"	f
initword	bedrcproc.cpp	/^initword(datatypedir){$/;"	f
initword	bedrcproc.cpp	/^initword(defaultcolor){$/;"	f
initword	bedrcproc.cpp	/^initword(deletemenu)	{$/;"	f
initword	bedrcproc.cpp	/^initword(deletemenuitem)	{$/;"	f
initword	bedrcproc.cpp	/^initword(editor)	{$/;"	f
initword	bedrcproc.cpp	/^initword(keys){$/;"	f
initword	bedrcproc.cpp	/^initword(macrodir){$/;"	f
initword	bedrcproc.cpp	/^initword(menu)	{$/;"	f
initword	bedrcproc.cpp	/^initword(menuitem)	$/;"	f
initword	bedrcproc.cpp	/^initword(newfilesize){$/;"	f
initword	bedrcproc.cpp	/^initword(options)	{$/;"	f
initword	bedrcproc.cpp	/^initword(plugin){$/;"	f
initword	bedrcproc.cpp	/^initword(plugindir){$/;"	f
initword	bedrcproc.cpp	/^initword(setenv)	{$/;"	f
initword	readconfig.cpp	804;"	d	file:
initword	readconfig.cpp	808;"	d	file:
initword	readconfig.cpp	813;"	d	file:
initword	readconfig.cpp	815;"	d	file:
initword	readconfig.cpp	822;"	d	file:
initword	readconfig.cpp	823;"	d	file:
initword	readconfig.cpp	830;"	d	file:
initword	readconfig.cpp	880;"	d	file:
initword	readconfig.cpp	881;"	d	file:
initword	readconfig.cpp	899;"	d	file:
initwordname	readconfig.cpp	803;"	d	file:
initwordname	readconfig.cpp	806;"	d	file:
initwordname	readconfig.cpp	812;"	d	file:
initwordname	readconfig.cpp	816;"	d	file:
initwordname	readconfig.cpp	821;"	d	file:
initwordname	readconfig.cpp	824;"	d	file:
initwordname	readconfig.cpp	829;"	d	file:
initwordname	readconfig.cpp	878;"	d	file:
initwordname	readconfig.cpp	882;"	d	file:
initwordname	readconfig.cpp	897;"	d	file:
initwordproc	bedrcproc.cpp	/^initwordproc(defaulthandler)	{$/;"	f
initwordproc	readconfig.cpp	802;"	d	file:
initwordproc	readconfig.cpp	807;"	d	file:
initwordproc	readconfig.cpp	811;"	d	file:
initwordproc	readconfig.cpp	814;"	d	file:
initwordproc	readconfig.cpp	828;"	d	file:
initwordproc	readconfig.cpp	879;"	d	file:
initwordproc	readconfig.cpp	883;"	d	file:
initwordproc	readconfig.cpp	898;"	d	file:
initwordptr	readconfig.cpp	832;"	d	file:
inmem	editlimits.cpp	/^inline long long inmem(long long x) { $/;"	f
inmenuproc	editor.h	/^static int (Editor::*inmenuproc[])(void);$/;"	m	class:Editor
inmenuproc	procview.cpp	/^int (Editor::*Editor::inmenuproc[])(void)={$/;"	v
inp	keystrokes.h	/^	int *inp,out,max;$/;"	m	class:Keystrokes
input	input.cpp	/^int Editor::input(void) {$/;"	f	class:Editor
input	marks.h	/^keyinput input;$/;"	m	class:keylookup
inputget	inout.cpp	/^int Editor::inputget(char *answer,const char *format,...) {$/;"	f	class:Editor
inputind	helpindex.h	/^short inputind[]={16,17,46,108,155,217,236,304,};$/;"	v
inputname	helptext.h	/^char inputname[]="Input (Alt-e,i)\\000\\000Modifies current data item. \\000With this procedure you edit the current item and only after \\000pressing Enter the modifications are inserted.\\000Certain datatypes you can't edit without this procedure (e.g.\\000Float and Time_t).\\000If you don't use this procedure, then the data item is converted to\\000and from binary format after every key you press.\\000";$/;"	v
insert	rbtree.cpp	/^void Tree::insert(Data dat) {$/;"	f	class:Tree
insertshown	file.cpp	/^int Editor::insertshown(char *gegs, off_t endf) {$/;"	f	class:Editor
insertshownpos	file.cpp	/^int Editor::insertshownpos(const OFFTYPE posf,const char *const gegs, const off_t endf) {$/;"	f	class:Editor
inserttoken	readconfig.cpp	/^static const char  inserttoken[]="+";$/;"	v	file:
inserttokenlen	readconfig.cpp	/^static const int inserttokenlen=(sizeof(inserttoken)-1);$/;"	v	file:
installpart	parts.cpp	/^int Editor::installpart(ScreenPart *sub) {$/;"	f	class:Editor
installpart	parts.cpp	/^int Editor::installpart(ScreenPart *sub,int separ) {$/;"	f	class:Editor
instance	screenpart.h	52;"	d
inundo	undo.cpp	/^int Editor::inundo(OFFTYPE pos,unsigned char *buf,int size) {$/;"	f	class:Editor
invisiblecursor	screen.cpp	/^CONSOLE_CURSOR_INFO  startupcursor,invisiblecursor; 	$/;"	v
isasciimode	search.cpp	37;"	d	file:
isashell	suspend.cpp	/^int isashell(pid_t pid) {$/;"	f
isbiosdisk	memory.h	/^inline BOOL isbiosdisk() {return infodisk!=NULL;};$/;"	f	class:Memory
isblockdev	disk.cpp	/^bool isblockdev(const char * const devname,int maj,int min) {$/;"	f
iscontain	contain.h	/^inline int iscontain(const ScreenPart *part) {$/;"	f
isdigitmode	search.cpp	45;"	d	file:
isdir	glob.c	/^int isdir(const char *path) {$/;"	f
isdiskdevice	memory.cpp	/^int isdiskdevice(char *filename) $/;"	f
isel	ascii.cpp	/^inline int Ascii::isel(const int ch) const {$/;"	f	class:Ascii
isel	hassub.cpp	/^int HasSub::isel(const int ch) const {$/;"	f	class:HasSub
isel	multidigit.cpp	/^	inline int MultiDigit::isel(const int key) const { int el=chars2dig(key); return (el>=0&&el<type); }$/;"	f	class:MultiDigit
isel	repeat.cpp	/^int Repeat::isel(const int ch) const{return part->isel(ch);}$/;"	f	class:Repeat
isfloppy	disk.cpp	/^int isfloppy(const char *volume,char *buf) {$/;"	f	class:Volumes
isleaf	hassub.h	/^inline int isleaf(ScreenPart *part) {$/;"	f
islist	gnusearch.cpp	52;"	d	file:
islist	hyperscan.cpp	37;"	d	file:
islist	re2search.cpp	18;"	d	file:
islist	unitsearch.cpp	11;"	d	file:
islow	editor.h	/^inline int islow(const int ch) { return (ch>='a'&&ch<='z');}$/;"	f
ismenu	menus.cpp	/^int ismenu=-1;$/;"	v
ismessage	editor.h	/^int ismessage;$/;"	m	class:Editor
isnewfile	memory.h	/^	inline bool isnewfile() { return filehandle== MY_INVALID_HANDLE_VALUE;};$/;"	f	class:Memory
isparent	screenpart.cpp	/^int Parent::isparent(const char *nam) const {$/;"	f	class:Parent
isparent	screenpart.h	/^   	int isparent(const char *nam) const {return getdesc()->isparent(nam);}$/;"	f	class:ScreenPart
isprint	dialog.cpp	31;"	d	file:
isprint	dialog.cpp	32;"	d	file:
isrecording	editmacros.cpp	/^int isrecording=0;$/;"	v
isregex	search.cpp	48;"	d	file:
isrepeat	repeat.h	/^inline int isrepeat(ScreenPart *part) {$/;"	f
isresized	cursesinit.cpp	/^	int  nocurses_init::isresized(void) { \/*Reset screen for program *\/$/;"	f	class:nocurses_init
isstart	keyinput.h	/^	inline int isstart(void) {return keyhead==treebase;};$/;"	f	class:keyinput
isstart	marks.cpp	/^int keylookup::isstart(void) {$/;"	f	class:keylookup
issubindex	hassub.h	/^	virtual inline int issubindex(void)  {$/;"	f	class:HasSub
isup	editor.h	/^inline int isup(const int ch) { return (ch>='A'&&ch<='Z');}$/;"	f
item	dialog.cpp	/^	item::item(const char *txt1,int ya,int xb) {$/;"	f	class:item
item	dialog.h	/^	item(void) {;};$/;"	f	class:item
item	dialog.h	/^class item {$/;"	c
itemlist	dialog.cpp	/^	itemlist::itemlist(const char *txt,char **str,int nr,int ypos,int xpos,int &a,int begin,int hight,int len):$/;"	f	class:itemlist
itemlist	dialog.h	/^class itemlist:public item {$/;"	c
itemptr	hash.h	/^ POINTER *Hash::itemptr(char *label)$/;"	f	class:Hash
itemshowptr	dialog.h	/^typedef item *itemshowptr;$/;"	t
iter	marks.h	/^struct mark *head,begin,*iter;$/;"	m	class:keylookup	typeref:struct:keylookup::
iunequal	bytesearch.cpp	/^inline int iunequal(const void *onev,const void *twov,size_t len) {$/;"	f
justopened	editor.h	/^char justopened;$/;"	m	class:Editor
keepAlign	editor.h	/^uint8_t List=0, Edge=false, Keep=false,keepAlign=false,keepUnit=false;$/;"	m	struct:SearchTyper
keepUnit	editor.h	/^uint8_t List=0, Edge=false, Keep=false,keepAlign=false,keepUnit=false;$/;"	m	struct:SearchTyper
key	editor.h	/^	 const char *key;$/;"	m	struct:Editor::Menugeg
key	editor.h	/^	int key;$/;"	m	struct:Editor::menuel
key	editor.h	/^	int len,nu,key;$/;"	m	struct:Editor::menu
key	rbtree.cpp	61;"	d	file:
key_down	builtinkeys.h	26;"	d
key_next	builtinkeys.h	24;"	d
key_prev	builtinkeys.h	25;"	d
key_return	builtinkeys.h	28;"	d
key_up	builtinkeys.h	27;"	d
keyavailable	main.cpp	/^int keyavailable=ERR;$/;"	v
keybuf	main.cpp	/^static int keybuf[10],keyiter=0,keymax=0;$/;"	v	file:
keyconfig	keyconfig.cpp	/^int keyconfig(char *filename=NULL) {$/;"	f
keydef	dialog.cpp	380;"	d	file:
keydef	dialog.cpp	383;"	d	file:
keydef	keyproc.cpp	33;"	d	file:
keydef	keyproc.cpp	41;"	d	file:
keydeffer	keyconfig.cpp	/^struct keydeffer {$/;"	s	file:
keydefto	keyconfig.cpp	/^KeydefType keydefto[]={$/;"	v
keyedit	keyproc.cpp	/^KeyEdit keyedit;$/;"	v
keyhead	keyinput.h	/^	struct tree *keyhead;$/;"	m	class:keyinput	typeref:struct:keyinput::tree
keyhead	marks.h	/^struct tree treebase,*keyhead;$/;"	m	class:keylookup	typeref:struct:keylookup::
keyinmenu	menus.cpp	/^static int keyinmenu='q';$/;"	v	file:
keyinput	keyinput.h	/^	keyinput( void (*fun)(class keyinput *inp))  { $/;"	f	class:keyinput
keyinput	keyinput.h	/^	keyinput(void) { $/;"	f	class:keyinput
keyinput	keyinput.h	/^class keyinput {$/;"	c
keyiter	main.cpp	/^static int keybuf[10],keyiter=0,keymax=0;$/;"	v	file:
keylabel	dialog.cpp	175;"	d	file:
keylabel	dialog.cpp	179;"	d	file:
keylabel	procview.cpp	59;"	d	file:
keylabel	procview.cpp	63;"	d	file:
keylabel	procview.cpp	64;"	d	file:
keylabel	readconfig.cpp	423;"	d	file:
keylabeldef	keyproc.cpp	32;"	d	file:
keylabeldef	keyproc.cpp	42;"	d	file:
keylookup	marks.cpp	/^keylookup::keylookup():total(0) {keyhead=&treebase;memset(keyhead,0,sizeof(treebase));iter=head=&begin;};$/;"	f	class:keylookup
keylookup	marks.h	/^class keylookup {$/;"	c
keymap	keyproc.cpp	/^ int KeyEdit::keymap(unsigned char *keybuf,int nrkeys, int (Editor::*proc)(void)) {$/;"	f	class:KeyEdit
keymap	marks.h	/^inline int keymap(unsigned char *keys,int nr, struct mark *mark ) {$/;"	f	class:keylookup
keymaped	keyproc.cpp	/^int KeyEdit::keymaped(int (Editor::*proc)(void),int nr,...) {$/;"	f	class:KeyEdit
keymark	marken.cpp	/^int Editor::keymark(void) {$/;"	f	class:Editor
keymarkind	helpindex.h	/^short keymarkind[]={15,16,};$/;"	v
keymarkname	helptext.h	/^char keymarkname[]="Make (Alt-k,m)\\000\\000Set mark \\000";$/;"	v
keymax	main.cpp	/^static int keybuf[10],keyiter=0,keymax=0;$/;"	v	file:
keypos	editor.h	/^	char keypos;$/;"	m	struct:Editor::menu
keypos	editor.h	/^	char keypos;$/;"	m	struct:Editor::menuel
keys	marks.h	/^	unsigned char *keys;$/;"	m	struct:keylookup::mark
keyscr	main.cpp	238;"	d	file:
keyseq	keyinput.cpp	/^intptr_t keyinput::keyseq(unsigned char input) {$/;"	f	class:keyinput
keysnr	readconfig.cpp	/^int keysnr=sizeof(keysyms)\/sizeof(char *);$/;"	v
keystring	procview.cpp	/^char *keystring(unsigned char *in,char *uit,int len) {$/;"	f
keysyms	readconfig.cpp	/^const char *keysyms[]= { $/;"	v
keywordargs	readconfig.cpp	798;"	d	file:
keywordname	readconfig.cpp	/^const char *keywordname[] ={$/;"	v
keywordnr	readconfig.cpp	/^int keywordnr=sizeof(keywordname)\/sizeof(char*);$/;"	v
keywordproc	readconfig.cpp	/^keywordreturn  (*keywordproc[])(keywordargs) ={$/;"	v
keywordreturn	readconfig.cpp	799;"	d	file:
kgetch	inout.cpp	175;"	d	file:
kill	file.cpp	/^void kill(pid_t,int) {}$/;"	f
l	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
l	dialog.h	/^	line l;$/;"	m	class:lineitem
lab	readconfig.cpp	/^	const char lab[12];$/;"	m	struct:attr	file:
lab	readconfig.cpp	/^struct nametonum {char lab[8];int num;} colo[] = { {"black",COLOR_BLACK}, {"red",COLOR_RED}, {"green",COLOR_GREEN}, {"yellow",COLOR_YELLOW}, {"blue",COLOR_BLUE}, {"magentA",COLOR_MAGENTA}, {"cyan",COLOR_CYAN}, {"white",COLOR_WHITE},{"default",-1}};$/;"	m	struct:nametonum	file:
label	dialog.cpp	/^void label(int y,int x,const char *str) {$/;"	f
label	filter.h	/^	char *label;$/;"	m	class:Filter
label	hash.h	/^		  char *label;$/;"	m	struct:Hash::deel
label	screenpart.h	/^	char label[maxlabel];$/;"	m	class:ScreenPart
last	dialog.h	/^	orcheck2<T> *last;$/;"	m	class:Common2
last	macros.cpp	/^	int Keystrokes::last(void) {$/;"	f	class:Keystrokes
lastaim	editor.h	/^	 SearchAim lastaim;$/;"	m	class:Editor
lastfile	window.cpp	/^int Editor::lastfile(void) {$/;"	f	class:Editor
lastfileind	helpindex.h	/^short lastfileind[]={15,16,};$/;"	v
lastfilename	helptext.h	/^char lastfilename[]="Last (Alt-w,t)\\000\\000Goto last opened file. \\000";$/;"	v
lastfilter	screenpart.h	/^	int firstfilter,lastfilter,maxfilter;$/;"	m	class:ScreenPart
lastfiltername	filter.cpp	/^char *ScreenPart::lastfiltername(void) {$/;"	f	class:ScreenPart
lastgotopos	editor.h	/^	OFFTYPE filepos ,lastgotopos;$/;"	m	class:Editor
lasthelp	gethelp.cpp	/^int lasthelp(void) {$/;"	f
lastmenuitem	menus.cpp	/^int Editor::lastmenuitem(void) {$/;"	f	class:Editor
lastmenuitemind	helpindex.h	/^short lastmenuitemind[]={};$/;"	v
lastmenuitemname	helptext.h	/^char lastmenuitemname[]="Goto last menu element. See firstmenuitem for more information. (End).\\000";$/;"	v
lastmenunr	menus.cpp	/^static int lastmenunr=standardmenusize-1;$/;"	v	file:
lastundo	editor.h	/^int lastundo,redos,beginundo,undohalf;$/;"	m	class:Editor
lcconfig	dialog.h	507;"	d
lcconfig	dialog.h	514;"	d
lcsconfig	dialog.h	508;"	d
lcsconfig	dialog.h	515;"	d
leave	dialog.cpp	/^	void winsel::leave(void) {$/;"	f	class:winsel
leave	screenpart.h	/^	void leave(void) {oldhalf=half;half=maxres;};$/;"	f	class:ScreenPart
leaveok	screen.h	51;"	d
leaveprocedure	bedrcproc.cpp	2;"	d	file:
leeg	hash.h	/^ void Hash::leeg(void) {$/;"	f	class:Hash
left	rbtree.cpp	54;"	d	file:
left	rbtree.h	/^	struct treeel *left;$/;"	m	struct:treeel	typeref:struct:treeel::treeel
left	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
leftrotate	rbtree.cpp	/^void Tree::leftrotate(Treel *x) {$/;"	f	class:Tree
leftside	rbtree.cpp	/^Treel *Tree::leftside(Key k) { $/;"	f	class:Tree
leftside	rbtree.cpp	/^Treel *Tree::leftside(Treel *x,Key k) {$/;"	f	class:Tree
leftvis	visuals.h	/^int leftvis(ScreenPart *part) {return (part->editor->visualoffset-part->left);}$/;"	f
len	digitstring.h	/^	int len,max;$/;"	m	struct:mint
len	editor.h	/^	int len,nu,key;$/;"	m	struct:Editor::menu
len	editor.h	/^	int len;$/;"	m	struct:undo
len	marks.h	/^	 uint32_t len;$/;"	m	struct:keylookup::mark
len	searchaim.h	/^	int len;$/;"	m	struct:__anon13
lensel	editor.h	/^	static OFFTYPE lensel;$/;"	m	class:Editor
lensel	select.cpp	/^OFFTYPE Editor::lensel=0;$/;"	m	class:Editor	file:
levelout	withcontain.cpp	/^int Editor::levelout(void) {$/;"	f	class:Editor
leveloutind	helpindex.h	/^short leveloutind[]={19,20,78,150,175,204,227,};$/;"	v
leveloutname	helptext.h	/^char leveloutname[]="Levelout (Alt-y,v)\\000\\000Applies if active datatype is a composed\/record datatype.\\000With this function the composed datatype is removed so that the item(s)\\000endup at a higher level.\\000It can be used in two cases:\\000	1. a nested composed;\\000	2. a composed containing only one datatype.\\000";$/;"	v
lgetfilesize	memory.h	/^inline OFFTYPE lgetfilesize(FILEHANDLE han) {$/;"	f
lgetfilesize	memory.h	/^inline OFFTYPE lgetfilesize(FILEHANDLE handle) {$/;"	f
line	dialog.cpp	/^	line::line(const char *name,int &p, int xpos,int ypos,int s,int maxgegs):endptr(p),size(s),bij(0),bufgegsize(maxgegs-1),x(xpos),y(ypos) {$/;"	f	class:line
line	dialog.cpp	/^	line::line(const char *name,int xpos,int ypos,int s,int maxgegs):end(strlen(name)),endptr(end),size(s),bij(0),bufgegsize(maxgegs-1),x(xpos),y(ypos) {$/;"	f	class:line
line	dialog.h	/^class line {$/;"	c
linedown	move.cpp	/^int Editor::linedown(void) {$/;"	f	class:Editor
linedownind	helpindex.h	/^short linedownind[]={};$/;"	v
linedownname	helptext.h	/^char linedownname[]="Down one line (Down).\\000";$/;"	v
lineitem	dialog.h	/^	lineitem(const char *txt,char *name,int ypos,int xpos,int s=35,int maxgeg=80): item(txt,ypos,xpos),l(name,xpos+strlen(txt),ypos,s,maxgeg),var(name) {$/;"	f	class:lineitem
lineitem	dialog.h	/^	lineitem(const char *txt,int &len,char *name,int ypos,int xpos,int s=35,int maxgeg=80): item(txt,ypos,xpos),l(name,len,xpos+strlen(txt),ypos,s,maxgeg),var(name)  {$/;"	f	class:lineitem
lineitem	dialog.h	/^class lineitem:public item {$/;"	c
liner	dialog.h	464;"	d
linerlen	dialog.h	465;"	d
linerlennr	dialog.h	469;"	d
linerlennrmax	dialog.h	470;"	d
linernr	dialog.h	466;"	d
linernrmax	dialog.h	468;"	d
linernrmaxaction	dialog.h	467;"	d
lineup	move.cpp	/^int Editor::lineup(void) {$/;"	f	class:Editor
lineupind	helpindex.h	/^short lineupind[]={};$/;"	v
lineupname	helptext.h	/^char lineupname[]="Up one line (Up).\\000";$/;"	v
linkdynproc	readconfig.cpp	1002;"	d	file:
linkdynproc	readconfig.cpp	997;"	d	file:
linkdynprocnames	readconfig.cpp	1003;"	d	file:
linkdynprocnames	readconfig.cpp	998;"	d	file:
linkdynprocnr	readconfig.cpp	1001;"	d	file:
linkdynprocnr	readconfig.cpp	996;"	d	file:
list	dialog.h	449;"	d
listall	dialog.h	448;"	d
listfiles	window.cpp	/^	int Editor::listfiles(void) {$/;"	f	class:Editor
listfilesind	helpindex.h	/^short listfilesind[]={15,16,};$/;"	v
listfilesname	helptext.h	/^char listfilesname[]="List (Alt-w,l)\\000\\000List opened files. Press Enter to edit selected file.\\000";$/;"	v
listshowhandler	hyperscan.cpp	/^static int listshowhandler(unsigned int id, unsigned long long from, unsigned long long endpos, unsigned int flags, void *ctx) {$/;"	f	file:
listthread	search.cpp	/^void * listthread(void *arg) {$/;"	f
listtypes	typelist.cc	/^int Editor::listtypes(void) {$/;"	f	class:Editor
listtypesind	helpindex.h	/^short listtypesind[]={15,16,90,};$/;"	v
listtypesname	helptext.h	/^char listtypesname[]="List (Alt-d,t)\\000\\000List of all datatypes. Use movement keys to select one of them and press \\000Return to create it.\\000";$/;"	v
loadbiosdisk	memory.cpp	/^BOOL loadbiosdisk(void) {$/;"	f
loaddatatype	withcontain.cpp	/^int Editor::loaddatatype(char *gegs,int endf,int addfield) {$/;"	f	class:Editor
loghandle	inout.cpp	/^const int loghandle=logmessup();$/;"	v
logmessup	inout.cpp	/^int logmessup(void) {$/;"	f
logname	inout.cpp	/^char logname[maxlogname];$/;"	v
lookkey	keyproc.h	58;"	d
lookup	keyproc.h	/^inline void  *lookup(unsigned char input) {$/;"	f	class:KeyEdit
lookup	marks.h	/^inline struct keylookup::mark *lookup(unsigned char ch) {$/;"	f	class:keylookup
low	ascii.cpp	42;"	d	file:
lowborder	move.cpp	/^int Editor::lowborder(void) {return (editpos\/parts[mode]->getbytes())*parts[mode]->getbytes();};$/;"	f	class:Editor
lowch	dialog.h	/^	char lowch;$/;"	m	class:item
lowup	ascii.cpp	44;"	d	file:
lukt	readconfig.cpp	/^int lukt=get_assume_default_colors();$/;"	v
macrodirectory	editmacros.cpp	/^char macrodirectory[BEDSMAXPATH]=".";	$/;"	v
macroend	editmacros.cpp	/^char macroend[]="\\276\\320bed end";$/;"	v
macroendlen	editmacros.cpp	/^const int macroendlen=sizeof(macroend)-1;$/;"	v
macrolen	editmacros.cpp	/^const int macrolen=sizeof(macrosign)-1;$/;"	v
macrosign	editmacros.cpp	/^char macrosign[]="\\276\\320bed macro";$/;"	v
main	dialog.cpp	/^int main(int argc,char **argv) {$/;"	f
main	dialog.cpp	/^void main(int argc,char **argv) {$/;"	f
main	dialog.cpp	/^void main(void) {$/;"	f
main	digitstring.cpp	/^int main(void) {$/;"	f
main	expandfilename.cpp	/^int main(void) {$/;"	f
main	getfree.cpp	/^int main(void) {$/;"	f
main	getlabel.cpp	/^void main(int argc,char **argv) {$/;"	f
main	glob.c	/^void main(int argc, char** argv) {$/;"	f
main	main.cpp	/^int main(int argc, char **argv) $/;"	f
main	menus.cpp	/^int main(void) {$/;"	f
main	rbtree.cpp	/^int main( int argc, char **argv )$/;"	f
main	readconfig.cpp	/^int main(int argc,char **argv) {$/;"	f
main	sparsecp.cpp	/^int main(int argc,char **argv){$/;"	f
main	support.cpp	/^void main(void) {$/;"	f
makeattr	readconfig.cpp	/^int makeattr(char *str) {$/;"	f
makebytes	convert.h	/^inline int makebytes(ScreenPart *part,unsigned char *uit,int maxuit,unsigned char *in, int inlen) {$/;"	f
makehelp	gethelp.cpp	/^int makehelp(char *text,int len,int  (Editor::*proc)(void)) {$/;"	f
makekeys	readconfig.cpp	/^int makekeys(char *str) {$/;"	f
makemenu	readconfig.cpp	/^int makemenu(char *strin) {$/;"	f
makemenuitem	readconfig.cpp	/^int makemenuitem(char *strin) {$/;"	f
makesearchdataname	search.cpp	59;"	d	file:
makevisible	screenpart.cpp	/^int Editor::makevisible(ScreenPart *part,int pos) {$/;"	f	class:Editor
margc	main.cpp	/^int margc,miter=1;$/;"	v
margv	main.cpp	/^char **margv;$/;"	v
mark	marks.h	/^		struct mark *mark;$/;"	m	union:keylookup::tree::__anon10	typeref:struct:keylookup::tree::__anon10::mark
mark	marks.h	/^struct mark  {$/;"	s	class:keylookup
markcmp	marks.cpp	/^static int markcmp(const void *one, const void *two) {$/;"	f	file:
markdirectory	marken.cpp	/^char markdirectory[BEDSMAXPATH]=".";	$/;"	v
marklen	marken.cpp	/^const int marklen=sizeof(marksign)-1;$/;"	v
markselect	marken.cpp	/^template<>  struct keylookup::mark *Editor::markselect<1>(const char *prompt)  {$/;"	f	class:Editor
marksend	marken.cpp	/^char marksend[]="\\276\\320bed end";$/;"	v
marksendlen	marken.cpp	/^const int marksendlen=sizeof(marksend)-1;$/;"	v
marksign	marken.cpp	/^char marksign[]="\\276\\320bed marks of ";$/;"	v
marksptr	editor.h	/^keylookup * const marksptr=new keylookup;$/;"	m	class:Editor
mask	dialog.cpp	/^struct filesym { DWORD mask; char show;}; $/;"	m	struct:filesym	file:
matchlen	searchaim.h	/^	int matchlen;$/;"	m	struct:__anon13
max	digitstring.h	/^	int len,max;$/;"	m	struct:mint
max	keystrokes.h	/^	int *inp,out,max;$/;"	m	class:Keystrokes
maxbase	parts.cpp	42;"	d	file:
maxbase	search.cpp	35;"	d	file:
maxbytes	parts.cpp	41;"	d	file:
maxbytes	search.cpp	34;"	d	file:
maxbytes	withcontain.cpp	566;"	d	file:
maxcalcbytes	multidigit.cpp	/^static int maxcalcbytes=(int)floor(log(MAXDOUBLE )\/log((double)256.0));$/;"	v	file:
maxdeath	main.cpp	/^int maxdeath=5,gossip=0;$/;"	v
maxedit	editor.cpp	/^int maxedit=10,nredit=0, editfocus=-1,startnonactive=0;$/;"	v
maxfilter	screenpart.h	/^	int firstfilter,lastfilter,maxfilter;$/;"	m	class:ScreenPart
maxlabel	screenpart.h	/^const int maxlabel=80;$/;"	v
maxlen	typelist.cc	/^int datatypes::maxlen=0,datatypes::nr=0,datatypes::sorted=1;$/;"	m	class:datatypes	file:
maxlen	typelist.h	/^	static int maxlen,nr,sorted;$/;"	m	class:datatypes
maxliner	parts.cpp	674;"	d	file:
maxlogname	inout.cpp	/^const int maxlogname=256;$/;"	v
maxmenus	maxmenus.h	/^const int maxmenus=30;$/;"	v
maxmenusize	menus.cpp	/^int maxmenusize=0;$/;"	v
maxmessagebuf	inout.cpp	/^const int maxmessagebuf=200;$/;"	v
maxname	editor.h	/^	int maxname;$/;"	m	struct:Editor::menu
maxnum	dialog.cpp	56;"	d	file:
maxnum	digitstring.cpp	27;"	d	file:
maxnum	memory.h	93;"	d
maxnum	memory.h	95;"	d
maxnumstr	editor.h	/^	int maxnumstr, numbase;$/;"	m	class:Editor
maxof	main.h	/^inline int maxof(int een,int twee) {return ((een>twee)?een:twee);}$/;"	f
maxorder	parts.cpp	592;"	d	file:
maxparts	editor.h	/^	int maxparts;$/;"	m	class:Editor
maxres	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
maxsubparts	contain.h	/^	int maxsubparts;$/;"	m	class:Contains
maxtable	keyinput.cpp	62;"	d	file:
maxtext	dialog.h	/^	enum {maxtext=80};$/;"	e	enum:item::__anon5
maxtomenu	menus.cpp	/^const int maxtomenu=maxmenus;$/;"	v
maxvirtualwidth	parts.cpp	/^long maxvirtualwidth= INT_MAX-1;$/;"	v
mem	editor.h	/^	Memory mem;$/;"	m	class:Editor
mem	viewbuf.h	/^Memory &mem;$/;"	m	class:Viewbuf
membij	input.cpp	30;"	d	file:
memhead	rbtree.h	/^struct memhead {$/;"	s
memlowcpy	editor.h	/^inline void *memlowcpy(void * dest, const void * src, size_t len)   {$/;"	f
memorize	memed.cpp	/^void Editor::memorize(void) {if(changed) {$/;"	f	class:Editor
memoryexceeded	main.cpp	/^int memoryexceeded=0;$/;"	v
menu	editor.h	/^struct menu {$/;"	s	class:Editor
menuel	editor.h	/^struct menuel {$/;"	s	class:Editor
menuiter	editor.h	/^static int menuiter,menunu;$/;"	m	class:Editor
menuiter	menus.cpp	/^int Editor::menuiter=0;$/;"	m	class:Editor	file:
menukey	builtinkeys.h	22;"	d
menukey	keyinput.h	89;"	d
menuline	menus.cpp	188;"	d	file:
menulist	editor.h	/^static struct menu *menulist[maxmenus];$/;"	m	class:Editor	typeref:struct:Editor::menu
menulist	menus.cpp	/^struct Editor::menu *Editor::menulist[maxmenus];$/;"	m	class:Editor	typeref:struct:Editor::	file:
menumake	keyconfig.cpp	75;"	d	file:
menumake	keyconfig.cpp	77;"	d	file:
menumake	menus.cpp	131;"	d	file:
menumake	menus.cpp	146;"	d	file:
menumake	menus.cpp	148;"	d	file:
menumake	menus.cpp	150;"	d	file:
menumake	menus.cpp	154;"	d	file:
menumake	menus.cpp	161;"	d	file:
menumake	menus.cpp	163;"	d	file:
menumake	menus.cpp	165;"	d	file:
menumake	menus.cpp	224;"	d	file:
menumake	menus.cpp	228;"	d	file:
menumake	menus.cpp	237;"	d	file:
menumake	menus.cpp	242;"	d	file:
menumake	menus.cpp	261;"	d	file:
menumake	menus.cpp	34;"	d	file:
menumake	menus.cpp	36;"	d	file:
menumk	menus.cpp	/^struct Editor::menu *Editor::menumk(int x,int el,struct Menugeg pro[],const char *under) {$/;"	f	class:Editor
menunu	editor.h	/^static int menuiter,menunu;$/;"	m	class:Editor
menunu	menus.cpp	/^int Editor::menunu=-1;$/;"	m	class:Editor	file:
menuon	main.cpp	/^int menuon=1;$/;"	v
menupos	editmacros.cpp	/^static int menupos=-1;$/;"	v	file:
menuproc	menu.h	21;"	d
menuproc	menufuncs.cpp	29;"	d	file:
menuprocbody	menus.cpp	133;"	d	file:
menuprock	menu.h	22;"	d
menuresized	menus.cpp	/^int Editor::menuresized(void){			$/;"	f	class:Editor
menus	menus.cpp	/^int Editor::menus(void) {$/;"	f	class:Editor
menustructs	menus.cpp	/^int Editor::menustructs(void) {$/;"	f	class:Editor
mess	readconfig.cpp	/^char mess[MESSSIZE];$/;"	v
message	inout.cpp	/^ int Editor::message(const char *format ...) {$/;"	f	class:Editor
messagebuf	inout.cpp	/^char messagebuf[maxmessagebuf]="";$/;"	v
middlepage	move.cpp	/^int Editor::middlepage(void) {$/;"	f	class:Editor
middlepageind	helpindex.h	/^short middlepageind[]={20,21,};$/;"	v
middlepagename	helptext.h	/^char middlepagename[]="Middle Pg (Alt-m, )\\000\\000Goto the middle of the page. \\000";$/;"	v
min	winsparsecp.cpp	/^template <typename T1,typename T2> min(T1 one,T2 two) {$/;"	f
minbl	viewbuf.h	/^int start,  shown, blnr,minbl;$/;"	m	class:Viewbuf
minimumcols	main.cpp	242;"	d	file:
minimumlines	main.cpp	243;"	d	file:
minnum	convert.h	28;"	d
minnum	convert.h	29;"	d
minnum	dialog.cpp	55;"	d	file:
minnum	getfree.cpp	59;"	d	file:
minnum	memory.h	92;"	d
minnum	memory.h	94;"	d
minnum	procview.cpp	260;"	d	file:
mint	digitstring.h	/^struct mint {$/;"	s
miter	main.cpp	/^int margc,miter=1;$/;"	v
mkfilescreen	dialog.cpp	/^void mkfilescreen(int ypos,int xpos,const char *com) {$/;"	f
mkfilterstr	screenpart.cpp	/^int	ScreenPart::mkfilterstr(char *str,int max) {$/;"	f	class:ScreenPart
mkground	readconfig.cpp	/^int mkground(char *forg) {$/;"	f
mklabel	contain.cpp	/^ void Contains::mklabel(void) {$/;"	f	class:Contains
mklabel	repeat.cpp	/^ void Repeat::mklabel(void) {$/;"	f	class:Repeat
mklabel	screenpart.cpp	/^void ScreenPart::mklabel(void) {$/;"	f	class:ScreenPart
mklow	editor.h	/^inline int mklow(const int ch) { return (isup(ch)?tolow(ch):ch);}$/;"	f
mkmenunum	editor.h	800;"	d
mkmenunum	editor.h	802;"	d
mkmenunum	menus.cpp	157;"	d	file:
mkmenunum	menus.cpp	167;"	d	file:
mkmenunum	menus.cpp	168;"	d	file:
mkmenuwindow	menus.cpp	/^WINDOW *mkmenuwindow(int lines,int cols,int x) {$/;"	f
mkmultimaxres	multidigit.cpp	/^int mkmultimaxres(int len, int b) {$/;"	f
mknumstr	editor.cpp	/^inline int mknumstr(int tmode,OFFTYPE num,char *buf,int buflen=MAXANT) {$/;"	f
mksparse	winsparsecp.cpp	/^bool mksparse(HANDLE hOutFile) {$/;"	f
mkstandout	marken.cpp	/^   int Editor::mkstandout(const OFFTYPE pos,const int len) {$/;"	f	class:Editor
mkup	editor.h	/^inline int mkup(const int ch) { return (islow(ch)?toup(ch):ch);}$/;"	f
mmap_page_size	bytesearch.cpp	/^const long mmap_page_size = (long) sysconf (_SC_PAGESIZE);$/;"	v
mmapfailed	memory.h	/^	Flag mmapfailed=1;$/;"	m	class:Memory
mmapgetblock	bytesearch.cpp	/^BEDS_SIZE_T Memory::mmapgetblock(MMAPBLOCKTYPE blocknr,char *buf) {$/;"	f	class:Memory
mmapgetblock	bytesearch.cpp	/^inline BEDS_SIZE_T Memory::mmapgetblock(BLOCKTYPE blocknr,char *buf) {return getblock(blocknr,buf);}$/;"	f	class:Memory
mmapgetblocker	bytesearch.cpp	85;"	d	file:
mmapgetblocker	bytesearch.cpp	88;"	d	file:
mmaptofile	macros.cpp	/^	int Keystrokes::mmaptofile(char *name) {$/;"	f	class:Keystrokes
mmaptofile	macros.cpp	/^int Keystrokes::mmaptofile(char *name) {$/;"	f	class:Keystrokes
mode	editor.h	/^	int mode;$/;"	m	class:Editor
modechanged	editor.cpp	/^int Editor::modechanged(void) {$/;"	f	class:Editor
modename	convert.h	/^inline const char *modename(DataType type) {$/;"	f
modified	editor.h	/^	int changed,modified;$/;"	m	class:Editor
move	screen.h	38;"	d
movepos	screenpart.cpp	/^int ScreenPart::movepos(int pos) {$/;"	f	class:ScreenPart
msdos_systypes	sys_types.h	/^SysType msdos_systypes[] = {$/;"	v
multi	digitstring.cpp	/^int multi(struct mint *uit,const struct mint *in,int keer) {$/;"	f
mvaddnstr	screen.h	58;"	d
mvaddnstr	screen.h	61;"	d
mvaddstr	screen.h	54;"	d
mvprintw	screen.h	67;"	d
mvprintw	screen.h	69;"	d
mvtakefile	dialog.cpp	/^const char *mvtakefile(int ypos,int xpos,const char *com,const char *pat) {$/;"	f
myalloc	myalloc.h	24;"	d
myalloc	myalloc.h	44;"	d
myallocar	myalloc.h	22;"	d
myallocar	myalloc.h	41;"	d
myallocarp	myalloc.h	23;"	d
myallocarp	myalloc.h	42;"	d
myallocarpr	myalloc.h	30;"	d
myallocarpr	myalloc.h	43;"	d
myallocp	myalloc.h	25;"	d
myallocp	myalloc.h	45;"	d
myallocpr	myalloc.h	32;"	d
myallocpr	myalloc.h	46;"	d
myatoi	parts.cpp	673;"	d	file:
mychdir	dialog.cpp	/^void			mychdir(const char *path) {$/;"	f
myfree	myalloc.h	26;"	d
myfree	myalloc.h	47;"	d
myfreear	myalloc.h	27;"	d
myfreear	myalloc.h	48;"	d
mygetcwd	dialog.cpp	/^char	*mygetcwd(char *name,int len) {$/;"	f
mykbhit	main.cpp	/^int mykbhit(void) {  $/;"	f
mymalloc	myalloc.cpp	/^void *mymalloc(size_t size) {$/;"	f
mymalloc	myalloc.h	52;"	d
mynewhandler	main.cpp	/^void mynewhandler(void) {$/;"	f
myrealloc	myalloc.h	31;"	d
myrealloc	myalloc.h	50;"	d
myreallocate	myalloc.cpp	/^char  *myreallocate(char *varname,int lench,int oldlench) {$/;"	f
myrefree	myalloc.h	33;"	d
myrefree	myalloc.h	49;"	d
mysigsetjmp	main.h	49;"	d
mysigsetjmp	main.h	53;"	d
mystrtol	search.cpp	98;"	d	file:
myswap	misc.h	/^inline void myswap(T &a,T &b) {$/;"	f
mytmpname	support.cpp	/^int mytmpname(char *buf,int len,const char *name) {$/;"	f
mytruncate64	memory.cpp	/^static int mytruncate64(const char * const filename,OFFTYPE filesize) {$/;"	f	file:
mywgetch	main.cpp	/^int mywgetch(WINDOW *win) {  $/;"	f
naarASCII	parts.cpp	/^int Editor::naarASCII(void) {$/;"	f	class:Editor
naarASCIIind	helpindex.h	/^short naarASCIIind[]={16,17,40,51,99,166,234,240,313,};$/;"	v
naarASCIIname	helptext.h	/^char naarASCIIname[]="Ascii (Alt-d,a)\\000\\000Create ascii datatype.\\000No print: \\000	character to show if byte is not printable.   \\000You can also decide which byte values are interpreted as printable\\000characters. Strict is ascii only, +161-255 adds byte value 161-255 \\000etc. \\000It is possible to make units of more then one character. The meaning of \\000separete\/add field is explained under unsigned integer help (Alt-d,i).\\000";$/;"	v
nam	keyconfig.cpp	105;"	d	file:
name	editor.h	/^	 const char *name;$/;"	m	struct:Editor::Menugeg
name	editor.h	/^	char *name;$/;"	m	struct:Editor::menu
name	editor.h	/^	char *name;$/;"	m	struct:Editor::menuel
name	filter.h	/^	const char *name;$/;"	m	class:Filter
name	keyconfig.cpp	/^	const char   *name;$/;"	m	struct:keydeffer	file:
name	keystrokes.h	/^	char *name;$/;"	m	class:Keystrokes
name	readconfig.cpp	/^		const char *name;$/;"	m	struct:gegs	file:
name	screenpart.h	/^	const char * const name;			$/;"	m	class:Parent
name	sys_types.h	/^	const char *name;$/;"	m	struct:_SysType
namebuf	file.cpp	335;"	d	file:
namebuf	file.cpp	936;"	d	file:
namedata	search.cpp	54;"	d	file:
namedir	support.cpp	/^int  namedir(char *buf,int i,const char *name) {$/;"	f
nameproc	procview.cpp	/^int (Editor::*nameproc(const char *str))(void) {$/;"	f
names	typelist.cc	/^char **datatypes::names=NULL;$/;"	m	class:datatypes	file:
names	typelist.h	/^	static 	char **names;$/;"	m	class:datatypes
nametonum	readconfig.cpp	/^struct nametonum {char lab[8];int num;} colo[] = { {"black",COLOR_BLACK}, {"red",COLOR_RED}, {"green",COLOR_GREEN}, {"yellow",COLOR_YELLOW}, {"blue",COLOR_BLUE}, {"magentA",COLOR_MAGENTA}, {"cyan",COLOR_CYAN}, {"white",COLOR_WHITE},{"default",-1}};$/;"	s	file:
nasuspend	suspend.cpp	/^int nasuspend(void) {$/;"	f
ncursesdelay	main.cpp	/^int ncursesdelay=1;$/;"	v
ndelay	screen.h	143;"	d
newchar	screenpart.cpp	/^int ScreenPart::newchar(int key) { $/;"	f	class:ScreenPart
newcontain	withcontain.cpp	/^int Editor::newcontain(void) {$/;"	f	class:Editor
newcontainind	helpindex.h	/^short newcontainind[]={14,15,84,147,204,264,334,400,455,524,595,645,713,781,819,892,940,1010,1066,1142,1204,1276,1345,1406,1472,};$/;"	v
newcontainname	helptext.h	/^char newcontainname[]="Sub (Alt-y,u)\\000\\000With this function you can create a composed datatype within another\\000composed datatype. First make a element of a composed datatype\\000the active datatype and then use this function (Alt-y,u)\\000to make a sub composed datatype around the active datatype.\\000After this you can add more datatypes to this sub composed datatype, \\000by using the \\"Add field\\" option while starting a new datatype or \\000by using Alt-y,r. New datatypes created with add field\\000are always added to the lowest composed datatype in which the active\\000datatype is contained. The message line shows what datatype is active.\\000Use Alt-y,t and Alt-y,c to change to the datatype\\000this datatype is contained in and back again. You can also make the\\000composed datatype the active datatype by placing the cursor between\\000two of it's member (child) datatypes.\\000Subcomposed datatypes can be useful if you want to use a filter for only\\000a subset of the members of a composed datatype.\\000For example a file consists of records of three ascii strings and you\\000like to exchange the position of the first two strings.\\000After creating three ascii strings of 10 in one record (composed datatype),\\000you set the cursor on the first field and press Alt-y,u. This\\000makes a subcomposed datatype around this field. To add the second field\\000to this composed datatype you set the cursor at the second field and\\000press Alt-y,r. Now you set the cursor between the first two \\000fields (or you press Alt-y,t) and you reorder with unit 10 using \\000Alt-y,o.\\000";$/;"	v
neweddid	main.cpp	/^Editor *neweddid( void) {$/;"	f
neweditor	main.cpp	/^Editor *neweditor(const char *const name) {$/;"	f
newempty	main.cpp	/^Editor *newempty(void ) {$/;"	f
newfile	main.cpp	/^Editor *newfile(const char *file ) {$/;"	f
newfile	main.cpp	/^Editor *newfile(void) {$/;"	f
newfilenamelen	memory.cpp	/^const int newfilenamelen=sizeof(NEWFILENAME)-1;$/;"	v
newline	savedatatype.cpp	/^char newline[]={0x0a};$/;"	v
newline	savedatatype.cpp	/^char newline[]={0x0d,0x0a};$/;"	v
newlinelen	savedatatype.cpp	/^int newlinelen= sizeof(newline);$/;"	v
newone	ascii.cpp	/^ScreenPart *Ascii::newone(void) const {return new Ascii(*this);}$/;"	f	class:Ascii
newone	multidigit.cpp	/^	ScreenPart *MultiDigit::newone(void) const {$/;"	f	class:MultiDigit
newone	repeat.cpp	/^	ScreenPart *Repeat::newone(void) const {return new Repeat(*this);}$/;"	f	class:Repeat
newscherm	main.h	60;"	d
newsegment	rbtree.cpp	/^Treel *Tree::newsegment(void) {$/;"	f	class:Tree
newtreel	rbtree.cpp	/^Treel *Tree::newtreel(void) {$/;"	f	class:Tree
newwgetch	main.cpp	/^int newwgetch(WINDOW *win) {  $/;"	f
nexsearchingfor	search.cpp	82;"	d	file:
next	dialog.h	/^	void next(void) {$/;"	f	class:check2
next	dialog.h	/^template <> inline  void check2<bool,false,true,false>::next(void) { var=!var;};$/;"	f	class:check2
next	dialog.h	/^template <> inline  void check2<bool,false,true,true>::next(void) { var=!var;};$/;"	f	class:check2
next	hash.h	/^		  struct deel *next;$/;"	m	struct:Hash::deel	typeref:struct:Hash::deel::deel
next	keyinput.h	/^		struct tree *next;$/;"	m	struct:keyinput::tree	typeref:struct:keyinput::tree::tree
next	marks.cpp	/^struct keylookup::mark *keylookup::next(void) {$/;"	f	class:keylookup
next	marks.h	/^	struct mark *next,*prev;$/;"	m	struct:keylookup::mark	typeref:struct:keylookup::mark::mark
next	marks.h	/^	struct tree *next;$/;"	m	struct:keylookup::tree	typeref:struct:keylookup::tree::tree
next	rbtree.cpp	/^Treel *Tree::next(Treel *x) {$/;"	f	class:Tree
next	rbtree.h	/^	struct blocks *next;$/;"	m	struct:blocks	typeref:struct:blocks::blocks
next	readconfig.cpp	/^char *next(char *str) {$/;"	f
next	selectsearch.h	/^	SearchNext next;$/;"	m	struct:__anon14
nextGNUregexshown	gnusearch.cpp	/^OFFTYPE Editor::nextGNUregexshown(SearchAim &aim) {$/;"	f	class:Editor
nextasciihyperscan	hyperscan.cpp	/^OFFTYPE Editor::nextasciihyperscan(SearchAim &aim) {$/;"	f	class:Editor
nextbackicasesearch	bytesearch.cpp	/^OFFTYPE Editor::nextbackicasesearch(SearchAim &aim) {$/;"	f	class:Editor
nextbackregexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::nextbackregexsearch(SearchAim &aim) {$/;"	f	class:Editor
nextbacksearch	bytesearch.cpp	/^OFFTYPE Editor::nextbacksearch(SearchAim &aim) {$/;"	f	class:Editor
nextbacksearch	bytesearch.cpp	/^template <Memcmp_t amemcmp> inline OFFTYPE Editor::nextbacksearch(SearchAim &aim) {$/;"	f	class:Editor
nextbackshown	gnusearch.cpp	/^OFFTYPE Editor::nextbackshown(SearchAim &aim) {$/;"	f	class:Editor
nextbacksingleregex	unitsearch.cpp	/^OFFTYPE Editor::nextbacksingleregex(SearchAim &aim)  {$/;"	f	class:Editor
nextbackwardbytealign	bytesearch.cpp	/^template <Memcmp_t amemcmp> inline OFFTYPE Editor::nextbackwardbytealign(SearchAim &aim) {$/;"	f	class:Editor
nextchar	move.cpp	/^int Editor::nextchar(void) {$/;"	f	class:Editor
nextchar	screenpart.cpp	/^int ScreenPart::nextchar(void) {$/;"	f	class:ScreenPart
nextcharind	helpindex.h	/^short nextcharind[]={};$/;"	v
nextcharname	helptext.h	/^char nextcharname[]="Next character. (Right).\\000";$/;"	v
nextfast	move.cpp	/^int Editor::nextfast(void) {$/;"	f	class:Editor
nextfile	window.cpp	/^	int Editor::nextfile(void) {$/;"	f	class:Editor
nextfileind	helpindex.h	/^short nextfileind[]={15,16,};$/;"	v
nextfilename	helptext.h	/^char nextfilename[]="Next (Alt-w,n)\\000\\000Goto next file. \\000";$/;"	v
nextforwardbytealign	bytesearch.cpp	/^template <Memcmp_t amemcmp> inline OFFTYPE Editor::nextforwardbytealign(SearchAim &aim) {$/;"	f	class:Editor
nextforwardicasesearch	bytesearch.cpp	/^OFFTYPE Editor::nextforwardicasesearch(SearchAim &aim) {$/;"	f	class:Editor
nextforwardregexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::nextforwardregexsearch(SearchAim &aim) {$/;"	f	class:Editor
nextforwardsearch	bytesearch.cpp	/^OFFTYPE Editor::nextforwardsearch(SearchAim &aim) {$/;"	f	class:Editor
nextforwardsearch	bytesearch.cpp	/^template <Memcmp_t amemcmp,ChTrans givelow> inline OFFTYPE Editor::nextforwardsearch(SearchAim &aim) {$/;"	f	class:Editor
nexthypershown	hyperscan.cpp	/^OFFTYPE Editor::nexthypershown(SearchAim &aim)  {$/;"	f	class:Editor
nextitemind	helpindex.h	/^short nextitemind[]={20,21,};$/;"	v
nextitemname	helptext.h	/^char nextitemname[]="Next Item (Alt-m,x)\\000\\000Moves one item forwards. Item is the active datatype unit.\\000";$/;"	v
nextmark	marken.cpp	/^int Editor::nextmark(void) {$/;"	f	class:Editor
nextmarkind	helpindex.h	/^short nextmarkind[]={15,16,};$/;"	v
nextmarkname	helptext.h	/^char nextmarkname[]="Next (Alt-k,x)\\000\\000Goto next mark \\000";$/;"	v
nextmenu	menus.cpp	/^int Editor::nextmenu(void) {$/;"	f	class:Editor
nextmenuind	helpindex.h	/^short nextmenuind[]={73,};$/;"	v
nextmenuitem	menus.cpp	/^int Editor::nextmenuitem(void) {$/;"	f	class:Editor
nextmenuitemind	helpindex.h	/^short nextmenuitemind[]={};$/;"	v
nextmenuitemname	helptext.h	/^char nextmenuitemname[]="Goto next menu item. (Down). See firstmenuitem for more information.\\000";$/;"	v
nextmenuname	helptext.h	/^char nextmenuname[]="Goto next opened menu. (Right). Only applies in the context of the menu.\\000See firstmenuitem for more information,\\000";$/;"	v
nextmode	parts.cpp	/^int Editor::nextmode(void) {$/;"	f	class:Editor
nextmodeind	helpindex.h	/^short nextmodeind[]={15,16,};$/;"	v
nextmodename	helptext.h	/^char nextmodename[]="Next (Alt-d,n)\\000\\000Goto the data type on the right of this data type. \\000";$/;"	v
nextpos	editup.cpp	/^int Editor::nextpos(void) {$/;"	f	class:Editor
nextposind	helpindex.h	/^short nextposind[]={20,21,};$/;"	v
nextposname	helptext.h	/^char nextposname[]="Redo move (Alt-m,v)\\000\\000Go again to file offset before undo move.\\000";$/;"	v
nextre2shown	re2search.cpp	/^OFFTYPE Editor::nextre2shown(SearchAim &aim) {$/;"	f	class:Editor
nextsearch	search.cpp	/^inline int Editor::nextsearch(SearchAim &aim) {$/;"	f	class:Editor
nextsearch	search.cpp	/^int Editor::nextsearch(void) {$/;"	f	class:Editor
nextsearcher	search.cpp	/^inline OFFTYPE Editor::nextsearcher(SearchAim &aim) {$/;"	f	class:Editor
nextsearchind	helpindex.h	/^short nextsearchind[]={21,22,};$/;"	v
nextsearchlast	search.cpp	/^inline OFFTYPE Editor::nextsearchlast(SearchAim &aim) {$/;"	f	class:Editor
nextsearchname	helptext.h	/^char nextsearchname[]="Nextsearch (Alt-m,n)\\000\\000Search again for the same search string. \\000";$/;"	v
nextsingleregex	unitsearch.cpp	/^OFFTYPE Editor::nextsingleregex(ScreenPart *const datashown,int (Editor::* const matcher)(const char *const,const int,int *))  {$/;"	f	class:Editor
nilbase	rbtree.h	/^	Treel nilbase;$/;"	m	struct:memhead
nochange	bytesearch.cpp	/^inline int nochange(const int ch)  {return ch;};$/;"	f
noconvstr	filter.cpp	/^static  char noconvstr[]="";$/;"	v	file:
nocurses_init	cursesinit.h	/^class nocurses_init {$/;"	c
nocursor	editup.cpp	/^void Editor::nocursor(void) {$/;"	f	class:Editor
nocursor	screenpart.cpp	/^int ScreenPart::nocursor(void) {$/;"	f	class:ScreenPart
noecho	screen.h	53;"	d
nomessage	editor.h	/^	int nomessage;$/;"	m	class:Editor
nonprint	ascii.h	/^	unsigned char nonprint;	$/;"	m	class:Ascii
nonsparsecp	sparsecp.cpp	/^int nonsparsecp(int inhandle,OFFHIER instart,OFFHIER inlen,int uit) {$/;"	f
nonsparsecp	winsparsecp.cpp	/^int nonsparsecp(HANDLE hInFile,LONGLONG inoff, LONGLONG inlen,HANDLE hOutFile) {$/;"	f
noop	desturbe.h	73;"	d
noop	gnuasciiregex.cpp	6;"	d	file:
nop	editor.cpp	/^int Editor::nop(void) {$/;"	f	class:Editor
nopind	helpindex.h	/^short nopind[]={};$/;"	v
nopname	helptext.h	/^char nopname[]="Does nothing.\\000";$/;"	v
normaal	readconfig.h	51;"	d
normaal	readconfig.h	53;"	d
nospace	rbtree.cpp	/^char *    	nospace(char *ptr) {$/;"	f
notfoundsearchingfor	search.cpp	84;"	d	file:
nothing	filter.cpp	/^char nothing[]="x";$/;"	v
nr	dialog.h	/^	int nr;$/;"	m	class:Common2
nr	gethelp.cpp	/^	short nr;$/;"	m	struct:help	file:
nr	getlabel.cpp	/^int nr=sizeof(proc)\/sizeof(char*);$/;"	v
nr	keyinput.h	/^		int nr; \/*Number of children 0 if sym*\/$/;"	m	struct:keyinput::tree
nr	marks.h	/^	int nr;$/;"	m	struct:keylookup::tree
nr	rbtree.h	44;"	d
nr	typelist.cc	/^int datatypes::maxlen=0,datatypes::nr=0,datatypes::sorted=1;$/;"	m	class:datatypes	file:
nr	typelist.h	/^	static int maxlen,nr,sorted;$/;"	m	class:datatypes
nrattr	readconfig.cpp	/^int nrattr=sizeof(at)\/sizeof(struct attr);$/;"	v
nrcolors	readconfig.cpp	/^int nrcolors=sizeof(colo)\/sizeof(struct nametonum);$/;"	v
nredit	editor.cpp	/^int maxedit=10,nredit=0, editfocus=-1,startnonactive=0;$/;"	v
nrfsym	dialog.cpp	/^const int nrfsym=sizeof(fsym)\/sizeof(fsym[0]);$/;"	v
nrkeys	marks.h	/^	char nrkeys;$/;"	m	struct:keylookup::mark
nrnumber	editup.cpp	/^int Editor::nrnumber(void) {if(numbase)$/;"	f	class:Editor
nrparts	editor.h	/^	int nrparts;$/;"	m	class:Editor
nrsubparts	hassub.h	/^	int active,nrsubparts;$/;"	m	class:HasSub
nrx	editor.h	/^	int nrx,nry;$/;"	m	class:Editor
nrx	screenpart.cpp	/^int &ScreenPart::nrx(void) {return editor->nrx;};$/;"	f	class:ScreenPart
nry	editor.h	/^	int nrx,nry;$/;"	m	class:Editor
nry	screenpart.cpp	/^int &ScreenPart::nry(void) {return editor->nry;};$/;"	f	class:ScreenPart
nu	editor.h	/^	int len,nu,key;$/;"	m	struct:Editor::menu
nul	dialog.cpp	/^char item::nul=0;$/;"	m	class:item	file:
nul	dialog.h	/^static	char nul;$/;"	m	class:item
num	readconfig.cpp	/^	const chtype num;$/;"	m	struct:attr	file:
num	readconfig.cpp	/^struct nametonum {char lab[8];int num;} colo[] = { {"black",COLOR_BLACK}, {"red",COLOR_RED}, {"green",COLOR_GREEN}, {"yellow",COLOR_YELLOW}, {"blue",COLOR_BLUE}, {"magentA",COLOR_MAGENTA}, {"cyan",COLOR_CYAN}, {"white",COLOR_WHITE},{"default",-1}};$/;"	m	struct:nametonum	file:
numbase	editor.h	/^	int maxnumstr, numbase;$/;"	m	class:Editor
number	editup.cpp	/^void Editor::number(void) {$/;"	f	class:Editor
numberof	editor.h	/^		int fromtop,numberof;$/;"	m	class:Editor
numel	convert.h	/^inline int numel(char key) { return (key-'0');};$/;"	f
numline	editup.cpp	/^void Editor::numline(int y) {$/;"	f	class:Editor
numstr	editor.h	/^	char numstr[MAXNUMSTR];$/;"	m	class:Editor
offset	viewbuf.h	/^OFFTYPE offset,endoffset;$/;"	m	class:Viewbuf
offvis	visuals.h	23;"	d
offvisual	visuals.h	25;"	d
offwrite	editmacros.cpp	215;"	d	file:
offwrite	editmacros.cpp	219;"	d	file:
offwrite	editmacros.cpp	221;"	d	file:
ok	dialog.h	/^	ok(item **al,int len,int y,int x,int &var): action("  ~Ok  ",y,x,var) {$/;"	f	class:ok
ok	dialog.h	/^class ok: public action {$/;"	c
oke	dialog.h	462;"	d
old	dialog.h	/^	T &old;$/;"	m	class:Common2
old	dialog.h	/^	T &old;$/;"	m	class:check2
oldcont	gethelp.cpp	/^sighan_t oldcont= SIG_DFL;$/;"	v
oldhalf	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
oldmywgetch	main.cpp	1388;"	d	file:
oldpos	editor.h	/^	long editpos,oldpos,updated;$/;"	m	class:Editor
oldpos	screenpart.cpp	/^inline int ScreenPart::oldpos(void) {$/;"	f	class:ScreenPart
oldstop	gethelp.cpp	/^sighan_t oldstop= SIG_IGN;$/;"	v
omnihandler	main.cpp	/^void omnihandler(int signum) {$/;"	f
onboundary	gnusearch.cpp	38;"	d	file:
onboundary	hyperscan.cpp	186;"	d	file:
onboundary	re2search.cpp	21;"	d	file:
onboundary	search.cpp	49;"	d	file:
onboundary	unitsearch.cpp	10;"	d	file:
onceshowhandler	hyperscan.cpp	/^static int onceshowhandler(unsigned int id, unsigned long long from, unsigned long long endpos, unsigned int flags, void *ctx) {$/;"	f	file:
onunit	gnusearch.cpp	46;"	d	file:
onunit	re2search.cpp	20;"	d	file:
onunit	search.cpp	51;"	d	file:
onunit	unitsearch.cpp	9;"	d	file:
op	searchinterrupt.h	/^int op,in;$/;"	m	class:SearchInterrupt
opencreate	memory.cpp	/^FILEHANDLE opencreate(const char *filename) {$/;"	f
opencreatenew	win.h	/^inline FILEHANDLE opencreatenew(const char *filename) {$/;"	f
opendirect	file.cpp	/^ int Editor::opendirect(void) {$/;"	f	class:Editor
opendynlib	procview.cpp	/^int Editor::opendynlib(void) {$/;"	f	class:Editor
opendynlibind	helpindex.h	/^short opendynlibind[]={22,23,95,};$/;"	v
opendynlibname	helptext.h	/^char opendynlibname[]="Load plugin (Alt-t,l)\\000\\000Load plugin in program. The plugin can contain datatypes or procedures.\\000Procedures you can view under Dynamic (Alt-t,d), datatypes under Alt-d,t.\\000";$/;"	v
openfile	file.cpp	/^FILEHANDLE Editor::openfile(const char *ant) {$/;"	f	class:Editor
openfile	file.cpp	/^int Editor::openfile(const char *ant) {$/;"	f	class:Editor
opennothing	disk.cpp	/^inline FILEHANDLE  opennothing(const char *filename) {return CreateFile(filename,  0, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING,0,NULL); }$/;"	f
opennothing	disk.cpp	29;"	d	file:
openreading	memory.cpp	/^FILEHANDLE openreading(const char *filename) {$/;"	f
openreading	memory.cpp	/^inline FILEHANDLE Memory::openreading(const char *filename) {$/;"	f	class:Memory
openreadwrite	memory.cpp	/^FILEHANDLE openreadwrite(const char *filename) {$/;"	f
openreadwrite	memory.cpp	/^inline FILEHANDLE Memory::openreadwrite(const char *filename) {$/;"	f	class:Memory
openshells	suspend.cpp	/^char **openshells(int *nr) {$/;"	f
operator delete	myalloc.cpp	/^void  operator delete(void *p) { $/;"	f
operator new	myalloc.cpp	/^void * operator new(size_t size) {$/;"	f
oppos	screenpart.cpp	/^inline int ScreenPart::oppos(int start) {$/;"	f	class:ScreenPart
oppos	screenpart.cpp	/^int ScreenPart::oppos(int pos,int size) {$/;"	f	class:ScreenPart
opt	dialog.h	491;"	d
opt2	dialog.h	534;"	d
options	dialog.h	/^static	constexpr const  char *const options = " x#*%-+";$/;"	m	class:check2
optionscreen	dialog.h	133;"	d
optselect	dialog.h	512;"	d
optselect	dialog.h	529;"	d
optselect2	dialog.h	538;"	d
optselect2t	dialog.h	537;"	d
orcheck2	dialog.h	/^	orcheck2(const char *txt,int y1,int x1,T v,Common2<T> *c): item(txt,y1,x1), val(v),com(c) {$/;"	f	class:orcheck2
orcheck2	dialog.h	/^template <typename T=int> class orcheck2: public item {$/;"	c
ore	dialog.h	474;"	d
ore2	dialog.h	533;"	d
oreen	dialog.h	472;"	d
orel	dialog.h	471;"	d
origconthandler	main.cpp	/^void (*origconthandler)(int) =NULL;$/;"	v
original_screenbuffer	cursesinit.cpp	/^CONSOLE_SCREEN_BUFFER_INFO original_screenbuffer;$/;"	v
origstophandler	main.cpp	/^void (*origstophandler)(int) =NULL;$/;"	v
orsel	dialog.h	475;"	d
otherkeys	builtinkeys.h	152;"	d
otherscreen	gethelp.cpp	/^void otherscreen(void)$/;"	f
out	keystrokes.h	/^	int *inp,out,max;$/;"	m	class:Keystrokes
outofcontext	readconfig.cpp	/^	int outofcontext=0;$/;"	v
output	inout.cpp	/^ int Editor::output(const char info[]) {$/;"	f	class:Editor
overline	inout.h	/^inline void Editor::overline() {for(int i=0;i<Screenwidth;i++) waddch(editscreen,' ');}$/;"	f	class:Editor
override	ascii.h	/^	ScreenPart *newone(void) const override;$/;"	m	class:Ascii
override	ascii.h	/^	char *getconvstr(void) override;$/;"	m	class:Ascii
override	ascii.h	/^	int addkey(unsigned char *bin,int binlen, int key, int pos ) override;$/;"	m	class:Ascii
override	ascii.h	/^	int bin2formal(unsigned char *bin, char *formal, int len) override; 	$/;"	m	class:Ascii
override	ascii.h	/^	int byteoff2screen(int pos) override ;$/;"	m	class:Ascii
override	ascii.h	/^	int chbytes(int b)  override;$/;"	m	class:Ascii
override	ascii.h	/^	int form2bin(const char *formal, unsigned char *bin, int &len) const override;$/;"	m	class:Ascii
override	ascii.h	/^	int isel(const int ch) const override;$/;"	m	class:Ascii
override	ascii.h	/^	int screen2byteoff(int pos) override ;$/;"	m	class:Ascii
override	ascii.h	/^	int setconvstr(char *str) override;$/;"	m	class:Ascii
override	ascii.h	/^	virtual int userconfig(int kind) override;$/;"	m	class:Ascii
override	contain.h	/^	ScreenPart * freesubpart(int pos=-1) override;$/;"	m	class:Contains
override	contain.h	/^	virtual ScreenPart *setsubpart(ScreenPart *part,int i=-1) override;$/;"	m	class:Contains
override	contain.h	/^	virtual int chrepeat(int b)  override;$/;"	m	class:Contains
override	contain.h	/^	virtual void mklabel(void) override;$/;"	m	class:Contains
override	contain.h	/^	virtual void poschanged(int pos) override;$/;"	m	class:Contains
override	contain.h	/^int  userconfig(int kind)  override;$/;"	m	class:Contains
override	dialog.h	/^	 int switchvar(void) override ;$/;"	m	class:orcheck2
override	dialog.h	/^	int change(int key) override ;$/;"	m	class:itemlist
override	dialog.h	/^	int save(void) override ;$/;"	m	class:itemlist
override	dialog.h	/^	int saveall(void) override ;$/;"	m	class:itemlist
override	dialog.h	/^	int saveall(void) override ;$/;"	m	class:ok
override	dialog.h	/^	int saveall(void) override;$/;"	m	class:lineitem
override	dialog.h	/^	int switchvar(void) override ;$/;"	m	class:itemlist
override	dialog.h	/^	void select(void) override ;$/;"	m	class:action
override	dialog.h	/^	void select(void) override ;$/;"	m	class:itemlist
override	dialog.h	/^	void select(void) override ;$/;"	m	class:orcheck2
override	dialog.h	/^	void select(void) override;$/;"	m	class:lineitem
override	dialog.h	/^	void show(void) override ;$/;"	m	class:action
override	dialog.h	/^	void show(void) override ;$/;"	m	class:itemlist
override	dialog.h	/^	void show(void) override ;$/;"	m	class:orcheck2
override	dialog.h	/^	void show(void) override; $/;"	m	class:lineitem
override	hassub.h	/^	virtual ScreenPart *getchild(int &forstart,int &binstart,int pos) override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual ScreenPart *newone(void) const  override =0;$/;"	m	class:HasSub
override	hassub.h	/^	virtual int addkey(unsigned char *bin,int binlen, int key, int pos )  override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual int bin2formal(unsigned char *bin, char *formal, int len)  override;	$/;"	m	class:HasSub
override	hassub.h	/^	virtual int calcsizes(void)  override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual int chbytes(int bytes) override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual int isel(const int ch) const override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual short chbase(short base) override;$/;"	m	class:HasSub
override	hassub.h	/^	virtual void mklabel(void) override =0;$/;"	m	class:HasSub
override	hassub.h	/^	virtual void poschanged(int pos) override=0;$/;"	m	class:HasSub
override	hassub.h	/^virtual int form2bin(const char *formal, unsigned char *bin, int &len) const  override;$/;"	m	class:HasSub
override	multidigit.h	/^	int byteoff2screen(int pos)  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	int screen2byteoff(int pos)  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual	int bin2formal(unsigned char *bin, char *formal, int len)  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual	int form2bin(const char *formal, unsigned char *bin, int &len) const  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual	int isel(const int key) const override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual ScreenPart *newone(void) const  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual int calcsizes(void)  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual int chbytes(int b)  override;$/;"	m	class:MultiDigit
override	multidigit.h	/^	virtual short chbase(short b)  override;$/;"	m	class:MultiDigit
override	repeat.h	/^	ScreenPart *getchild(int &forstart,int &binstart,int pos) override; $/;"	m	class:Repeat
override	repeat.h	/^	ScreenPart *newone(void) const override;$/;"	m	class:Repeat
override	repeat.h	/^	ScreenPart *setsubpart(ScreenPart *pa,int i=-1) override;$/;"	m	class:Repeat
override	repeat.h	/^	ScreenPart *subpart(const int i) const override; $/;"	m	class:Repeat
override	repeat.h	/^	int calcsizes(void) override; $/;"	m	class:Repeat
override	repeat.h	/^	int chrepeat(int nr) override; $/;"	m	class:Repeat
override	repeat.h	/^	int isel(const int ch) const override;$/;"	m	class:Repeat
override	repeat.h	/^	void mklabel(void) override; $/;"	m	class:Repeat
override	repeat.h	/^	void poschanged(int pos)  override; $/;"	m	class:Repeat
override	repeat.h	/^ScreenPart * freesubpart(int pos=-1)  override;$/;"	m	class:Repeat
override	repeat.h	/^int  userconfig(int kind)  override;$/;"	m	class:Repeat
p	rbtree.cpp	56;"	d	file:
pagedown	move.cpp	/^int Editor::pagedown(void) {$/;"	f	class:Editor
pagedownind	helpindex.h	/^short pagedownind[]={};$/;"	v
pagedownname	helptext.h	/^char pagedownname[]="Page down. (Pgdn).\\000";$/;"	v
pagelines	gethelp.cpp	125;"	d	file:
pageup	move.cpp	/^int Editor::pageup(void) {$/;"	f	class:Editor
pageupind	helpindex.h	/^short pageupind[]={};$/;"	v
pageupname	helptext.h	/^char pageupname[]="Page up. (Pgup).\\000";$/;"	v
palcsconfig	dialog.h	511;"	d
palcsconfig	dialog.h	522;"	d
palcsconfig	dialog.h	524;"	d
paren	screenpart.h	/^	const class Parent *  paren;$/;"	m	class:Parent	typeref:class:Parent::Parent
parent	rbtree.cpp	55;"	d	file:
parent	rbtree.h	/^	struct treeel *parent;$/;"	m	struct:treeel	typeref:struct:treeel::treeel
parentd	screenpart.h	43;"	d
parentdef	screenpart.h	41;"	d
part	filter.h	/^	ScreenPart *part;$/;"	m	class:Filter
part	repeat.h	/^	ScreenPart *part;$/;"	m	class:Repeat
partaddch	screenpart.cpp	/^int  partaddch(ScreenPart *part,int ch) {$/;"	f
partconfig	parts.cpp	/^int Editor::partconfig(ScreenPart *sub,int kind) {$/;"	f	class:Editor
partmove	screenpart.cpp	/^int partmove(ScreenPart *part,int y,int x)  {$/;"	f
parts	editor.h	/^	ScreenPart **parts;$/;"	m	class:Editor
partwidth	screenpart.cpp	/^int ScreenPart::partwidth(void) {return ( (unitsize)*(nrx()\/bytes)+spaceafter);};$/;"	f	class:ScreenPart
pastselect	select.cpp	/^int Editor::pastselect(void) {$/;"	f	class:Editor
pastselectind	helpindex.h	/^short pastselectind[]={15,16,};$/;"	v
pastselectname	helptext.h	/^char pastselectname[]="Past (Alt-e,p)\\000\\000Past selection. \\000";$/;"	v
peek	macros.cpp	/^	int Keystrokes::peek(void) {$/;"	f	class:Keystrokes
pending	keystrokes.h	/^	inline int pending(void) {$/;"	f	class:Keystrokes
perms	dialog.cpp	602;"	d	file:
perms	dialog.cpp	787;"	d	file:
perms	disk.cpp	703;"	d	file:
perms	disk.cpp	954;"	d	file:
pid	main.cpp	/^pid_t pid;$/;"	v
pidden	main.cpp	/^pid_t *pidden=NULL;$/;"	v
piddenlen	main.cpp	/^int piddenlen=0;$/;"	v
plaats	hash.h	/^		  POINTER plaats;$/;"	m	struct:Hash::deel
place	editor.cpp	/^int Editor::place(int from) {$/;"	f	class:Editor
placepart	screenpart.h	/^	inline void placepart(int l, int t) { left=l;top=t;}; \/** sets left and top position of screenpart **\/$/;"	f	class:ScreenPart
playkeys	macros.cpp	/^Keystrokes playkeys;$/;"	v
playkeysfile	editmacros.cpp	/^int Editor::playkeysfile(void) {$/;"	f	class:Editor
playkeysfileind	helpindex.h	/^short playkeysfileind[]={20,21,68,143,};$/;"	v
playkeysfilename	helptext.h	/^char playkeysfilename[]="Play file (Alt-t,y)\\000\\000Play saved keystrokes (recorded with Record). \\000The program runs like the keystrokes are pressed by the user, except when \\000other programs are evoked from bed.\\000";$/;"	v
playmacro	editmacros.cpp	/^int Editor::playmacro(char *buf,int end) {$/;"	f	class:Editor
playmacrofile	editmacros.cpp	/^int Editor::playmacrofile(const char *name) {$/;"	f	class:Editor
playrecord	editmacros.cpp	/^int Editor::playrecord(void) {$/;"	f	class:Editor
playrecordind	helpindex.h	/^short playrecordind[]={24,25,97,};$/;"	v
playrecordname	helptext.h	/^char playrecordname[]="Play Recorded (Alt-t,a)\\000\\000If you have recorded keystrokes after program startup you can play them\\000off with this procedure.\\000";$/;"	v
plcsconfig	dialog.h	509;"	d
plcsconfig	dialog.h	516;"	d
plugindir	readconfig.cpp	/^char *plugindir=confdir;$/;"	v
plugindirlen	readconfig.cpp	/^int plugindirlen=sizeof(CONFDIR);$/;"	v
popundo	undo.cpp	/^int Editor::popundo(unsigned char **buf,OFFTYPE *pos,OFFTYPE *diskused) {$/;"	f	class:Editor
pos	dialog.h	/^	int size,pos,bij;$/;"	m	class:line
pos	editor.h	/^	OFFTYPE pos;$/;"	m	struct:undo
pos	hyperscan.cpp	/^		OFFTYPE pos;$/;"	m	union:Toshownhandler::__anon2	file:
pos	hyperscan.cpp	/^	OFFTYPE pos;$/;"	m	struct:__anon1	file:
pos	marks.h	/^	 OFFTYPE pos;$/;"	m	struct:keylookup::mark
poschanged	contain.cpp	/^ void Contains::poschanged(int pos)  {$/;"	f	class:Contains
poschanged	repeat.cpp	/^ void Repeat::poschanged(int pos)  {$/;"	f	class:Repeat
poschanged	screenpart.h	/^	virtual void poschanged(int pos) {};$/;"	f	class:ScreenPart
posok	move.cpp	260;"	d	file:
posputbuf	memed.cpp	/^OFFTYPE Editor::posputbuf(OFFTYPE pos,char *buf,OFFTYPE len){$/;"	f	class:Editor
postotop	move.cpp	/^int Editor::postotop(void) {$/;"	f	class:Editor
postotopind	helpindex.h	/^short postotopind[]={14,15,82,};$/;"	v
postotopname	helptext.h	/^char postotopname[]="Top (Alt-i,t)\\000\\000Moves file display so that the file offset at the cursor position \\000is shifted to the upper left corner of the file display.\\000";$/;"	v
postoxy	screenpart.h	/^	inline void postoxy(int pos,int &x1,int &y1) { \/*** convert position on screen to x and y **\/$/;"	f	class:ScreenPart
postwait	marken.cpp	38;"	d	file:
postwait	marken.cpp	41;"	d	file:
poswrite	macros.cpp	55;"	d	file:
poswrite	macros.cpp	57;"	d	file:
predef	parts.cpp	272;"	d	file:
pretopos	move.cpp	/^int Editor::pretopos(OFFTYPE pos) {$/;"	f	class:Editor
prev	marks.cpp	/^struct keylookup::mark *keylookup::prev(void) {$/;"	f	class:keylookup
prev	marks.h	/^	struct mark *next,*prev;$/;"	m	struct:keylookup::mark	typeref:struct:keylookup::mark::
prevfile	window.cpp	/^	int Editor::prevfile(void) {$/;"	f	class:Editor
prevfileind	helpindex.h	/^short prevfileind[]={15,16,};$/;"	v
prevfilename	helptext.h	/^char prevfilename[]="Prev (Alt-w,p)\\000\\000Goto previous file. Zooming the file. \\000";$/;"	v
previouspos	editor.h	/^OFFTYPE *previouspos;$/;"	m	class:Editor
previousposhead	editor.h	/^int previouspositer, previousposhead;$/;"	m	class:Editor
previouspositer	editor.h	/^int previouspositer, previousposhead;$/;"	m	class:Editor
previousposmax	editup.cpp	/^static int previousposmax=50;$/;"	v	file:
prevmark	marken.cpp	/^int Editor::prevmark(void) {$/;"	f	class:Editor
prevmarkind	helpindex.h	/^short prevmarkind[]={19,20,};$/;"	v
prevmarkname	helptext.h	/^char prevmarkname[]="Previous (Alt-k,p)\\000\\000Goto previous mark. \\000";$/;"	v
prevmenu	menus.cpp	/^int Editor::prevmenu(void) {$/;"	f	class:Editor
prevmenuind	helpindex.h	/^short prevmenuind[]={};$/;"	v
prevmenuitem	menus.cpp	/^int Editor::prevmenuitem(void) {$/;"	f	class:Editor
prevmenuitemind	helpindex.h	/^short prevmenuitemind[]={};$/;"	v
prevmenuitemname	helptext.h	/^char prevmenuitemname[]="Goto previous menuitem (Up). See firstmenuitem for more information.\\000";$/;"	v
prevmenuname	helptext.h	/^char prevmenuname[]="Goto previous menu. (Left). See firstmenuitem for more information.\\000";$/;"	v
prevmode	parts.cpp	/^int Editor::prevmode(void) {$/;"	f	class:Editor
prevmodeind	helpindex.h	/^short prevmodeind[]={15,16,};$/;"	v
prevmodename	helptext.h	/^char prevmodename[]="Prev (Alt-d,v)\\000\\000Goto the data type shown on the left of current active data screen.\\000";$/;"	v
prevpos	editup.cpp	/^int Editor::prevpos(void) {$/;"	f	class:Editor
prevpos	hyperscan.cpp	/^	OFFTYPE prevpos=OFFTYPEINVALID,startpos;$/;"	m	class:Toshownhandler	file:
prevposind	helpindex.h	/^short prevposind[]={20,21,};$/;"	v
prevposname	helptext.h	/^char prevposname[]="Undo move (Alt-m,m)\\000\\000Go to previous file offset.\\000";$/;"	v
printchar	editup.cpp	/^inline int Editor::printchar(int pos) { $/;"	f	class:Editor
printchar	screenpart.cpp	/^void ScreenPart::printchar(int pos) {$/;"	f	class:ScreenPart
printkeys	keyconfig.cpp	108;"	d	file:
printw	screen.h	39;"	d
problemchars	ascii.h	/^	char problemchars;$/;"	m	class:Ascii
proc	editor.h	/^	int (Editor::*proc)(void);$/;"	m	struct:Editor::Menugeg
proc	editor.h	/^	int (Editor::*proc)(void);$/;"	m	struct:Editor::menuel
proc	editor.h	/^	static  int (Editor::*proc[])(void);$/;"	m	class:Editor
proc	gethelp.cpp	/^	int (Editor::*proc)(void) ;$/;"	m	struct:help	file:
proc	getlabel.cpp	/^char *proc[]= {$/;"	v
proc	keyconfig.cpp	/^	const char  *proc;$/;"	m	struct:keydeffer	file:
proc	procview.cpp	/^int (Editor::*Editor::proc[])(void)={$/;"	v
proc	readconfig.cpp	/^		 int (Editor::*proc)(void);$/;"	m	struct:gegs	file:
procedurename	procview.cpp	/^const char *procedurename(int (Editor::*proc)(void)) {$/;"	f
procel	editor.h	/^ProcelT procel;$/;"	m	union:SearchTyper::__anon7
process	shell.h	/^int  process(T com,Ts... args)  {$/;"	f
process	shell.h	/^template<typename  ... Ts> int process(Ts ... args) {$/;"	f
processkey	editup.cpp	/^int Editor::processkey(void) {$/;"	f	class:Editor
processkeyonce	editup.cpp	/^int Editor::processkeyonce(void) {$/;"	f	class:Editor
proclistcon	procview.cpp	/^static int proclistcon=123;$/;"	v	file:
procnames	editor.h	/^	static  const char *procnames[];$/;"	m	class:Editor
procnames	procview.cpp	/^const char *Editor::procnames[] = {$/;"	m	class:Editor	file:
procnr	editor.h	/^	static int procnr;$/;"	m	class:Editor
procnr	procview.cpp	/^int Editor::procnr=sizeof(Editor::procnames)\/sizeof(char *);$/;"	m	class:Editor	file:
proconname	editor.cpp	/^int Editor::proconname(char *str) {$/;"	f	class:Editor
procpart	disk.cpp	/^static const char procpart[]="\/proc\/partitions";$/;"	v	file:
procproc	keyproc.h	57;"	d
prodef	editor.h	390;"	d
prodef	editor.h	391;"	d
prodef	editor.h	393;"	d
prodef	getlabel.cpp	85;"	d	file:
prodef	procview.cpp	38;"	d	file:
prodef	procview.cpp	39;"	d	file:
prodef	procview.cpp	50;"	d	file:
prodef	procview.cpp	51;"	d	file:
prodefname	editor.h	387;"	d
prodefname	editor.h	389;"	d
prodefname	procview.cpp	40;"	d	file:
prodefname	procview.cpp	41;"	d	file:
prodefname	procview.cpp	48;"	d	file:
prodefname	procview.cpp	49;"	d	file:
progenitors	withcontain.cpp	/^std::vector<ScreenPart *> Editor::progenitors(void) {$/;"	f	class:Editor
prognamesize	main.cpp	1110;"	d	file:
putback	gnusearch.cpp	/^void	putback(void) {$/;"	f	class:saveregs
putbuf	memed.cpp	/^OFFTYPE Editor::putbuf(char *buf,OFFTYPE buflen) {$/;"	f	class:Editor
putkeys	dialog.cpp	/^void putkeys(class keyinput *keyinp) {$/;"	f
putkeys	marks.cpp	/^int keylookup::putkeys(unsigned char *keys,int nr,OFFTYPE pos,Markgeg *des,uint32_t len) {$/;"	f	class:keylookup
putline	editup.cpp	/^void Editor::putline(int y) {$/;"	f	class:Editor
putline	screenpart.cpp	/^int ScreenPart::putline(int y) {$/;"	f	class:ScreenPart
putmem	memed.cpp	/^OFFTYPE Editor::putmem(OFFTYPE pos,char *buf,OFFTYPE len){$/;"	f	class:Editor
putmenus	menus.cpp	/^void putmenus(void) {$/;"	f
putnumbase	editor.cpp	/^int Editor::putnumbase(int base) {$/;"	f	class:Editor
putpart	memed.cpp	/^OFFTYPE Editor::putpart(OFFTYPE begin, OFFTYPE len, char * buf) {return mem.putpart(begin,len,buf);}$/;"	f	class:Editor
putproc	procview.cpp	/^int putproc(const char *str,int nr,unsigned char keys[]) {$/;"	f
putselbuf	select.cpp	/^int Editor::putselbuf(char *buf,int len) {$/;"	f	class:Editor
putselbuf	select.cpp	/^int putselbuf(char *buf,int len) {$/;"	f
putseq	keyinput.cpp	/^int keyinput::putseq(const intptr_t sym,int nrkeys, const unsigned char *keybuf) {$/;"	f	class:keyinput
quit	file.cpp	/^int Editor::quit(void) {$/;"	f	class:Editor
quithandler	main.cpp	/^void quithandler(int signum) {$/;"	f
quitind	helpindex.h	/^short quitind[]={15,16,};$/;"	v
quitname	helptext.h	/^char quitname[]="Exit (Alt-f,x)\\000\\000Quit application. For all changed files you are asked to save it. \\000";$/;"	v
rbcolors	rbtree.h	/^typedef enum rbcolors {RBRED,RBBLACK} Color;$/;"	g
rbdelete	rbtree.cpp	/^Treel *Tree::rbdelete(Treel *z) {$/;"	f	class:Tree
rbdeletefixup	rbtree.cpp	/^void	Tree::rbdeletefixup(Treel *x) {$/;"	f	class:Tree
rbinsert	rbtree.cpp	/^void Tree::rbinsert(Treel *x) {$/;"	f	class:Tree
re2backunit	unitsearch.cpp	/^OFFTYPE Editor::re2backunit(SearchAim &aim) {$/;"	f	class:Editor
re2match	editor.h	/^inline int re2match(const char *data,const int len,int *offset) {$/;"	f	class:Editor
re2pattern	editor.h	/^RE2 *re2pattern=NULL;$/;"	m	class:Editor
re2replace	re2search.cpp	/^int Editor::re2replace(OFFTYPE pos,int matchlen, char *str,int len  ) {$/;"	f	class:Editor
re2replacestr	editor.h	/^char *re2replacestr=NULL;$/;"	m	class:Editor
re2search	re2search.cpp	/^OFFTYPE Editor::re2search(SearchAim &aim) {$/;"	f	class:Editor
re2searchgegs	re2search.cpp	/^bool Editor::re2searchgegs(SearchAim &aim) {$/;"	f	class:Editor
re2searchnext	re2search.cpp	/^OFFTYPE Editor::re2searchnext(SearchAim &aim) {$/;"	f	class:Editor
re2shown	re2search.cpp	/^OFFTYPE Editor::re2shown(SearchAim &aim) {$/;"	f	class:Editor
re_search_12	gnuasciiregex.cpp	27;"	d	file:
readbuf	suspend.cpp	/^int readbuf(char *name,char *buf,int max) {$/;"	f
readconfig	readconfig.cpp	/^int readconfig(char *file) {$/;"	f
readconfig	readconfig.cpp	/^int readconfig(void) {$/;"	f
readcontain	withcontain.cpp	/^int Editor::readcontain(void) {$/;"	f	class:Editor
readcontainind	helpindex.h	/^short readcontainind[]={20,21,};$/;"	v
readcontainname	helptext.h	/^char readcontainname[]="Read Type (Alt-y,d)\\000\\000Read saved datatype. So that the current file is displayed in that format.\\000";$/;"	v
readfiltersfrom	savedatatype.cpp	/^int readfiltersfrom(ScreenPart *part,char *&ptr,char *end,char *mes) {$/;"	f
readhasub	savedatatype.cpp	/^char *readhasub(Editor *edit,ScreenPart *sub,char *ptr,char *end,char *mes) {$/;"	f
readingconfig	readconfig.cpp	/^char readingconfig=1;$/;"	v
readmarks	marken.cpp	/^int Editor::readmarks(void) {$/;"	f	class:Editor
readmarksind	helpindex.h	/^short readmarksind[]={15,16,};$/;"	v
readmarksname	helptext.h	/^char readmarksname[]="Read (Alt-k,r)\\000\\000Read saved marks.\\000";$/;"	v
readonly	biosdisk.h	/^ 	BYTE readonly;	$/;"	m	struct:diskinfo
readonly	memory.h	/^	int errors,readonly;$/;"	m	class:Memory
readsearchgegs	file.cpp	/^int readsearchgegs(void) {$/;"	f
readshown	file.cpp	/^int Editor::readshown(void) {$/;"	f	class:Editor
readshownind	helpindex.h	/^short readshownind[]={23,24,87,};$/;"	v
readshownname	file.cpp	/^int Editor::readshownname(const char *ant) {$/;"	f	class:Editor
readshownname	file.cpp	/^int Editor::readshownname(const char *filename) {$/;"	f	class:Editor
readshownname	helptext.h	/^char readshownname[]="Insert shown (Alt-e,h)\\000\\000Insert file content within active datatype. The content of the\\000file is interpreted as consisting of data in the active datatype.\\000";$/;"	v
realkbhit	main.cpp	/^bool realkbhit(void) {$/;"	f
realkbhit	main.cpp	/^int realkbhit(void) {$/;"	f
reallocmy	myalloc.cpp	/^void *reallocmy(void *ptr, size_t size) {$/;"	f
reallocmy	myalloc.h	54;"	d
realmywgetch	main.cpp	/^int realmywgetch(WINDOW *w) {$/;"	f
realoutput	inout.cpp	/^ int Editor::realoutput(const char info[]) {$/;"	f	class:Editor
realprocname	readconfig.cpp	805;"	d	file:
realsize	memory.cpp	/^char realsize=0;$/;"	v
realsuspend	suspend.cpp	/^int realsuspend(void) {$/;"	f
realtermhandler	main.cpp	/^void realtermhandler(int signum) {$/;"	f
record	editmacros.cpp	/^int Editor::record(void) {$/;"	f	class:Editor
recordind	helpindex.h	/^short recordind[]={17,18,84,150,151,222,297,375,446,512,584,657,};$/;"	v
recordkeys	editmacros.cpp	81;"	d	file:
recordkeysptr	editmacros.cpp	/^Keystrokes *recordkeysptr=NULL;$/;"	v
recordname	helptext.h	/^char recordname[]="Record (Alt-t,r)\\000\\000Start recording. Keystrokes are recorded until you press C-t. You\\000can save recorded keystrokes to replay them at some other moment.\\000\\000Take notice of the fact that RAW keystrokes are saved. This means that\\000the recorded keystrokes are very unportable. They are not portable between\\000operating systems but also not portable between terminals and configurations.\\000What's is recorded within xterm does not necessarily work with rxvt or\\000with linux console. You can use more portable keystrokes by using\\000only Alt-char and Control-char keys. The movement and function keys are\\000very unportable and also combinations of Alt or Control that make use of\\000non alphabetic characters.\\000";$/;"	v
redistribute	main.cpp	/^int redistribute=1;$/;"	v
redo	undo.cpp	/^int Editor::redo(void) {$/;"	f	class:Editor
redoind	helpindex.h	/^short redoind[]={15,16,86,};$/;"	v
redoname	helptext.h	/^char redoname[]="Redo (Alt-e,r)\\000\\000After you have undone something with undo, you can redo it with redo.\\000Redo is impossibly following a change after the undo.\\000";$/;"	v
redos	editor.h	/^int lastundo,redos,beginundo,undohalf;$/;"	m	class:Editor
refresh	screen.h	41;"	d
regdisk	memory.cpp	/^struct regdisk {$/;"	s	file:
regexerrorstring	gnuasciiregex.cpp	/^const char *regexerrorstring=NULL;$/;"	v
regexsearch	gnuasciiregex.cpp	/^OFFTYPE Editor::regexsearch(SearchAim &aim) {$/;"	f	class:Editor
regextype	search.cpp	617;"	d	file:
registerfilterclass	filter.h	83;"	d
registerfilterclasspart	filter.h	89;"	d
registrysubkey	memory.cpp	/^char registrysubkey[]="SOFTWARE\\\\Bed\\\\harddrives";$/;"	v
regtype	search.cpp	763;"	d	file:
reinit	editup.cpp	/^int Editor::reinit(void) {$/;"	f	class:Editor
relive	main.cpp	/^void relive(void) {$/;"	f
removemode	withcontain.cpp	/^int Editor::removemode(void) {$/;"	f	class:Editor
removemodeind	helpindex.h	/^short removemodeind[]={17,18,};$/;"	v
removemodename	helptext.h	/^char removemodename[]="Remove (Alt-d,r)\\000\\000Closes data type screen part. \\000";$/;"	v
reord	search.cpp	/^int reord(ScreenPart *part) {$/;"	f
reorderunit	parts.cpp	/^int Editor::reorderunit(void) {$/;"	f	class:Editor
reorderunitind	helpindex.h	/^short reorderunitind[]={18,19,94,130,207,283,};$/;"	v
reorderunitname	helptext.h	/^char reorderunitname[]="Reorder (Alt-y,o)\\000\\000One of the filters that is transforms the data when read from the file and\\000before interpreted by the datatype.\\000Reorders bytes within item. Unit gives the number of bytes to keep together.\\000If the bytes are 'abcdef', reorder with unit=1 gives 'fedcba', with unit=2 \\000gives 'efcdab', with unit=3 gives 'defabc'.\\000";$/;"	v
repeat	editor.cpp	/^int Editor::repeat(void) {$/;"	f	class:Editor
repeat2str	savedatatype.cpp	/^int repeat2str(char *gegs,int maxgegs,Repeat *sub,int depth) {$/;"	f
repeatcontain	withcontain.cpp	/^int Editor::repeatcontain(void) {$/;"	f	class:Editor
repeatcontainind	helpindex.h	/^short repeatcontainind[]={17,18,95,169,};$/;"	v
repeatcontainname	helptext.h	/^char repeatcontainname[]="Repeat (Alt-y,p)\\000\\000Repeats active (sub-)datatype a certain number of times. It behaves the same\\000as a composed datatype with multiple version of the current active (sub-)\\000datatype.\\000";$/;"	v
repeatind	helpindex.h	/^short repeatind[]={20,21,89,};$/;"	v
repeatname	helptext.h	/^char repeatname[]="Repeat nr (Alt-e,n)\\000\\000Repeats keystrokes a certain number of times. Caveat: Doesn't show \\000dialog screens during recording.\\000";$/;"	v
replace	re2search.cpp	/^const char *Editor::replace(char *input,int inlen,int *outlen) {$/;"	f	class:Editor
replace	search.cpp	/^int Editor::replace(void) {	$/;"	f	class:Editor
replacehere	search.cpp	/^inline void Editor::replacehere(OFFTYPE pos, SearchAim &aim,char *str,int len  ) {$/;"	f	class:Editor
replaceind	helpindex.h	/^short replaceind[]={18,19,41,83,123,159,196,248,301,351,359,424,486,549,613,667,684,746,756,806,872,904,916,968,1029,1060,1099,1108,1160,1228,1297,1348,1414,1429,1470,1491,1532,1539,1589,1651,1706,1769,1775,1812,1823,1878,1949,1958,2027,2046,2052,2117,2159,2169,2238,2250,2298,};$/;"	v
replacename	helptext.h	/^char replacename[]="Replace (Alt-e,e)\\000\\000Regular expression:  \\000	[1-9] matches characters between 1 and 9\\000	[^1-9] matches everything except [1-9]\\000	1{3,5}  matches 111 1111 and 11111\\000	(Linux|Unix) matches Linux and Unix\\000	\\\\b   boundary. \\\\b123 matches 1234589,  not 9123458\\000	\\\\B   the reverse. \\\\B123 matches 9123458 not 1234589\\000Unit:   Match regex expression with single units.\\000Align: \\000	Multibyte datatypes can be aligned differently. For example a 4\\000	byte digit can start at offset 0,1,2 or 3 and that will give\\000	different 4 byte digits. Without checking Boundaries all will\\000	be returned. With Boundaries checked only bytes aligned in the\\000	same way as is now shown on the screen are returned.\\000Case sensitive: \\000	When checked upper and lower case are treated distinctively.\\000Forward: \\000	When checked the file is searched in the forward\\000	direction going from lower to higher offsets.  When not checked \\000	the file is searched backward.\\000Edge file: \\000	When checked the file is searched from the edge of\\000	the file. From offset 0 when searching forward, from end of\\000	file when searching backward.\\000Find:	Here you type the search pattern\\000Replace:\\000	At the place where the search string is found the \\000	replace string is placed. The replace string overwrites the data. \\000	When Regular expression is checked you can insert the whole search \\000	string by \\\\0 or supexpressions by \\\\1 \\\\2 upto \\\\9. \\000	In the search string subexpressions are demarcated by (pattern).\\000	For example: \\000		   Find: (FBA041D3) ([^ ]*) (B0300048)\\000		Replace:  \\\\3 \\\\1 \\\\2\\000	exchanges the position of three digits.\\000List: \\000	Generates a list of all hits. When compiled with\\000	CONFIG_THREADS=y you can go on editing while hits are marked\\000	so you can view them in marklist (prockey showmarks).\\000Ascii, Digit etc are when checked the current active datatype.\\000Base:\\000	Base of digit. E.g 16 for heximal. \\000Nr bytes: \\000	Gives the number of bytes each data item occupies. By\\000	some datatypes you can change this for example by unsigned integers. \\000Reverse:\\000	Applied filter Revers: reverse bytes while transforming from shown \\000	datatype to file.\\000Set: \\000	After changing datatype info (base,bytes,type) you press Return\\000	on Set to make this the search datatype.\\000Convert: \\000	the same as Set in addition the current search string is converted.\\000Ok: 	search\\000Keep:	Makes current search options the default.\\000Cancel:	Cancel\\000";$/;"	v
replacepart	parts.cpp	/^ScreenPart *Editor::replacepart(ScreenPart *part,int pos) {$/;"	f	class:Editor
replacer	search.cpp	/^int Editor::replacer(char *rep,OFFTYPE foundpos,SearchAim &aim) {$/;"	f	class:Editor
replacestr	editor.h	/^	char *replacestr=NULL;$/;"	m	class:Editor
replacestrlen	editor.h	/^	int replacestrlen=0;$/;"	m	class:Editor
reset	cursesinit.cpp	/^	void  nocurses_init::reset(void ) {$/;"	f	class:nocurses_init
reset	keyinput.h	/^	inline void reset(void) {keyhead=&basetree;};$/;"	f	class:keyinput
reset	searchinterrupt.h	/^void reset(BLOCKTYPE &count) {$/;"	f	class:WinQuery
reset_screen	main.cpp	/^void    reset_screen(void) {$/;"	f
resetcolors	readconfig.cpp	/^int resetcolors(void) {$/;"	f
resetinput	dialog.cpp	/^void resetinput(void) {$/;"	f
resetkey	keyproc.h	56;"	d
resetnumbase	editor.cpp	/^int Editor::resetnumbase(void) {$/;"	f	class:Editor
resetpos	move.cpp	/^inline void Editor::resetpos(void) {$/;"	f	class:Editor
resized	cursesinit.cpp	/^	int  nocurses_init::resized(void) { \/*Reset screen for program *\/$/;"	f	class:nocurses_init
resized	menus.cpp	/^int resized(void) {$/;"	f
resizeflag	editor.cpp	/^int resizeflag=0;$/;"	v
resizehandler	main.cpp	/^void resizehandler(int signum) {$/;"	f
resizejmp	main.cpp	/^jmp_buf resizejmp;$/;"	v
resizejmp	main.cpp	/^sigjmp_buf resizejmp;$/;"	v
restore	cursesinit.cpp	/^	void  nocurses_init::restore(void) { \/*restore screen from before start program *\/$/;"	f	class:nocurses_init
restoremessageline	inout.h	/^inline void Editor::restoremessageline(void)	{if(nomessage&&ismessage) textovermessage();};$/;"	f	class:Editor
retain	memed.cpp	/^OFFTYPE Viewbuf::retain(OFFTYPE pos) {$/;"	f	class:Viewbuf
returnmessage	editmacros.cpp	227;"	d	file:
returnmessage	editmacros.cpp	229;"	d	file:
reverse	filter.cpp	/^int ScreenPart::reverse(void) {$/;"	f	class:ScreenPart
reverse	screenpart.cpp	/^char * reverse(const char *const in, char *const out, const int len) {$/;"	f
reverse	screenpart.cpp	/^char * reverse(const char *const in, char *const out,const  int len,const short unit) {$/;"	f
reverse	screenpart.cpp	/^inline char * reverse(const unsigned char  *const in, const unsigned char *const out, const int len,const short unit) {$/;"	f
reverse	screenpart.cpp	/^inline char * reverse(const unsigned char * const in, unsigned char *const out, const int len) {$/;"	f
rewrite	menus.cpp	/^int Editor::rewrite(void) {$/;"	f	class:Editor
rewriteall	main.cpp	/^int rewriteall(void) {$/;"	f
rewriteind	helpindex.h	/^short rewriteind[]={18,19,};$/;"	v
rewritemenu	menus.cpp	/^WINDOW *Editor::rewritemenu(struct Editor::menu *m) {$/;"	f	class:Editor
rewritename	helptext.h	/^char rewritename[]="Refresh (Alt-f,r)\\000\\000Rewrites screen. \\000";$/;"	v
rewritepart	screenpart.cpp	/^int ScreenPart::rewritepart(int size) {$/;"	f	class:ScreenPart
rewritescreen	inout.h	39;"	d
right	rbtree.cpp	53;"	d	file:
right	rbtree.h	/^	struct treeel *right;$/;"	m	struct:treeel	typeref:struct:treeel::treeel
rightrotate	rbtree.cpp	/^void Tree::rightrotate(Treel *x) {$/;"	f	class:Tree
rightside	rbtree.cpp	/^Treel *Tree::rightside(Key k) { $/;"	f	class:Tree
rightside	rbtree.cpp	/^Treel *Tree::rightside(Treel *x,Key k) {$/;"	f	class:Tree
rightvis	visuals.h	/^int rightvis(ScreenPart *part) {$/;"	f
rightwin	dialog.cpp	/^WINDOW *rightwin(int l,int c,int by,int bx) {$/;"	f
rmkeyseq	keyinput.cpp	/^intptr_t   keyinput::rmkeyseq(struct tree *start,unsigned char *input,int nrkeys) {$/;"	f	class:keyinput
rmlastfilt	filter.cpp	/^int ScreenPart::rmlastfilt(char *name) {$/;"	f	class:ScreenPart
rmlastfilter	filter.cpp	/^int Editor::rmlastfilter(void) {$/;"	f	class:Editor
rmlastfilter	filter.cpp	/^int ScreenPart::rmlastfilter(void) {$/;"	f	class:ScreenPart
rmlastfilterind	helpindex.h	/^short rmlastfilterind[]={20,21,88,};$/;"	v
rmlastfiltername	helptext.h	/^char rmlastfiltername[]="Rm filter (Alt-y,m)\\000\\000Removes last filter (Reorder, Duplicate, Skip or some other filter\\000defined in a plugin).\\000";$/;"	v
rmlogtemp	inout.cpp	/^void rmlogtemp(void) {$/;"	f
rmmark	marks.cpp	/^int keylookup::rmmark(struct keylookup::mark *mark) {$/;"	f	class:keylookup
rmmarkpos	marken.cpp	/^int Editor::rmmarkpos(OFFTYPE pos) {$/;"	f	class:Editor
rmmode	withcontain.cpp	/^ScreenPart *rmmode(ScreenPart *part) {$/;"	f
rmsubpart	contain.cpp	/^	ScreenPart *Contains::rmsubpart(int pos) {$/;"	f	class:Contains
root	rbtree.h	/^	Treel* &root(void) { return treecontrol->roottree;};$/;"	f	class:Tree
roottree	rbtree.h	/^	Treel *roottree;$/;"	m	struct:memhead
rows	editor.h	/^	inline int rows(void) { return nry;};$/;"	f	class:Editor
rows	screenpart.h	/^	inline int rows(void) {return nry();};$/;"	f	class:ScreenPart
s2bin	hassub.cpp	65;"	d	file:
samefilename	expandfilename.cpp	/^int samefilename(char *one,char *two) {$/;"	f
samelink	win.h	/^inline bool samelink( BY_HANDLE_FILE_INFORMATION *one, BY_HANDLE_FILE_INFORMATION *two) {$/;"	f
save	dialog.cpp	/^	int itemlist::save(void) {$/;"	f	class:itemlist
save	dialog.h	/^	virtual int save(void) {return 0;} ;$/;"	f	class:item
save	dialog.h	/^inline	int Common2<T>::save(void) {$/;"	f	class:Common2
save	file.cpp	/^int Editor::save(void) {$/;"	f	class:Editor
save	gnusearch.cpp	/^void	save(void) {$/;"	f	class:saveregs
saveact	dialog.h	456;"	d
saveacti	dialog.h	457;"	d
saveaction	dialog.h	/^	saveaction(const char *txt,int y,int x,int &var): action(txt,y,x,var) {$/;"	f	class:saveaction
saveaction	dialog.h	/^class saveaction: public action {$/;"	c
saveall	dialog.cpp	/^	int itemlist::saveall(void) {$/;"	f	class:itemlist
saveall	dialog.cpp	/^	int lineitem::saveall(void) {$/;"	f	class:lineitem
saveall	dialog.cpp	/^	int ok::saveall(void) {$/;"	f	class:ok
saveall	dialog.h	/^	virtual int saveall(void) {return 0;} ;$/;"	f	class:item
savealldatatypes	withcontain.cpp	/^int Editor::savealldatatypes(void) {$/;"	f	class:Editor
saveas	file.cpp	/^int Editor::saveas(void) {$/;"	f	class:Editor
saveaser	file.cpp	/^int Editor::saveaser(const char *ant) {$/;"	f	class:Editor
saveasind	helpindex.h	/^short saveasind[]={18,19,};$/;"	v
saveasname	helptext.h	/^char saveasname[]="Save as (Alt-f,a)\\000\\000Save currently active file to a file with another name. \\000";$/;"	v
savecontain	withcontain.cpp	/^int Editor::savecontain(void) {$/;"	f	class:Editor
savedatatype	savedatatype.cpp	/^int savedatatype(ScreenPart *part,FILEHANDLE handle) {$/;"	f
savedatatype	withcontain.cpp	/^int Editor::savedatatype(void) {$/;"	f	class:Editor
savedatatypeind	helpindex.h	/^short savedatatypeind[]={21,22,93,};$/;"	v
savedatatypename	helptext.h	/^char savedatatypename[]="Write Type (Alt-y,w)\\000\\000Save datatype to file so you don't have to recreate complex datatype  \\000everytime you need them.\\000";$/;"	v
savefree	menus.cpp	127;"	d	file:
saveinode	file.cpp	/^int Editor::saveinode(void) {$/;"	f	class:Editor
savemarks	marken.cpp	/^int Editor::savemarks(void) {$/;"	f	class:Editor
savemarksind	helpindex.h	/^short savemarksind[]={15,16,};$/;"	v
savemarksname	helptext.h	/^char savemarksname[]="Save (Alt-k,s)\\000\\000Save marks to file.\\000";$/;"	v
saverecord	editmacros.cpp	/^int Editor::saverecord(void) {$/;"	f	class:Editor
saverecordind	helpindex.h	/^short saverecordind[]={24,25,};$/;"	v
saverecordname	helptext.h	/^char saverecordname[]="Save Recorded (Alt-t,s)\\000\\000Save recorded keystrokes to file.\\000";$/;"	v
saveregs	gnusearch.cpp	/^	saveregs(Editor *e): edp(e) {};$/;"	f	class:saveregs
saveregs	gnusearch.cpp	/^class saveregs {$/;"	c	file:
savesel	select.cpp	/^int Editor::savesel(const char *ant) {$/;"	f	class:Editor
saveselect	select.cpp	/^int Editor::saveselect(void) {$/;"	f	class:Editor
saveselectind	helpindex.h	/^short saveselectind[]={25,26,};$/;"	v
saveselectname	helptext.h	/^char saveselectname[]="Save selection (Alt-e,a)\\000\\000Save selection or copy buffer. \\000";$/;"	v
saveshown	file.cpp	/^int Editor::saveshown(void) {$/;"	f	class:Editor
saveshownind	helpindex.h	/^short saveshownind[]={21,22,84,151,};$/;"	v
saveshownname	file.cpp	/^ssize_t Editor::saveshownname(const char *ant) {$/;"	f	class:Editor
saveshownname	helptext.h	/^char saveshownname[]="Save Shown (Alt-e,v)\\000\\000Save selection in the active datatype as shown on the screen.\\000So the selected data is first converted to the active datatype and\\000then saved to a file.\\000";$/;"	v
screen2byte	filter.cpp	/^int ScreenPart::screen2byte(int pos) {$/;"	f	class:ScreenPart
screen2byteoff	ascii.cpp	/^int Ascii::screen2byteoff(int pos) {$/;"	f	class:Ascii
screen2byteoff	multidigit.cpp	/^int Digit::screen2byteoff(int pos) {$/;"	f	class:Digit
screen2byteoff	screenpart.h	/^virtual int  GeenScreenPart screen2byteoff(int pos) {$/;"	f	class:ScreenPart
screen2filepos	filter.cpp	/^	int Filter::screen2filepos(int pos) {$/;"	f	class:Filter
screenbytes	filter.cpp	/^int ScreenPart::screenbytes(int b) {$/;"	f	class:ScreenPart
screenjmp	main.cpp	/^jmp_buf screenjmp;$/;"	v
screenjmp	main.cpp	/^sigjmp_buf screenjmp;$/;"	v
screenmax	editor.h	/^	inline int screenmax(void) { return ((nrx)*(nry));}$/;"	f	class:Editor
screensize	editor.cpp	/^int Editor::screensize(void) { return screenmax();};$/;"	f	class:Editor
screenupdatefilters	filter.cpp	/^int ScreenPart::screenupdatefilters(int byt) {$/;"	f	class:ScreenPart
scroll	screen.h	74;"	d
scrollbackbyte	move.cpp	/^int Editor::scrollbackbyte(void) {$/;"	f	class:Editor
scrollbackbyteind	helpindex.h	/^short scrollbackbyteind[]={21,22,};$/;"	v
scrollbackbytename	helptext.h	/^char scrollbackbytename[]="Right byte (Alt-i,g)\\000\\000Shift right one byte. The first byte is shifted rightwards to the first byte position.\\000";$/;"	v
scrollbackitem	move.cpp	/^int Editor::scrollbackitem(void) {$/;"	f	class:Editor
scrollbackitemind	helpindex.h	/^short scrollbackitemind[]={21,22,};$/;"	v
scrollbackitemname	helptext.h	/^char scrollbackitemname[]="Right item (Alt-i,r)\\000\\000Shift right one item. The first item is shifted rightwards to the second item position.\\000";$/;"	v
scrollbyte	move.cpp	/^int Editor::scrollbyte(void) {$/;"	f	class:Editor
scrollbyteind	helpindex.h	/^short scrollbyteind[]={20,21,};$/;"	v
scrollbytename	helptext.h	/^char scrollbytename[]="Left byte (Alt-i,f)\\000\\000Shift left one byte. The second byte is shifted leftwards to the second byte position.\\000";$/;"	v
scrolldown	screen.h	75;"	d
scrollitem	move.cpp	/^int Editor::scrollitem(void) {$/;"	f	class:Editor
scrollitemind	helpindex.h	/^short scrollitemind[]={20,21,};$/;"	v
scrollitemname	helptext.h	/^char scrollitemname[]="Left item (Alt-i,l)\\000\\000Shift left one item. The second item is shifted leftwards to the first item position.\\000";$/;"	v
scrollok	screen.h	72;"	d
scrollon	editor.h	591;"	d
scrollup	move.cpp	/^int Editor::scrollup(void) {$/;"	f	class:Editor
scrollupind	helpindex.h	/^short scrollupind[]={13,14,};$/;"	v
scrollupname	helptext.h	/^char scrollupname[]="Up (Alt-i,u)\\000\\000Scrolls file up. The second line is scrolled up to the  first line position.\\000";$/;"	v
scrsize	main.cpp	/^void scrsize(void) {$/;"	f
search	rbtree.cpp	/^Treel *Tree::search(Key k) {$/;"	f	class:Tree
search	search.cpp	/^int Editor::search(void) {$/;"	f	class:Editor
search2bin	screenpart.cpp	/^int ScreenPart::search2bin(const char *const formal, unsigned char *bin, const int len,int binmax) const {$/;"	f	class:ScreenPart
searchbytes	editor.h	/^	short searchbytes,searchgrens,indatatype;$/;"	m	class:Editor
searchdataname	editor.h	/^	char *formatsearch=nullptr,*searchdataname;$/;"	m	class:Editor
searchdataname	search.cpp	61;"	d	file:
searchdefault	search.cpp	/^int Editor::searchdefault(void) {$/;"	f	class:Editor
searchdontedit	memed.cpp	/^bool Editor::searchdontedit(void) {$/;"	f	class:Editor
searcher	search.cpp	/^int Editor::searcher(int askrepl) {$/;"	f	class:Editor
searchert	selectsearch.h	/^} searchert;$/;"	t	typeref:struct:__anon14
searchexpr	editor.h	/^      struct re_pattern_buffer *searchexpr=NULL;$/;"	m	class:Editor	typeref:struct:Editor::re_pattern_buffer
searchgrens	editor.h	/^	short searchbytes,searchgrens,indatatype;$/;"	m	class:Editor
searchhit	screenpart.cpp	/^bool Editor::searchhit(int pos) {$/;"	f	class:Editor
searchind	helpindex.h	/^short searchind[]={17,18,89,153,183,245,316,360,388,430,470,506,543,595,648,711,782,833,880,948,1016,1084,1150,1215,1276,1330,1395,1463,1540,1608,1670,1733,1794,1844,1909,1972,1980,2045,2107,2170,2234,2288,2359,2375,2385,2435,2501,2533,2545,2597,2658,2721,2747,2786,2793,2851,2887,2943,2997,3051,3107,3163,3211,3259,3260,3323,3329,3366,3377,3432,3503,3512,3581,3600,3606,3671,3713,3723,3792,3804,};$/;"	v
searchingfor	search.cpp	81;"	d	file:
searchlen	editor.h	/^	int searchlen;$/;"	m	class:Editor
searchlist	search.cpp	/^int Editor::searchlist(SearchAim &aim) {$/;"	f	class:Editor
searchlister	search.cpp	/^int Editor::searchlister(SearchAim &aim) {$/;"	f	class:Editor
searchname	helptext.h	/^char searchname[]="Search (Alt-m,s)\\000\\000You can move through the dialog by pressing Alt in combination with a \\000highlighted character, or by pressing Tab,Shift-Tab or Alt-Tab.\\000Press Shift to check options.\\000Standard you search within the currently active datatype, but\\000you can also use Ascii or Digit (unsigned integers) by selecting them,\\000specifying base and bytes and pressing Set.\\000Regex: Regular expression  \\000	[1-9] matches characters between 1 and 9\\000	[^1-9] matches everything except [1-9]\\000	1{3,5}  matches 111 1111 and 11111\\000	(Linux|Unix) matches Linux and Unix\\000	\\\\b   boundary. \\\\b123 matches 1234589,  not 9123458\\000	\\\\B   the reverse. \\\\B123 matches 9123458 not 1234589\\000	(\\\\b([ADF]{8}|[0-9]{8})\\\\b ){3} Matches 3 units of 8 characters\\000	consisting only of the characters A D or F or if digits 0-9 beginning\\000	and ending on a word boundary followed by space. \\000	See https:\/\/github.com\/google\/re2\/wiki\/Syntax\\000	Depending on with what options bed is compiled, regex expressions \\000	can be matched with gnu regex-0.13, google re2 or intel hyperscan.\\000	The main difference is that hyperscan shows only the last position\\000	of a match and is the fastest, closely followed by re2. Re2 can \\000	miss long matches stretching block borders (at least 100 bytes \\000	in previous block). When one hit is inside another hit, the\\000	others can return the first ending and not the first\\000	starting hit when list is not set. On next search search starts\\000	after the cursor position, so that it is never returned therafter.\\000Unit:   Match regex expression with single units. When checked, search runs \\000	through the file matching successive datatype units with the regex\\000	expression. When not checked the regex expression is matched\\000	with more than one unit in the selected datatype. For example\\000	8A[^E]{5,100}8E finds A088008A 41100A90 00200882 3108E051, \\000	when not checked, but not when unit is checked. \\000	When Unit is not checked a space is placed after each number:  \\000	Searching for '1.' 01 is seen as '01 ' and '1 ' matches '1.'.\\000Align: \\000	Multibyte datatypes can be aligned differently. For example a 4\\000	byte digit can start at offset 0,1,2 or 3 and that will give\\000	different 4 byte digits. Without checking Boundaries all will\\000	be returned. With Boundaries checked only bytes aligned in the\\000	same way as is now shown on the screen are returned.\\000Case:   Case sensitive: When checked upper and lower case are treated \\000	distinctively.\\000Forward: \\000	When checked the file is searched in the forward\\000	direction going from lower to higher offsets.  When not checked \\000	the file is searched backward.\\000Edge file: \\000	When checked the file is searched from the edge of\\000	the file. From offset 0 when searching forward, from end of\\000	file when searching backward. If not checked searching starts\\000	at the current position.\\000Find:	Here you type the search pattern\\000List: \\000	Generates a list of all hits. During search for each hit\\000	hit a mark (Alt-k,m) is generated.\\000	You can view the hits in marklist (prockey showmarks).\\000	If checked [#] you can go on editing while searching\\000	goes on in the background. If checked [x] searching \\000	is in the foreground and marklist is shown thereafter.\\000	When in multi byte datatypes alignment is not checked,\\000	hits are not strictly sorted on file position.\\000Keep:	Makes current search options the default.\\000\\000Ascii, Digit etc are when checked the current active datatype.\\000Base:\\000	Base of digit. E.g 16 for heximal. \\000Nr bytes: \\000	Gives the number of bytes each data item occupies. By\\000	some datatypes you can change this for example by unsigned integers. \\000Reverse:\\000	Applied filter Revers: reverse bytes while transforming from shown \\000	datatype to file.\\000Set: \\000	After changing datatype info (base,bytes,type) you press Return\\000	on Set to make this the search datatype.\\000Convert: \\000	the same as Set in addition the current search string is converted.\\000Ok: 	search\\000Cancel:	Cancel\\000";$/;"	v
searchpart	editor.h	/^	ScreenPart *searchpart;$/;"	m	class:Editor
searchpos	editor.h	/^	OFFTYPE searchpos;$/;"	m	class:Editor
searchregs	editor.h	/^      struct re_registers *searchregs=NULL;$/;"	m	class:Editor	typeref:struct:Editor::re_registers
searchstartpos	search.cpp	/^OFFTYPE Editor::searchstartpos() {return (Stype.Forward)?(Stype.Edge?0:filepos+editpos+1): (Stype.Edge?(mem.size()-1):(filepos+editpos-1)); }$/;"	f	class:Editor
searchstr	editor.h	/^	char *searchstr=NULL;$/;"	m	class:Editor
searchswitch	search.cpp	/^OFFTYPE Editor::searchswitch(SearchAim &aim) {$/;"	f	class:Editor
secondescape	builtinkeys.h	23;"	d
secondescape	file.cpp	405;"	d	file:
secondescape	keyinput.h	90;"	d
sectorbuf	memory.h	/^class sectorbuf {$/;"	c
sectorbuf	memory.h	/^inline	sectorbuf(int bs,size_t len) {$/;"	f	class:sectorbuf
sectors	biosdisk.h	/^	DWORD sectors;$/;"	m	struct:diskinfo
sectors	memory.cpp	/^	DWORD sectors;$/;"	m	struct:regdisk	file:
sectorsHi	biosdisk.h	/^		  DWORD sectorsHi;$/;"	m	struct:diskinfo
sectorsHi	biosdisk.h	/^		  DWORD sectorsHi;$/;"	m	struct:diskinfo::__anon3::__anon4
sectorsLo	biosdisk.h	/^		  DWORD sectorsLo;$/;"	m	struct:diskinfo
sectorsLo	biosdisk.h	/^		  DWORD sectorsLo;$/;"	m	struct:diskinfo::__anon3::__anon4
segm_handler	main.cpp	/^void segm_handler(int signr) {$/;"	f
segmentationact	main.cpp	/^struct sigaction segmentationact;$/;"	v	typeref:struct:sigaction
sel	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
sel	dialog.h	/^inline	 void orcheck2<T>::sel(void) {$/;"	f	class:orcheck2
selbuf	editor.h	/^	static char *selbuf;$/;"	m	class:Editor
selbuf	select.cpp	/^char *Editor::selbuf=NULL;$/;"	m	class:Editor	file:
select	dialog.cpp	/^	void action::select(void) {$/;"	f	class:action
select	dialog.cpp	/^	void itemlist::select(void) {$/;"	f	class:itemlist
select	dialog.cpp	/^	void lineitem::select(void) { $/;"	f	class:lineitem
select	dialog.cpp	/^char *winsel::select(int key) {$/;"	f	class:winsel
select	dialog.h	/^inline	 void orcheck2<T>::select(void) {$/;"	f	class:orcheck2
select	marks.cpp	/^int keylookup::select(struct keylookup::mark *mark) {$/;"	f	class:keylookup
select	screenpart.cpp	/^int ScreenPart::select(void) {$/;"	f	class:ScreenPart
selectbody	procview.cpp	125;"	d	file:
selectdatatype	select.cpp	/^ScreenPart	*selectdatatype=NULL;$/;"	v
selectdisk	disk.cpp	/^int Editor::selectdisk(void) {$/;"	f	class:Editor
selectdiskind	helpindex.h	/^short selectdiskind[]={15,16,41,42,85,151,221,287,359,377,449,521,522,542,543,620,696,};$/;"	v
selectdiskname	helptext.h	/^char selectdiskname[]="Disk (Alt-f,d)\\000\\000Raw edit of disk drives.\\000\\000Select a device to edit like a large file.\\000When you make changes keep in mind that bed saves information in \\000blocks (of something like 512, 1024 or 4096 bytes long). So with the \\000changes you make, you also write back the old content around the \\000change. If another process changed something there, you will write old \\000information back.\\000The devices shown are taken out of \/proc\/partitions. Subvolumes of LVM \\000partitions are not included. To edit them start bed with something like\\000\\000 bed \/dev\/mapper\/* \\000\\000Before editing any hard disk device decide with which permissions and under \\000what user and group you want to do that. Before changing anything in a real\\000hard drive, try you changes first on a test file or better a test USB-stick.\\000";$/;"	v
selectdynprocedure	procview.cpp	/^int Editor::selectdynprocedure(void) {$/;"	f	class:Editor
selectdynprocedureind	helpindex.h	/^short selectdynprocedureind[]={18,19,94,159,232,307,331,332,396,435,436,458,459,527,563,636,637,652,653,730,731,805,874,946,1020,1086,1159,1160,1230,1302,1372,1440,1503,1522,1523,1589,1590,1667,1729,};$/;"	v
selectdynprocedurename	helptext.h	/^char selectdynprocedurename[]="Dynamic (Alt-t,d)\\000\\000Listing of available dynamic procedures (procedures defined in plugins) or\\000faked dynamic procedures (plugins compiled in the main program).\\000The procedures can be bound to keys, placed in the menu or used in other\\000plugins. You can press return on the name to let it work. Press F1 to get \\000help about a procedure.\\000\\000To load a plugin in bed you should use Alt-t,l or use a plugin \\000statement in bed's configuration file:\\000\\000plugin PLUGINFILENAME\\000\\000Where PLUGINFILENAME is the filename of a plugin (ends with .plug).\\000(See the PLUGINS section of bed.1).\\000To change the default directory used by bed for looking for plugins use:\\000\\000plugindir PATH\\000\\000Where PATH is a unix path (see the CONFIGURATION section of the bed manual).\\000\\000Bed comes with a certain number of plugins. Some are compiled in the main\\000program, others are precompiled dynamic modules and some have to be \\000compiled by the user. Details differ depending on the operating system.\\000The MS windows version of bed doesn't currently support dynamic plugins, \\000so to be used a plugin should be compiled in the main program and\\000not all plugins (that work under MS windows) are compiled in by default.\\000\\000Plugins supplied with bed reside in the plugins\/examples directory of\\000bed support files. To compile all plugins copy the whole bed directory \\000tree to a place were you have write access, goto plugins\/examples and\\000press make. Depending on you gcc installation you have sometimes to\\000use a home compiled bed before you can load a plugin you have \\000compiled yourself.\\000\\000A description of the plugins is given in plugins\/examples\/README.\\000\\000The same descriptions you can get in this procedure listing by pressing F1. \\000You can can also find it in the Procedures subsection of the \\000CONFIGURATION section of the manual page.\\000";$/;"	v
selected	select.cpp	/^int Editor::selected(OFFTYPE pos) {$/;"	f	class:Editor
selectindex	dialog.cpp	/^int winsel::selectindex(int key) {$/;"	f	class:winsel
selectioneditor	select.cpp	/^Editor *selectioneditor=NULL;$/;"	v
selectitemindex	dialog.cpp	/^int  selectitemindex(const char *prompt,char **files,int nr,int start,int col,int line) {$/;"	f
selectitemindexhelp	dialog.cpp	/^int  selectitemindexhelp(const char *prompt,char **files,int nr,int start,int &givehelp,int c,int l) {$/;"	f
selectmenu	menus.cpp	/^void Editor::selectmenu(struct menu *m,int dir) {$/;"	f	class:Editor
selectpos	editor.h	/^	OFFTYPE selectpos;$/;"	m	class:Editor
selectprocedure	procview.cpp	/^inline int selectprocedure(Editor *ed,char **procnames,int procnr,int (Editor::**proc)(void),const char *label,int &take) {$/;"	f
selectprocedure	procview.cpp	/^int Editor::selectprocedure(void) {$/;"	f	class:Editor
selectprocedure	procview.cpp	/^int selectprocedure(Editor *ed,const char **procnames,int procnr,int (Editor::**proc)(void),const char *label,int &take) {$/;"	f
selectprocedureind	helpindex.h	/^short selectprocedureind[]={21,22,99,155,};$/;"	v
selectprocedurename	helptext.h	/^char selectprocedurename[]="Procedures (Alt-t,p)\\000\\000Listing of available built-in procedures to bind to keys or use in plugins. \\000You can press return on the name to run the procedure. \\000Press F1 to get help about the procedure.\\000";$/;"	v
selectstandout	select.cpp	/^int Editor::selectstandout(void) {$/;"	f	class:Editor
selectstandoutind	helpindex.h	/^short selectstandoutind[]={26,27,97,};$/;"	v
selectstandoutname	helptext.h	/^char selectstandoutname[]="Select Standout (Alt-e,o)\\000\\000Select standout. Search and goto mark can show the hit in a different\\000color. You can make this coloring the selection.\\000";$/;"	v
selectvar	dialog.h	/^	 void orcheck2<T>::selectvar(void) {$/;"	f	class:orcheck2
seloffset	editor.h	/^	static	int	seloffset;$/;"	m	class:Editor
seloffset	select.cpp	/^int Editor::seloffset=0;$/;"	m	class:Editor	file:
selwgetch	main.cpp	1336;"	d	file:
sem_destroy	nepsem.h	14;"	d
sem_init	nepsem.h	9;"	d
sem_post	nepsem.h	11;"	d
sem_t	nepsem.h	13;"	d
sem_trywait	nepsem.h	12;"	d
sem_wait	nepsem.h	10;"	d
sema	editor.h	/^	sem_t sema;$/;"	m	class:Editor
sense	searchaim.h	/^	uint8_t  sense;$/;"	m	struct:__anon13
seqput	dialog.cpp	381;"	d	file:
seqput	dialog.cpp	384;"	d	file:
set_dasd_io	memory.cpp	/^inline bool set_dasd_io(HANDLE filehandle) {$/;"	f
setactives	main.cpp	/^void setactives(void) {$/;"	f
setback	search.cpp	/^setback(T &var,T nv): back(var), val(var){$/;"	f	class:setback
setback	search.cpp	/^template <typename T> class setback {$/;"	c	file:
setblocksize	memory.cpp	/^int setblocksize(int bsize) {$/;"	f
setcolorfield	readconfig.cpp	67;"	d	file:
setconfig	main.cpp	/^void setconfig(void) {$/;"	f
setconvstr	ascii.cpp	/^int Ascii::setconvstr(char *str) {$/;"	f	class:Ascii
setconvstr	screenpart.cpp	/^int ScreenPart::setconvstr(char *str) {$/;"	f	class:ScreenPart
setenv	suspend.cpp	/^int setenv(const char *var,const char *value, int overwrite) {$/;"	f
setfield	readconfig.cpp	65;"	d	file:
setfilter	filter.cpp	/^int ScreenPart::setfilter(Filter *fil) {$/;"	f	class:ScreenPart
setkeymap	keyproc.h	45;"	d
setkeymaped	keyproc.h	49;"	d
setkeymaped	keyproc.h	51;"	d
setkeymapedsecond	menus.cpp	58;"	d	file:
setkeymapedsecond	menus.cpp	60;"	d	file:
setkeystring	readconfig.cpp	/^int setkeystring(unsigned char *keybase,int nr,const char *str) {$/;"	f
setlast	dialog.h	/^	orcheck2<T> *setlast(orcheck2<T> *l) {$/;"	f	class:Common2
setmark	marken.cpp	/^int Editor::setmark(unsigned char *keys,int nr,OFFTYPE pos,uint32_t len) {$/;"	f	class:Editor
setoffrecording	editmacros.cpp	/^void setoffrecording(void) {$/;"	f
setpart	filter.cpp	/^	int Filter::setpart(ScreenPart *p) {$/;"	f	class:Filter
setregistrysize	memory.cpp	/^BOOL Memory::setregistrysize(Diskinfo *infodisk,OFFTYPE filesize) $/;"	f	class:Memory
setscreen	cursesinit.cpp	/^	void  nocurses_init::setscreen(void) { \/*Set screen for program *\/$/;"	f	class:nocurses_init
setsearchgegs	gnuasciiregex.cpp	/^int Editor::setsearchgegs(SearchAim &aim) {$/;"	f	class:Editor
setsearchstr	editor.h	/^void setsearchstr(SearchAim &aim) {$/;"	f	class:Editor
setselect	select.cpp	/^OFFTYPE Editor::setselect(OFFTYPE pos) {$/;"	f	class:Editor
setselect	select.cpp	/^int Editor::setselect(void) {$/;"	f	class:Editor
setselectdatatype	select.cpp	/^int	setselectdatatype(ScreenPart *part) {$/;"	f
setselectind	helpindex.h	/^short setselectind[]={17,18,};$/;"	v
setselectioneditor	select.cpp	/^Editor *setselectioneditor(Editor *ed) {$/;"	f
setselectname	helptext.h	/^char setselectname[]="Select (Alt-e,s)\\000\\000Turns selection on or off. \\000";$/;"	v
setshown	viewbuf.h	/^int setshown(int sh) { return shown=sh;}$/;"	f	class:Viewbuf
setsize	cursesinit.cpp	/^	int  nocurses_init::setsize(int scrHigh,int scrWidth) { $/;"	f	class:nocurses_init
setsize	cursesinit.cpp	/^	int  nocurses_init::setsize(void) { $/;"	f	class:nocurses_init
setstart	viewbuf.h	/^void setstart(int st) { start=st;}$/;"	f	class:Viewbuf
setsubpart	contain.cpp	/^ScreenPart *Contains::setsubpart(ScreenPart *part,int i){$/;"	f	class:Contains
setsubpart	repeat.cpp	/^ScreenPart *Repeat::setsubpart(ScreenPart *pa,int i) {$/;"	f	class:Repeat
setuserlabel	parts.cpp	/^void ScreenPart::setuserlabel(const char *label) {$/;"	f	class:ScreenPart
setvalue	dialog.cpp	/^	char *line::setvalue(char *name,int len) {$/;"	f	class:line
sgetfilesize	memory.h	/^inline ssize_t sgetfilesize(FILEHANDLE han) {$/;"	f
sgetfilesize	memory.h	/^inline ssize_t sgetfilesize(FILEHANDLE handle) {$/;"	f
shell	file.cpp	/^int Editor::shell(void) {$/;"	f	class:Editor
shellind	helpindex.h	/^short shellind[]={16,17,48,49,117,178,};$/;"	v
shellname	helptext.h	/^char shellname[]="Shell (Alt-f,h)\\000\\000Starts a new shell or cmd.com.\\000\\000If a new shell is evoked, it uses the SHELL environmental variable \\000to decide which shell to use. You can also set environmental\\000variables in beds configuration file (see manual bed.1).\\000";$/;"	v
shellstop	gethelp.cpp	36;"	d	file:
shift	hyperscan.cpp	/^	int shift;$/;"	m	class:Toshownhandler	file:
shouldreinit	editor.h	/^	int shouldreinit;$/;"	m	class:Editor
show	dialog.cpp	/^	void action::show(void) {$/;"	f	class:action
show	dialog.cpp	/^	void itemlist::show(void) {$/;"	f	class:itemlist
show	dialog.cpp	/^	void line::show(void) {$/;"	f	class:line
show	dialog.cpp	/^	void lineitem::show(void) {$/;"	f	class:lineitem
show	dialog.cpp	/^int show(item **al,int maxar,int inold) {$/;"	f
show	dialog.cpp	/^struct filesym { DWORD mask; char show;}; $/;"	m	struct:filesym	file:
show	dialog.cpp	/^void winsel::show(void) {$/;"	f	class:winsel
show	dialog.h	/^inline	 void orcheck2<T>::show(void) {$/;"	f	class:orcheck2
show	rbtree.cpp	/^void Tree::show(Treel *x) {$/;"	f	class:Tree
show	rbtree.cpp	/^void Tree::show(Treel *x,char *prefix,int len) {$/;"	f	class:Tree
show	rbtree.cpp	/^void Tree::show(void) {$/;"	f	class:Tree
show	withcontain.cpp	/^	char *show;$/;"	m	class:Empty	file:
showcursor	screen.h	/^inline void showcursor(void) $/;"	f
showdialog	dialog.h	488;"	d
showerror	win.h	91;"	d
showfileinfo	withcontain.cpp	/^char showfileinfo=1;$/;"	v
showhelp	gethelp.cpp	/^int showhelp( int (Editor::*proc)(void)) {$/;"	f
showhelp	menus.cpp	/^int  Editor::showhelp(void) {$/;"	f	class:Editor
showkeys	onlykey.cpp	/^void showkeys(FILE *fp,unsigned char *keys,int nr) {$/;"	f
showmarks	marken.cpp	/^template <int typ> int Editor::showmarks(void) {$/;"	f	class:Editor
showmarksind	helpindex.h	/^short showmarksind[]={73,};$/;"	v
showmarksname	helptext.h	/^char showmarksname[]="Shows list of all marks. Press Return to jump to the file offset of the \\000selected mark.\\000";$/;"	v
showmarkswhole	times.cpp	/^unsigned long long startuptime=8000000, showmarkswhole;$/;"	v
showmenu	menus.cpp	/^int Editor::showmenu(void) {$/;"	f	class:Editor
showmenulen	suspend.cpp	/^const int showmenulen=sizeof(showmenustring);$/;"	v
showmenus	menus.cpp	/^static int (Editor::*showmenus[maxtomenu])(void)={$/;"	v	file:
showmenustring	suspend.cpp	/^char showmenustring[]={0,27,'[','?','1','0','h'};$/;"	v
showmessage	inout.cpp	/^ int Editor::showmessage(void) {$/;"	f	class:Editor
shown	viewbuf.h	/^int start,  shown, blnr,minbl;$/;"	m	class:Viewbuf
showposition	inout.cpp	/^ int Editor::showposition(void) {$/;"	f	class:Editor
showprocedure	procview.cpp	/^int Editor::showprocedure(void) {$/;"	f	class:Editor
showprocedureind	helpindex.h	/^short showprocedureind[]={22,23,97,131,170,171,232,290,291,301,338,376,377,436,462,526,588,667,706,769,770,845,905,945,946,982,983,1051,1120,1194,1195,1261,1298,1321,1322,1388,};$/;"	v
showprocedurename	helptext.h	/^char showprocedurename[]="Key binding (Alt-t,k)\\000\\000Shows which procedure is bounded to a key sequence in the format used in \\000bed's configuration file (bedrc).\\000You are asked to press a key sequence.\\000\\000Besides the procedure is shown what you need to write in the\\000configuration file to declare this key-procedure binding.\\000\\000Examples \\000After Alt-t,k, you press F12 and get\\000	keys 27 91 50 52 126 = makeselection\\000\\000The procedure is makeselection which is bounded to escape \\000sequence: 27 91 50 52 126\\000If you like to bind makeselection to an other key sequence, you\\000press after Alt-t,k the key sequence you want to bind it to. \\000You could for example press C-a get 1 as answer and replace '27 91 50 52 126' \\000in the previous keys statement with 1.\\000So you could add keys 1 = makeselection to the end of ~\/.bedrc\\000\\000To know a procedure bounded to the menu, you press the key sequence needed\\000to operate the menu using only the highlighted characters. \\000After Alt-t,k you press Alt-f,x and get\\000\\000menuitem 0 \\"E~xit\\" \\"M-x\\" 12  = quit\\000\\000Procedure quit is bounded to a menuitem. The menu item is in menu 0\\000(the first menu) has label 'E~xit' and had keylabel 'M-x' and is the\\000twelves menuitem in the menu (starting with 0 and counting empty places).\\000\\000If you like to change to name from 'E~xit' to '~Quit' you can add\\000menuitem 0 \\"~Quit\\" \\"M-x\\" 12  = quit \\000to the end of ~\/.bedrc\\000\\000See manual page bed.1 for more details about assigning procedures\\000to menu items and keys.\\000";$/;"	v
showsel	dialog.cpp	/^void winsel::showsel(int dir) {$/;"	f	class:winsel
showsmenu	menus.cpp	/^static int showsmenu=0;$/;"	v	file:
showstatestate	menus.cpp	/^int showstatestate(const char *str,short len,short pos) {$/;"	f
showtree	rbtree.cpp	/^int Tree::showtree(int xleft,int ytop, Treel *t, int parentx ) {$/;"	f	class:Tree
showtree	rbtree.cpp	/^void Tree::showtree(void) {$/;"	f	class:Tree
showvar	dialog.h	/^	 void orcheck2<T>::showvar(void) {$/;"	f	class:orcheck2
sighan_t	gethelp.cpp	/^typedef void (*sighan_t) (int);$/;"	t	file:
siglongjmp	main.h	56;"	d
signalwant	desturbe.h	75;"	d
size	dialog.h	/^	int size,pos,bij;$/;"	m	class:line
size	memory.h	/^	OFFTYPE size(void) const {return filesize;}$/;"	f	class:Memory
size	rbtree.h	/^	BEDS_SIZE_T size;$/;"	m	struct:data
sizeformat	dialog.cpp	/^constexpr const char *sizeformat(const long long) { return " %lld";} ;$/;"	f
sizeformat	dialog.cpp	/^constexpr const char *sizeformat(const long) { return " %ld";} ;$/;"	f
sizehigher	memory.cpp	/^inline BOOL Memory::sizehigher(OFFTYPE sizefile) {$/;"	f	class:Memory
sizelabels	parts.cpp	/^int Editor::sizelabels(ScreenPart *sub,int kind,int nr,va_list ap,bool setlabel) {$/;"	f	class:Editor
sizelabels	screenpart.cpp	/^int ScreenPart::sizelabels(int kind,int nr,...){$/;"	f	class:ScreenPart
sizelabelsnl	screenpart.cpp	/^int ScreenPart::sizelabelsnl(int kind,int nr,...){$/;"	f	class:ScreenPart
sizespecified	memory.cpp	/^OFFTYPE sizespecified=0;$/;"	v
skipsep	savedatatype.cpp	/^void skipsep(char *&ptr,size_t  &len) {$/;"	f
sort	marks.cpp	/^void keylookup::sort(void) {$/;"	f	class:keylookup
sorted	typelist.cc	/^int datatypes::maxlen=0,datatypes::nr=0,datatypes::sorted=1;$/;"	m	class:datatypes	file:
sorted	typelist.h	/^	static int maxlen,nr,sorted;$/;"	m	class:datatypes
sortmarks	marken.cpp	/^int Editor::sortmarks(void) {$/;"	f	class:Editor
sortmarksind	helpindex.h	/^short sortmarksind[]={15,16,};$/;"	v
sortmarksname	helptext.h	/^char sortmarksname[]="Sort (Alt-k,o)\\000\\000Reorder marks so they increase in offset.\\000";$/;"	v
spaceafter	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
spaceafternum	editup.cpp	/^const int spaceafternum=1;$/;"	v
spacebetween	hassub.h	/^inline	virtual int spacebetween(const ScreenPart *const sub) const {$/;"	f	class:HasSub
spacechar	savedatatype.cpp	46;"	d	file:
sparsecp	sparsecp.cpp	/^int sparsecp(int inhandle,OFFHIER instart,OFFHIER inlen,int uit) {$/;"	f
sparsecp	sparsecp.cpp	/^int sparsecp(int inhandle,int uit) {$/;"	f
sparsecp	winsparsecp.cpp	/^int sparsecp(HANDLE hInFile,LONGLONG instart, LONGLONG inlen,HANDLE hOutFile) {$/;"	f
sparsesize	winsparsecp.cpp	/^int sparsesize(HANDLE hOutFile, const LONGLONG  size) {$/;"	f
spatiebuf	dialog.cpp	/^char spatiebuf[240];$/;"	v
splitpos	editup.cpp	/^void Editor::splitpos(OFFTYPE pos) {$/;"	f	class:Editor
standardascii	search.cpp	/^int standardascii(ScreenPart *x) {$/;"	f
standardmenuproc	menus.cpp	142;"	d	file:
standardmenuproc	menus.cpp	159;"	d	file:
standardmenuproc	menus.cpp	160;"	d	file:
standardmenusize	menus.cpp	/^static const int standardmenusize=sizeof((char []){$/;"	v	file:
standend	screen.h	49;"	d
standout	screen.h	48;"	d
standout1	editor.h	/^OFFTYPE standout1=0, standout2=0;$/;"	m	class:Editor
standout2	editor.h	/^OFFTYPE standout1=0, standout2=0;$/;"	m	class:Editor
start	dialog.h	/^	int start;$/;"	m	class:line
start	gnusearch.cpp	/^	regoff_t	*start=NULL;$/;"	m	class:saveregs	file:
start	searchaim.h	/^	OFFTYPE start;$/;"	m	struct:__anon13
start	viewbuf.h	/^int start,  shown, blnr,minbl;$/;"	m	class:Viewbuf
startactive	editor.cpp	/^int	startactive=0;$/;"	v
startbar	menus.cpp	/^int startbar;$/;"	v
startdebug	debug.cpp	/^int startdebug(void) {$/;"	f
startdebug	debug.h	33;"	d
startdia	search.cpp	748;"	d	file:
startkeys	keyproc.cpp	/^ void KeyEdit::startkeys(void) {$/;"	f	class:KeyEdit
startmacrodata	editmacros.cpp	/^const int startmacrodata=50;$/;"	v
startnonactive	editor.cpp	/^int maxedit=10,nredit=0, editfocus=-1,startnonactive=0;$/;"	v
startnum	editor.h	/^	inline int startnum(void) {return 0;};$/;"	f	class:Editor
startpos	hyperscan.cpp	/^	OFFTYPE prevpos=OFFTYPEINVALID,startpos;$/;"	m	class:Toshownhandler	file:
startshell	suspend.cpp	/^int startshell(void) {$/;"	f
startterminal	suspend.cpp	/^int startterminal=1;$/;"	v
starttermios	suspend.cpp	/^struct termios  starttermios; $/;"	v	typeref:struct:termios
startthreadsearch	search.cpp	/^int Editor::startthreadsearch(SearchAim &aim) {$/;"	f	class:Editor
starttrace	trace.cpp	/^int starttrace(void) {$/;"	f
starttrace	trace.h	25;"	d
startupcursor	screen.cpp	/^CONSOLE_CURSOR_INFO  startupcursor,invisiblecursor; 	$/;"	v
startuptime	times.cpp	/^unsigned long long startuptime=8000000, showmarkswhole;$/;"	v
startwait	marken.cpp	37;"	d	file:
startwait	marken.cpp	40;"	d	file:
statdata	memory.h	/^	 STATTYPE statdata;$/;"	m	class:Memory
statepos	menus.cpp	/^static int statepos=0,statestart;$/;"	v	file:
statesafter	menus.cpp	/^char statesafter[100];$/;"	v
statestart	menus.cpp	/^static int statepos=0,statestart;$/;"	v	file:
staymenu	menus.cpp	/^int Editor::staymenu(void) {$/;"	f	class:Editor
stophandler	main.cpp	/^void stophandler(int signum) {$/;"	f
stoplimit	search.cpp	/^static const OFFTYPE stoplimit=static_cast<OFFTYPE>(40000000L);$/;"	v	file:
stoplimit	search.cpp	/^static const OFFTYPE stoplimit=static_cast<OFFTYPE>(4000000L);$/;"	v	file:
stopmain	desturbe.cpp	/^	void stopmain(void) {$/;"	f
stopthread	search.cpp	/^void Editor::stopthread(void) {$/;"	f	class:Editor
str	editor.h	/^	unsigned char *str;$/;"	m	struct:undo
str	searchaim.h	/^	signed char *str;$/;"	m	struct:__anon13
str	viewbuf.h	/^char *str,*tmpbuf;$/;"	m	class:Viewbuf
str2datatype	savedatatype.cpp	/^ScreenPart *str2datatype(Editor *edit,char *&ptr, char *end,char *mes) {$/;"	f
str_call_once	procview.cpp	/^int str_call_once(char *name) {$/;"	f
str_call_open	procview.cpp	/^int str_call_open(char *name) {$/;"	f
str_call_switch	procview.cpp	/^int str_call_switch(char *name) {$/;"	f
straddprocedure	procview.cpp	/^	int			Proclist::straddprocedure(char *name) {$/;"	f	class:Proclist
straddprocedure	procview.cpp	/^ int			straddprocedure(char *name) {$/;"	f
strcpyn	system.h	/^inline char *strcpyn(char *naar,const char *van,size_t n) {$/;"	f
stretchcontain	withcontain.cpp	/^int Editor::stretchcontain(void) {$/;"	f	class:Editor
stretchcontainind	helpindex.h	/^short stretchcontainind[]={18,19,81,139,162,228,276,345,};$/;"	v
stretchcontainname	helptext.h	/^char stretchcontainname[]="Stretch (Alt-y,r)\\000\\000Used to handle nested composed datatypes (made with Alt-y,u).\\000If you have made a composed (struct\/record) datatype for \\000example: {{a,b,c},d,g}\\000Here the letters are datatypes and {..} is one composed datatype.\\000{a,b,c} is a nested (or sub) composed datatype.\\000If you put the cursor on d and apply this function, you can add d to\\000this sub composed datatype. So you get then {{a,b,c,d},g}.\\000";$/;"	v
strings	dialog.h	/^	char **strings;$/;"	m	class:winsel
strsearchingfor	search.cpp	58;"	d	file:
strtoint	search.cpp	97;"	d	file:
strtoundo	undo.cpp	/^int Editor::strtoundo(OFFTYPE pos,int size) {$/;"	f	class:Editor
strtoundoer	undo.cpp	/^int Editor::strtoundoer(OFFTYPE pos,int size) {$/;"	f	class:Editor
strup	readconfig.cpp	/^void strup(char *gegs) {$/;"	f
subpart	repeat.cpp	/^ScreenPart *Repeat::subpart(const int i) const {$/;"	f	class:Repeat
subparts	contain.h	/^	ScreenPart  **subparts;$/;"	m	class:Contains
subtract	digitstring.cpp	/^int subtract(struct mint *uit,const struct mint *in1,const struct mint *in2) {$/;"	f
subtractmarks	marken.cpp	/^int Editor::subtractmarks(void) {$/;"	f	class:Editor
subtractmarksind	helpindex.h	/^short subtractmarksind[]={19,20,88,};$/;"	v
subtractmarksname	helptext.h	/^char subtractmarksname[]="Subtract (Alt-k,u)\\000\\000Removes marks with the same position as one of the marks saved with\\000Alt-k,s. Asks for such a file.\\000";$/;"	v
subtypeoffset	search.cpp	/^int subtypeoffset(const ScreenPart *part,const ScreenPart *super) {$/;"	f
success	disk.cpp	/^BOOL success;$/;"	m	class:Volumes	file:
sun_systypes	sys_types.h	/^SysType sun_systypes[] = {$/;"	v
suspender	suspend.cpp	/^int suspender(bool susp) {$/;"	f
switchcommand	editor.cpp	/^int Editor::switchcommand(void) {$/;"	f	class:Editor
switchcommandind	helpindex.h	/^short switchcommandind[]={30,31,101,171,185,259,328,};$/;"	v
switchcommandname	helptext.h	/^char switchcommandname[]="Commandmode(on\/off) (Alt-t,c)\\000\\000Switches command mode on or off. In command mode procedures are bound\\000to normal characters as in pagers like 'less' and 'more' and in vi's \\000command mode.\\000Some of less's and vi's keys are already bound in the configuration file.\\000If you like some more you should add them to the configuration file.\\000You can mail them to me if you like to help others.\\000";$/;"	v
switchcursor	window.cpp	/^	inline int Editor::switchcursor(void) {$/;"	f	class:Editor
switchmenu	menus.cpp	/^int Editor::switchmenu(void) {$/;"	f	class:Editor
switchmenuind	helpindex.h	/^short switchmenuind[]={15,16,};$/;"	v
switchmenuname	helptext.h	/^char switchmenuname[]="Menu (Alt-t,u)\\000\\000Hides or shows menu bar.\\000";$/;"	v
switchmessage	editor.cpp	/^int Editor::switchmessage(void) {$/;"	f	class:Editor
switchmessageind	helpindex.h	/^short switchmessageind[]={22,23,107,};$/;"	v
switchmessagename	helptext.h	/^char switchmessagename[]="Messageline (Alt-t,m)\\000\\000Show the message line only when a new message arrives and letting it override with \\000displayed data, or keep it always on (default).\\000";$/;"	v
switchvar	dialog.cpp	/^	int itemlist::switchvar(void) {$/;"	f	class:itemlist
switchvar	dialog.h	/^	 int orcheck2<T>::switchvar(void) {$/;"	f	class:orcheck2
sym	keyconfig.cpp	63;"	d	file:
sym	keyinput.h	/^			intptr_t  sym;$/;"	m	union:keyinput::tree::__anon9
symsize	main.cpp	802;"	d	file:
sys_errlist	system.h	73;"	d
sys_nerr	system.h	74;"	d
systypes	ptypes.h	/^const char *systypes[]={$/;"	v
tab	hash.h	/^	Hashtable *tab;$/;"	m	class:Hash
table	editor.h	/^	int *table;$/;"	m	class:Editor
table	keyinput.h	/^			struct tree **table;$/;"	m	union:keyinput::tree::__anon9	typeref:struct:keyinput::tree::__anon9::tree
tablebase	editor.h	/^	int tablebase[256];$/;"	m	class:Editor
tablelimit	keyinput.cpp	24;"	d	file:
take	dialog.cpp	/^	void line::take(void) {$/;"	f	class:line
takefile	dialog.cpp	/^const char *takefile(const char *com,const char *pat) {$/;"	f
takescr	dialog.cpp	/^WINDOW *takescr;$/;"	v
takeuserlabel	screenpart.cpp	/^char *ScreenPart::takeuserlabel(void) {return userlabel;};$/;"	f	class:ScreenPart
terminfokey	keyproc.cpp	/^intptr_t KeyEdit::terminfokey(const char *keyname,int (Editor::*proc)(void)) {$/;"	f	class:KeyEdit
termkey	keyproc.cpp	75;"	d	file:
termkey	keyproc.cpp	78;"	d	file:
termkeycapprocstring	keyproc.cpp	/^int termkeycapprocstring(const char *termcap,const char *procname) {$/;"	f
termkeylabel	keyproc.cpp	76;"	d	file:
termkeylabel	keyproc.cpp	79;"	d	file:
test	marks.cpp	/^void keylookup::test(void) {}$/;"	f	class:keylookup
testmarks	editup.cpp	377;"	d	file:
testreturn	move.cpp	261;"	d	file:
testsize	memory.cpp	/^inline BOOL Memory::testsize(OFFTYPE sizetest) {$/;"	f	class:Memory
texi	main.cpp	/^struct text_info texi;$/;"	v	typeref:struct:text_info
text	dialog.h	/^	char text[maxtext],*after;$/;"	m	class:item
text	gethelp.cpp	/^	char *text;$/;"	m	struct:help	file:
text	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	m	struct:__anon11
textovermessage	inout.h	/^inline void Editor::textovermessage(void) {editmove(MESSAGELINE,0);clearline();putline(MESSAGELINE);cursorpos();ismessage=0;}$/;"	f	class:Editor
thecols	dialog.cpp	127;"	d	file:
thecols	main.cpp	/^int thelines,thecols;$/;"	v
thekbhit	main.cpp	/^int  thekbhit(void)$/;"	f
thekbhit	main.cpp	1371;"	d	file:
thekey	dialog.h	/^	char thekey(void) {return lowch;};$/;"	f	class:item
thelines	dialog.cpp	126;"	d	file:
thelines	main.cpp	/^int thelines,thecols;$/;"	v
thename	screenpart.h	42;"	d
thenil	rbtree.cpp	58;"	d	file:
therepeat	editmacros.cpp	/^int Editor::therepeat(int nr) {$/;"	f	class:Editor
therewrite	menus.cpp	/^int therewrite(void) {$/;"	f
thescreen	main.cpp	/^SCREEN *thescreen=NULL;$/;"	v
thesuspend	suspend.cpp	/^int thesuspend(bool susp=true) {$/;"	f
threadgegs	editor.h	/^struct threadgegs {$/;"	s
threadsearch	editor.h	/^	pthread_t threadsearch;$/;"	m	class:Editor
timed	searchinterrupt.h	/^bool timed(void) {$/;"	f	class:WinQuery
timer	searchinterrupt.h	/^TimeT timer;$/;"	m	class:SearchInterrupt
timerdiff	editor.cpp	196;"	d	file:
titlemaak	dialog.cpp	972;"	d	file:
titleweg	dialog.cpp	990;"	d	file:
tmpbuf	viewbuf.h	/^char *str,*tmpbuf;$/;"	m	class:Viewbuf
tmpdirlens	support.cpp	/^ int tmpdirlens[tmpdirnr]={};$/;"	v
tmpdirnr	support.cpp	/^ const int tmpdirnr=(sizeof(tmpdirs)\/sizeof(char*));$/;"	v
tmpdirs	support.cpp	/^ const char *tmpdirs[]={getenv("TMP"),getenv("TEMP")$/;"	v
tmpdirs	support.cpp	/^ const char *tmpdirs[]={getenv("TMPDIR")$/;"	v
tmpopenfile	file.cpp	/^FILEHANDLE Editor::tmpopenfile(const char *ant) {$/;"	f	class:Editor
tobegin	marks.cpp	/^void keylookup::tobegin(void) {iter=&begin;};$/;"	f	class:keylookup
tobinlen	search.cpp	1218;"	d	file:
toborder	move.cpp	/^int Editor::toborder(OFFTYPE posi) {$/;"	f	class:Editor
toborderpos	move.cpp	/^int Editor::toborderpos(OFFTYPE pos) {$/;"	f	class:Editor
tocommand	editor.cpp	/^int Editor::tocommand(void) {$/;"	f	class:Editor
tocommandind	helpindex.h	/^short tocommandind[]={};$/;"	v
tocommandname	helptext.h	/^char tocommandname[]="Turns command mode on.\\000";$/;"	v
todigit	digitstring.cpp	157;"	d	file:
todigitstring	digitstring.cpp	/^int todigitstring(struct mint *in,int  base,char *rem,int len) {$/;"	f
toendline	readconfig.cpp	/^char *toendline(char *str) {$/;"	f
tofile	filter.h	/^	virtual int tofile(const unsigned char * const input,int &len,unsigned char * const output) {$/;"	f	class:Filter
tofile	filter.h	/^	virtual int tofile(const unsigned char * const input,unsigned char * const output) {$/;"	f	class:Filter
tofilefilters	filter.cpp	/^int ScreenPart::tofilefilters(char *input,int &inplen,char *output) const {$/;"	f	class:ScreenPart
tofilefilterspos	filter.cpp	/^int ScreenPart::tofilefilterspos(int pos) const {$/;"	f	class:ScreenPart
toforlen	search.cpp	1219;"	d	file:
tolow	editor.h	/^inline int tolow(const int ch) {return ch+(-'A'+'a');}$/;"	f
tomark	marken.cpp	/^int Editor::tomark(void) {$/;"	f	class:Editor
tomarkind	helpindex.h	/^short tomarkind[]={15,16,};$/;"	v
tomarkname	helptext.h	/^char tomarkname[]="Goto (Alt-k,g)\\000\\000Goto mark. You are asked to type the corresponding key. \\000";$/;"	v
tomenu	menus.cpp	/^int tomenu[maxtomenu];$/;"	v
tomenunr	menus.cpp	/^int tomenunr=0;$/;"	v
tomode	parts.cpp	/^int Editor::tomode(DataType type,int len,int order) {$/;"	f	class:Editor
tomodenr	parts.cpp	/^int Editor::tomodenr(int newmode) {$/;"	f	class:Editor
toname	keyconfig.cpp	65;"	d	file:
tonameel	keyconfig.cpp	68;"	d	file:
top	editor.h	/^	inline int top(void) {return 0;};$/;"	f	class:Editor
top	screenpart.h	/^	int left,top,spaceafter,maxres,apart,bytes,half,oldhalf;$/;"	m	class:ScreenPart
topos	move.cpp	/^int Editor::topos(OFFTYPE pos) {$/;"	f	class:Editor
toproc	keyconfig.cpp	64;"	d	file:
toscreen	screen.cpp	/^int Editor::toscreen(void) {$/;"	f	class:Editor
tosubscreen	parts.cpp	/^int Editor::tosubscreen(void) {$/;"	f	class:Editor
tosubscreenind	helpindex.h	/^short tosubscreenind[]={79,};$/;"	v
tosubscreenname	helptext.h	/^char tosubscreenname[]="Goto the data screen corresponding to the number you type after this command. \\0000 is the first from the left, 1 the second etc. (No key binding).\\000";$/;"	v
tot	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
total	keyconfig.cpp	/^int total=sizeof(keydefto)\/sizeof(KeydefType);$/;"	v
total	marks.h	/^	int total;$/;"	m	class:keylookup
toup	editor.h	/^inline int toup(const int ch) {return ch+(-'a'+'A');}$/;"	f
tracefile	trace.cpp	/^FILE *tracefile;$/;"	v
traceproc	trace.cpp	/^int	traceproc(Editor* ed, int (Editor::*pr)(void)) {$/;"	f
traceproc	trace.h	26;"	d
tracing	trace.cpp	/^int tracing=1;$/;"	v
translateind	helpindex.h	/^short translateind[]={20,21,105,129,164,170,235,306,333,338,406,437,446,491,504,572,633,634,656,};$/;"	v
translatename	helptext.h	/^char translatename[]="Translate (Alt-d,l)\\000\\000Translate assigns labels to values of another datatype. You can use it when numbers\\000have a certain meaning.\\000After selecting 'New' or 'Change':\\000Type:\\000	The To datatype is what is shown on the screen (usually Ascii).\\000	For certain values of the 'From' datatype you specify what should be \\000	shown in the To datatype.\\000Add:\\000	After specifiying the To and From datatypes, you specify the From \\000	and To values and press Add. \\000Default:\\000	If there is no assignment Default is shown.\\000Assignments:\\000	After pressing Alt-g you can select a certain existing assignment.\\000	Pressing Return makes it editable, pressing Del deletes it.\\000\\000After selecting 'Use;\\000	Select label and press return to insert this value.\\000";$/;"	v
tree	keyinput.h	/^	struct tree {$/;"	s	class:keyinput
tree	marks.h	/^struct tree {$/;"	s	class:keylookup
tree	memory.h	/^	Tree tree;$/;"	m	class:Memory
treebase	keyinput.h	/^	struct tree *treebase;$/;"	m	class:keyinput	typeref:struct:keyinput::tree
treebase	marks.h	/^struct tree treebase,*keyhead;$/;"	m	class:keylookup	typeref:struct:keylookup::tree
treecontrol	rbtree.h	/^	struct memhead *treecontrol;$/;"	m	class:Tree	typeref:struct:Tree::memhead
treeel	rbtree.h	/^struct treeel {$/;"	s
treeinsert	rbtree.cpp	/^void Tree::treeinsert(Treel *z) {$/;"	f	class:Tree
treemaximum	rbtree.cpp	/^Treel *Tree::treemaximum(Treel *x) {$/;"	f	class:Tree
treeminimum	rbtree.cpp	/^Treel *Tree::treeminimum(Treel *x) {$/;"	f	class:Tree
treesearch	rbtree.cpp	/^Treel *Tree::treesearch(Treel *x,Key k) {$/;"	f	class:Tree
treesuccessor	rbtree.cpp	/^Treel *Tree::treesuccessor(Treel *x) {$/;"	f	class:Tree
trefresh	dialog.cpp	49;"	d	file:
troggleselect	screenpart.cpp	/^void ScreenPart::troggleselect(int pos) {$/;"	f	class:ScreenPart
truncate	edit.cpp	/^int Editor::truncate(void) {$/;"	f	class:Editor
truncate64	offtypes.h	38;"	d
truncateind	helpindex.h	/^short truncateind[]={19,20,};$/;"	v
truncatename	helptext.h	/^char truncatename[]="Truncate (Alt-e,t)\\000\\000Truncates file on the right of cursor. \\000";$/;"	v
two	keyconfig.cpp	66;"	d	file:
twocharsfromone	main.cpp	/^static int twocharsfromone=0;$/;"	v	file:
type	screenpart.h	/^	DataType type;$/;"	m	class:ScreenPart
type	sys_types.h	/^	unsigned char type;$/;"	m	struct:_SysType
typevolg	main.h	/^inline int typevolg(int x) {return ((x>10)?1:(x>8?2:(x>2?3:4)));}$/;"	f
uint8_t	editor.h	/^enum	 RegexT:uint8_t  {$/;"	g
unblock	main.cpp	/^void unblock(int signum) {$/;"	f
unblock	main.cpp	395;"	d	file:
undo	editor.h	/^struct undo {$/;"	s
undo	undo.cpp	/^int Editor::undo(void) {$/;"	f	class:Editor
undobuf	editor.h	/^struct  undo *undobuf;$/;"	m	class:Editor	typeref:struct:Editor::undo
undohalf	editor.h	/^int lastundo,redos,beginundo,undohalf;$/;"	m	class:Editor
undoind	helpindex.h	/^short undoind[]={15,16,89,163,};$/;"	v
undoname	helptext.h	/^char undoname[]="Undo (Alt-e,u)\\000\\000Undo last change. It can't always undo all changes. Currently restricted\\000to the last 5000 changes or how MAXUNDO was otherwise defined during the \\000compilation of bed.\\000";$/;"	v
undoone	undo.cpp	/^int Editor::undoone(void) {$/;"	f	class:Editor
undopos	undo.cpp	/^int Editor::undopos(void)  {$/;"	f	class:Editor
unequal	editor.h	/^inline int unequal(const void *onev,const void *twov,size_t len) {$/;"	f
unit	reverse.h	/^	int unit;$/;"	m	class:Reverse
unitformlen	editor.h	/^int unitinelpos=0,unitformlen=0;$/;"	m	class:Editor
unitinelpos	editor.h	/^int unitinelpos=0,unitformlen=0;$/;"	m	class:Editor
unitsize	screenpart.cpp	87;"	d	file:
unittoscreen	screenpart.cpp	/^void ScreenPart::unittoscreen(int pos) {$/;"	f	class:ScreenPart
unsetenv	suspend.cpp	/^int unsetenv(const char *var) {$/;"	f
unsign	misc.h	/^struct unsign {$/;"	s
unsign	misc.h	/^struct unsign<T,1> {$/;"	s
unsign	misc.h	/^struct unsign<T,2> {$/;"	s
unsign	misc.h	/^struct unsign<T,sizeof(uintptr_t)!=4?4:0> {$/;"	s
unsign	misc.h	/^struct unsign<T,sizeof(uintptr_t)!=8?8:INT_MAX> {$/;"	s
unsign	misc.h	/^struct unsign<T,sizeof(uintptr_t)> {$/;"	s
unsignedformat	dialog.cpp	/^constexpr const char *unsignedformat(const unsigned int) {return "%u ";};$/;"	f
unsignedformat	dialog.cpp	/^constexpr const char *unsignedformat(const unsigned long long) {return "%llu ";};$/;"	f
unsignedformat	dialog.cpp	/^constexpr const char *unsignedformat(const unsigned long) {return "%lu ";};$/;"	f
updated	editor.h	/^	long editpos,oldpos,updated;$/;"	m	class:Editor
uplevel	withcontain.cpp	/^int Editor::uplevel(void) {$/;"	f	class:Editor
uplevelind	helpindex.h	/^short uplevelind[]={17,18,90,};$/;"	v
uplevelname	helptext.h	/^char uplevelname[]="Parent (Alt-y,t)\\000\\000Parent datatype. Make active datatype the datatype in which the current\\000datatype is contained. \\000";$/;"	v
upmenus	menus.cpp	/^int upmenus(void) {$/;"	f
usecopy	editlimits.cpp	/^inline long long usecopy(long long x) { $/;"	f
used_dasd_io	memory.h	/^bool	used_dasd_io;$/;"	m	class:Memory
usedondisk	editor.h	/^	OFFTYPE usedondisk;$/;"	m	struct:undo
useext	editlimits.cpp	/^inline long long useext(long long x) {$/;"	f
userblocksize	memory.cpp	/^int userblocksize=-1;$/;"	v
userconfig	contain.cpp	/^int  Contains::userconfig(int kind) {$/;"	f	class:Contains
userconfig	parts.cpp	/^int Ascii::userconfig(int kind) {$/;"	f	class:Ascii
userconfig	repeat.cpp	/^int  Repeat::userconfig(int kind) {$/;"	f	class:Repeat
userconfig	screenpart.cpp	/^int ScreenPart::userconfig(int kind) {$/;"	f	class:ScreenPart
userlabel	screenpart.h	/^	char *userlabel;$/;"	m	class:ScreenPart
usesearch	editor.h	/^searchert  usesearch={nullptr,nullptr};$/;"	m	class:Editor
usetrunc	editlimits.cpp	/^inline long long usetrunc(long long x) {return (2*x+inmem(x))+certain;} \/*in undo buffer and by undo in memory *\/$/;"	f
val	dialog.h	/^	T val;$/;"	m	class:orcheck2
val	digitstring.h	/^	unsigned char *val;$/;"	m	struct:mint
val	search.cpp	/^	T val;$/;"	m	class:setback	file:
var	dialog.h	/^	T var;$/;"	m	class:check2
var	dialog.h	/^	char *var;$/;"	m	class:lineitem
var	dialog.h	/^	int &var;$/;"	m	class:action
var	readconfig.h	/^typedef struct { char text[20]; chtype var; int colornr;int forg;int back; } Fieldcol;$/;"	m	struct:__anon11
verleng	digitstring.cpp	28;"	d	file:
view	editor.h	/^	Viewbuf view;$/;"	m	class:Editor
view	rbtree.h	/^	DrawTree *view;$/;"	m	class:Tree
view	viewbuf.h	/^char *view(void) {return str+start;}$/;"	f	class:Viewbuf
virtualwidth	editor.h	/^int visualwidth,visualoffset,virtualwidth, visualunit;$/;"	m	class:Editor
visualoffset	editor.h	/^int visualwidth,visualoffset,virtualwidth, visualunit;$/;"	m	class:Editor
visualunit	editor.h	/^int visualwidth,visualoffset,virtualwidth, visualunit;$/;"	m	class:Editor
visualwidth	editor.h	/^int visualwidth,visualoffset,virtualwidth, visualunit;$/;"	m	class:Editor
volumenamefs	disk.cpp	/^inline int volumenamefs(const char *drive,char *buf,int maxbuf) {$/;"	f	class:Volumes
waitforsigwinch	screen.cpp	/^void waitforsigwinch(void) {$/;"	f
waitinput	editor.cpp	/^int waitinput=0;$/;"	v
wantaway	filter.h	/^	virtual int  wantaway(void) {return 1;}$/;"	f	class:Filter
wantsignal	main.cpp	/^int wantsignal=0;$/;"	v
wastime	searchinterrupt.h	/^LARGE_INTEGER wastime;$/;"	m	class:WinQuery
wastime	searchinterrupt.h	/^clock_t wastime;$/;"	m	class:SearchInterrupt
win	editor.h	/^	WINDOW *win;$/;"	m	struct:Editor::menu
win32diskfilesize	memory.cpp	/^OFFTYPE Memory::win32diskfilesize(FILEHANDLE filehandle,OFFTYPE *begin,OFFTYPE *end) {$/;"	f	class:Memory
winb	dialog.cpp	168;"	d	file:
windel	editor.cpp	/^void Editor::windel(void) {$/;"	f	class:Editor
windowstempdir	support.cpp	/^char *windowstempdir=(GetWindowsDirectory(windowstempdirbuf,MAX_PATH)?(strcat(windowstempdirbuf,"\\\\Temp"),windowstempdirbuf):NULL);$/;"	v
windowstempdirbuf	support.cpp	/^char windowstempdirbuf[MAX_PATH];$/;"	v
winerror	win.h	/^inline DWORD winerror(char *mes=messagebuf,int maxmes=maxmessagebuf,DWORD dw = GetLastError()) {$/;"	f
winerrormessage	win.h	83;"	d
winexpandall	main.cpp	/^inline void winexpandall(const char *const in, char * const out) {$/;"	f
winh	dialog.cpp	169;"	d	file:
winpath	win.h	/^inline ssize_t		winpath(const char *in,char *out) {$/;"	f
wins	dialog.h	/^	winsel wins;$/;"	m	class:itemlist
winsel	dialog.h	/^	winsel(char **str,int nr,int xpos,int ypos,int begin=0,int hight=10,int len=20) {$/;"	f	class:winsel
winsel	dialog.h	/^class winsel {$/;"	c
withinxterm	main.cpp	/^int withinxterm=findoutxwindows();$/;"	v
writable	support.cpp	/^int writable(char *name) {$/;"	f
writebuf	editup.cpp	/^int Editor::writebuf(void) {$/;"	f	class:Editor
writefilter	filter.cpp	309;"	d	file:
writemacroheader	editmacros.cpp	/^inline int writemacroheader(FILEHANDLE handle) {$/;"	f
writeofftype	marken.cpp	/^inline void writeofftype(const FILEHANDLE  han,const OFFTYPE get) {$/;"	f
writesearchgegs	file.cpp	/^void writesearchgegs(void) {$/;"	f
wrongkeyseq	marks.h	71;"	d
x	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
x	dialog.h	/^	int x,y;$/;"	m	class:item
x	dialog.h	/^	int x,y;$/;"	m	class:line
x	editor.h	/^	inline int x(void) { return (editpos%nrx);};$/;"	f	class:Editor
x	gnusearch.cpp	/^	saveregs(const saveregs &x) = delete; $/;"	m	class:saveregs	file:
x	screenpart.h	/^	inline int x(int pos) { return (((pos%nrx())\/bytes)*(maxres+apart));}; \/*** position to x **\/$/;"	f	class:ScreenPart
xbedmenu	menus.cpp	/^int Editor::xbedmenu(void) {$/;"	f	class:Editor
y	dialog.h	/^	int tot,beg,h,l,x,y,sel,icase;$/;"	m	class:winsel
y	dialog.h	/^	int x,y;$/;"	m	class:item
y	dialog.h	/^	int x,y;$/;"	m	class:line
y	editor.h	/^	inline int y(void) { return (editpos\/nrx);};$/;"	f	class:Editor
y	screenpart.h	/^	inline int y(int pos) { return (pos\/nrx());};		\/*** position to y **\/$/;"	f	class:ScreenPart
zomaareenvar	dialog.cpp	/^int zomaareenvar;$/;"	v
zoommode	parts.cpp	/^int Editor::zoommode(void) {$/;"	f	class:Editor
zoommodeind	helpindex.h	/^short zoommodeind[]={15,16,};$/;"	v
zoommodename	helptext.h	/^char zoommodename[]="Full (Alt-d,f)\\000\\000Zooms current data type (For example ASCII). \\000";$/;"	v
zoomwindow	window.cpp	/^int Editor::zoomwindow(void) {$/;"	f	class:Editor
zoomwindowind	helpindex.h	/^short zoomwindowind[]={15,16,};$/;"	v
zoomwindowname	helptext.h	/^char zoomwindowname[]="Zoom (Alt-w,z)\\000\\000Zooms current window \\000";$/;"	v
~Contains	contain.cpp	/^	Contains::~Contains() {$/;"	f	class:Contains
~Editor	editup.cpp	/^ Editor::~Editor() {$/;"	f	class:Editor
~Filter	filter.cpp	/^	Filter::~Filter() {}$/;"	f	class:Filter
~HasSub	hassub.cpp	/^	HasSub::~HasSub() {$/;"	f	class:HasSub
~Keystrokes	macros.cpp	/^	Keystrokes::~Keystrokes()  {$/;"	f	class:Keystrokes
~Proclist	procview.cpp	/^	Proclist::~Proclist() {$/;"	f	class:Proclist
~Repeat	repeat.cpp	/^	Repeat::~Repeat() {$/;"	f	class:Repeat
~Reverse	reverse.h	/^	~Reverse() {$/;"	f	class:Reverse
~ScreenPart	screenpart.cpp	/^	ScreenPart::~ScreenPart() {$/;"	f	class:ScreenPart
~SearchInterrupt	searchinterrupt.h	/^~SearchInterrupt() {$/;"	f	class:SearchInterrupt
~Tree	rbtree.cpp	/^Tree::~Tree(void) {$/;"	f	class:Tree
~Viewbuf	viewbuf.h	/^~Viewbuf() {$/;"	f	class:Viewbuf
~item	dialog.h	/^	virtual ~item() {};$/;"	f	class:item
~itemlist	dialog.cpp	/^	itemlist::~itemlist() {$/;"	f	class:itemlist
~keyinput	keyinput.cpp	/^keyinput::~keyinput() {freekeys(&basetree);}$/;"	f	class:keyinput
~keylookup	marks.cpp	/^keylookup::~keylookup() {$/;"	f	class:keylookup
~line	dialog.cpp	/^	line::~line() {$/;"	f	class:line
~lineitem	dialog.h	/^	~lineitem() {};$/;"	f	class:lineitem
~orcheck2	dialog.h	/^	~orcheck2() {$/;"	f	class:orcheck2
~saveregs	gnusearch.cpp	/^	~saveregs() {$/;"	f	class:saveregs
~sectorbuf	memory.h	/^inline	~sectorbuf() {$/;"	f	class:sectorbuf
~setback	search.cpp	/^~setback() {$/;"	f	class:setback
~winsel	dialog.h	/^	~winsel() {}$/;"	f	class:winsel
